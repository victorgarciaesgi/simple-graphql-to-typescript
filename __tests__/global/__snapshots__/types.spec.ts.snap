// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test simple type generation from different sources Generates types correctly from graphql Analyst 1`] = `
"/* eslint-disable */
/* tslint-disable */
// @ts-nocheck
// *******************************************************
// *******************************************************
//
// GENERATED FILE, DO NOT MODIFY
//
// Made by Victor Garcia Â®
//
// https://github.com/victorgarciaesgi
// *******************************************************
// *******************************************************
// ðŸ’™

export type Maybe<T> = T | null;

export interface Query {
  Page?: Maybe<Page>;
  /** Media query */
  Media?: Maybe<Media>;
  /** Media Trend query */
  MediaTrend?: Maybe<MediaTrend>;
  /** Airing schedule query */
  AiringSchedule?: Maybe<AiringSchedule>;
  /** Character query */
  Character?: Maybe<Character>;
  /** Staff query */
  Staff?: Maybe<Staff>;
  /** Media list query */
  MediaList?: Maybe<MediaList>;
  /** Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required. */
  MediaListCollection?: Maybe<MediaListCollection>;
  /** Collection of all the possible media genres */
  GenreCollection?: Maybe<string[]>;
  /** Collection of all the possible media tags */
  MediaTagCollection?: Maybe<MediaTag[]>;
  /** User query */
  User?: Maybe<User>;
  /** Get the currently authenticated user */
  Viewer?: Maybe<User>;
  /** Notification query */
  Notification?: Maybe<NotificationUnion>;
  /** Studio query */
  Studio?: Maybe<Studio>;
  /** Review query */
  Review?: Maybe<Review>;
  /** Activity query */
  Activity?: Maybe<ActivityUnion>;
  /** Activity reply query */
  ActivityReply?: Maybe<ActivityReply>;
  /** Follow query */
  Following?: Maybe<User>;
  /** Follow query */
  Follower?: Maybe<User>;
  /** Thread query */
  Thread?: Maybe<Thread>;
  /** Comment query */
  ThreadComment?: Maybe<ThreadComment[]>;
  /** Recommendation query */
  Recommendation?: Maybe<Recommendation>;
  /** Like query */
  Like?: Maybe<User>;
  /** Provide AniList markdown to be converted to html (Requires auth) */
  Markdown?: Maybe<ParsedMarkdown>;

  AniChartUser?: Maybe<AniChartUser>;
  /** Site statistics query */
  SiteStatistics?: Maybe<SiteStatistics>;
}

/** Page of data */
export interface Page {
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;

  users?: Maybe<User[]>;

  media?: Maybe<Media[]>;

  characters?: Maybe<Character[]>;

  staff?: Maybe<Staff[]>;

  studios?: Maybe<Studio[]>;

  mediaList?: Maybe<MediaList[]>;

  airingSchedules?: Maybe<AiringSchedule[]>;

  mediaTrends?: Maybe<MediaTrend[]>;

  notifications?: Maybe<NotificationUnion[]>;

  followers?: Maybe<User[]>;

  following?: Maybe<User[]>;

  activities?: Maybe<ActivityUnion[]>;

  activityReplies?: Maybe<ActivityReply[]>;

  threads?: Maybe<Thread[]>;

  threadComments?: Maybe<ThreadComment[]>;

  reviews?: Maybe<Review[]>;

  recommendations?: Maybe<Recommendation[]>;

  likes?: Maybe<User[]>;
}

export interface PageInfo {
  /** The total number of items */
  total?: Maybe<number>;
  /** The count on a page */
  perPage?: Maybe<number>;
  /** The current page */
  currentPage?: Maybe<number>;
  /** The last page */
  lastPage?: Maybe<number>;
  /** If there is another page */
  hasNextPage?: Maybe<boolean>;
}

/** A user */
export interface User {
  /** The id of the user */
  id: number;
  /** The name of the user */
  name: string;
  /** The bio written by user (Markdown) */
  about?: Maybe<string>;
  /** The user's avatar images */
  avatar?: Maybe<UserAvatar>;
  /** The user's banner images */
  bannerImage?: Maybe<string>;
  /** If the authenticated user if following this user */
  isFollowing?: Maybe<boolean>;
  /** If this user if following the authenticated user */
  isFollower?: Maybe<boolean>;
  /** If the user is blocked by the authenticated user */
  isBlocked?: Maybe<boolean>;

  bans?: Maybe<string>;
  /** The user's general options */
  options?: Maybe<UserOptions>;
  /** The user's media list options */
  mediaListOptions?: Maybe<MediaListOptions>;
  /** The users favourites */
  favourites?: Maybe<Favourites>;
  /** The users anime & manga list statistics */
  statistics?: Maybe<UserStatisticTypes>;
  /** The number of unread notifications the user has */
  unreadNotificationCount?: Maybe<number>;
  /** The url for the user page on the AniList website */
  siteUrl?: Maybe<string>;
  /** The donation tier of the user */
  donatorTier?: Maybe<number>;
  /** Custom donation badge text */
  donatorBadge?: Maybe<string>;
  /** If the user is a moderator or data moderator */
  moderatorStatus?: Maybe<string>;
  /** When the user's data was last updated */
  updatedAt?: Maybe<number>;
  /** The user's statistics */
  stats?: Maybe<UserStats>;
}

/** A user's avatars */
export interface UserAvatar {
  /** The avatar of user at its largest size */
  large?: Maybe<string>;
  /** The avatar of user at medium size */
  medium?: Maybe<string>;
}

/** A user's general options */
export interface UserOptions {
  /** The language the user wants to see media titles in */
  titleLanguage?: Maybe<UserTitleLanguage>;
  /** Whether the user has enabled viewing of 18+ content */
  displayAdultContent?: Maybe<boolean>;
  /** Whether the user receives notifications when a show they are watching aires */
  airingNotifications?: Maybe<boolean>;
  /** Profile highlight color (blue, purple, pink, orange, red, green, gray) */
  profileColor?: Maybe<string>;
  /** Notification options */
  notificationOptions?: Maybe<NotificationOption[]>;
}

/** Notification option */
export interface NotificationOption {
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** Whether this type of notification is enabled */
  enabled?: Maybe<boolean>;
}

/** A user's list options */
export interface MediaListOptions {
  /** The score format the user is using for media lists */
  scoreFormat?: Maybe<ScoreFormat>;
  /** The default order list rows should be displayed in */
  rowOrder?: Maybe<string>;
  /** (Site only) If the user should be using legacy css-supporting list versions */
  useLegacyLists?: Maybe<boolean>;
  /** The user's anime list options */
  animeList?: Maybe<MediaListTypeOptions>;
  /** The user's manga list options */
  mangaList?: Maybe<MediaListTypeOptions>;
  /** The list theme options for both lists */
  sharedTheme?: Maybe<string>;
  /** If the shared theme should be used instead of the individual list themes */
  sharedThemeEnabled?: Maybe<boolean>;
}

/** A user's list options for anime or manga lists */
export interface MediaListTypeOptions {
  /** The order each list should be displayed in */
  sectionOrder?: Maybe<string[]>;
  /** If the completed sections of the list should be separated by format */
  splitCompletedSectionByFormat?: Maybe<boolean>;
  /** The list theme options */
  theme?: Maybe<string>;
  /** The names of the user's custom lists */
  customLists?: Maybe<string[]>;
  /** The names of the user's advanced scoring sections */
  advancedScoring?: Maybe<string[]>;
  /** If advanced scoring is enabled */
  advancedScoringEnabled?: Maybe<boolean>;
}

/** User's favourite anime, manga, characters, staff & studios */
export interface Favourites {
  /** Favourite anime */
  anime?: Maybe<MediaConnection>;
  /** Favourite manga */
  manga?: Maybe<MediaConnection>;
  /** Favourite characters */
  characters?: Maybe<CharacterConnection>;
  /** Favourite staff */
  staff?: Maybe<StaffConnection>;
  /** Favourite studios */
  studios?: Maybe<StudioConnection>;
}

export interface MediaConnection {
  edges?: Maybe<MediaEdge[]>;

  nodes?: Maybe<Media[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** Media connection edge */
export interface MediaEdge {
  node?: Maybe<Media>;
  /** The id of the connection */
  id?: Maybe<number>;
  /** The type of relation to the parent model */
  relationType?: Maybe<MediaRelation>;
  /** If the studio is the main animation studio of the media (For Studio->MediaConnection field only) */
  isMainStudio: boolean;
  /** The characters in the media voiced by the parent actor */
  characters?: Maybe<Character[]>;
  /** The characters role in the media */
  characterRole?: Maybe<CharacterRole>;
  /** The role of the staff member in the production of the media */
  staffRole?: Maybe<string>;
  /** The voice actors of the character */
  voiceActors?: Maybe<Staff[]>;
  /** The order the media should be displayed from the users favourites */
  favouriteOrder?: Maybe<number>;
}

/** Anime or Manga */
export interface Media {
  /** The id of the media */
  id: number;
  /** The mal id of the media */
  idMal?: Maybe<number>;
  /** The official titles of the media in various languages */
  title?: Maybe<MediaTitle>;
  /** The type of the media; anime or manga */
  type?: Maybe<MediaType>;
  /** The format the media was released in */
  format?: Maybe<MediaFormat>;
  /** The current releasing status of the media */
  status?: Maybe<MediaStatus>;
  /** Short description of the media's story and characters */
  description?: Maybe<string>;
  /** The first official release date of the media */
  startDate?: Maybe<FuzzyDate>;
  /** The last official release date of the media */
  endDate?: Maybe<FuzzyDate>;
  /** The season the media was initially released in */
  season?: Maybe<MediaSeason>;
  /** The season year the media was initially released in */
  seasonYear?: Maybe<number>;
  /** The year & season the media was initially released in */
  seasonInt?: Maybe<number>;
  /** The amount of episodes the anime has when complete */
  episodes?: Maybe<number>;
  /** The general length of each anime episode in minutes */
  duration?: Maybe<number>;
  /** The amount of chapters the manga has when complete */
  chapters?: Maybe<number>;
  /** The amount of volumes the manga has when complete */
  volumes?: Maybe<number>;
  /** Where the media was created. (ISO 3166-1 alpha-2) */
  countryOfOrigin?: Maybe<undefined>;
  /** If the media is officially licensed or a self-published doujin release */
  isLicensed?: Maybe<boolean>;
  /** Source type the media was adapted from. */
  source?: Maybe<MediaSource>;
  /** Official Twitter hashtags for the media */
  hashtag?: Maybe<string>;
  /** Media trailer or advertisement */
  trailer?: Maybe<MediaTrailer>;
  /** When the media's data was last updated */
  updatedAt?: Maybe<number>;
  /** The cover images of the media */
  coverImage?: Maybe<MediaCoverImage>;
  /** The banner image of the media */
  bannerImage?: Maybe<string>;
  /** The genres of the media */
  genres?: Maybe<string[]>;
  /** Alternative titles of the media */
  synonyms?: Maybe<string[]>;
  /** A weighted average score of all the user's scores of the media */
  averageScore?: Maybe<number>;
  /** Mean score of all the user's scores of the media */
  meanScore?: Maybe<number>;
  /** The number of users with the media on their list */
  popularity?: Maybe<number>;
  /** Locked media may not be added to lists our favorited. This may be due to the entry pending for deletion or other reasons. */
  isLocked?: Maybe<boolean>;
  /** The amount of related activity in the past hour */
  trending?: Maybe<number>;
  /** The amount of user's who have favourited the media */
  favourites?: Maybe<number>;
  /** List of tags that describes elements and themes of the media */
  tags?: Maybe<MediaTag[]>;
  /** Other media in the same or connecting franchise */
  relations?: Maybe<MediaConnection>;
  /** The characters in the media */
  characters?: Maybe<CharacterConnection>;
  /** The staff who produced the media */
  staff?: Maybe<StaffConnection>;
  /** The companies who produced the media */
  studios?: Maybe<StudioConnection>;
  /** If the media is marked as favourite by the current authenticated user */
  isFavourite: boolean;
  /** If the media is intended only for 18+ adult audiences */
  isAdult?: Maybe<boolean>;
  /** The media's next episode airing schedule */
  nextAiringEpisode?: Maybe<AiringSchedule>;
  /** The media's entire airing schedule */
  airingSchedule?: Maybe<AiringScheduleConnection>;
  /** The media's daily trend stats */
  trends?: Maybe<MediaTrendConnection>;
  /** External links to another site related to the media */
  externalLinks?: Maybe<MediaExternalLink[]>;
  /** Data and links to legal streaming episodes on external sites */
  streamingEpisodes?: Maybe<MediaStreamingEpisode[]>;
  /** The ranking of the media in a particular time span and format compared to other media */
  rankings?: Maybe<MediaRank[]>;
  /** The authenticated user's media list entry for the media */
  mediaListEntry?: Maybe<MediaList>;
  /** User reviews of the media */
  reviews?: Maybe<ReviewConnection>;
  /** User recommendations for similar media */
  recommendations?: Maybe<RecommendationConnection>;

  stats?: Maybe<MediaStats>;
  /** The url for the media page on the AniList website */
  siteUrl?: Maybe<string>;
  /** If the media should have forum thread automatically created for it on airing episode release */
  autoCreateForumThread?: Maybe<boolean>;
  /** If the media is blocked from being recommended to/from */
  isRecommendationBlocked?: Maybe<boolean>;
  /** Notes for site moderators */
  modNotes?: Maybe<string>;
}

/** The official titles of the media in various languages */
export interface MediaTitle {
  /** The romanization of the native language title */
  romaji?: Maybe<string>;
  /** The official english title */
  english?: Maybe<string>;
  /** Official title in it's native language */
  native?: Maybe<string>;
  /** The currently authenticated users preferred title language. Default romaji for non-authenticated */
  userPreferred?: Maybe<string>;
}

/** Date object that allows for incomplete date values (fuzzy) */
export interface FuzzyDate {
  /** Numeric Year (2017) */
  year?: Maybe<number>;
  /** Numeric Month (3) */
  month?: Maybe<number>;
  /** Numeric Day (24) */
  day?: Maybe<number>;
}

/** Media trailer or advertisement */
export interface MediaTrailer {
  /** The trailer video id */
  id?: Maybe<string>;
  /** The site the video is hosted by (Currently either youtube or dailymotion) */
  site?: Maybe<string>;
  /** The url for the thumbnail image of the video */
  thumbnail?: Maybe<string>;
}

export interface MediaCoverImage {
  /** The cover image url of the media at its largest size. If this size isn't available, large will be provided instead. */
  extraLarge?: Maybe<string>;
  /** The cover image url of the media at a large size */
  large?: Maybe<string>;
  /** The cover image url of the media at medium size */
  medium?: Maybe<string>;
  /** Average #hex color of cover image */
  color?: Maybe<string>;
}

/** A tag that describes a theme or element of the media */
export interface MediaTag {
  /** The id of the tag */
  id: number;
  /** The name of the tag */
  name: string;
  /** A general description of the tag */
  description?: Maybe<string>;
  /** The categories of tags this tag belongs to */
  category?: Maybe<string>;
  /** The relevance ranking of the tag out of the 100 for this media */
  rank?: Maybe<number>;
  /** If the tag could be a spoiler for any media */
  isGeneralSpoiler?: Maybe<boolean>;
  /** If the tag is a spoiler for this media */
  isMediaSpoiler?: Maybe<boolean>;
  /** If the tag is only for adult 18+ media */
  isAdult?: Maybe<boolean>;
}

export interface CharacterConnection {
  edges?: Maybe<CharacterEdge[]>;

  nodes?: Maybe<Character[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** Character connection edge */
export interface CharacterEdge {
  node?: Maybe<Character>;
  /** The id of the connection */
  id?: Maybe<number>;
  /** The characters role in the media */
  role?: Maybe<CharacterRole>;
  /** The voice actors of the character */
  voiceActors?: Maybe<Staff[]>;
  /** The media the character is in */
  media?: Maybe<Media[]>;
  /** The order the character should be displayed from the users favourites */
  favouriteOrder?: Maybe<number>;
}

/** A character that features in an anime or manga */
export interface Character {
  /** The id of the character */
  id: number;
  /** The names of the character */
  name?: Maybe<CharacterName>;
  /** Character images */
  image?: Maybe<CharacterImage>;
  /** A general description of the character */
  description?: Maybe<string>;
  /** If the character is marked as favourite by the currently authenticated user */
  isFavourite: boolean;
  /** The url for the character page on the AniList website */
  siteUrl?: Maybe<string>;
  /** Media that includes the character */
  media?: Maybe<MediaConnection>;

  updatedAt?: Maybe<number>;
  /** The amount of user's who have favourited the character */
  favourites?: Maybe<number>;
}

/** The names of the character */
export interface CharacterName {
  /** The character's given name */
  first?: Maybe<string>;
  /** The character's surname */
  last?: Maybe<string>;
  /** The character's full name */
  full?: Maybe<string>;
  /** The character's full name in their native language */
  native?: Maybe<string>;
  /** Other names the character might be referred to as */
  alternative?: Maybe<string[]>;
}

export interface CharacterImage {
  /** The character's image of media at its largest size */
  large?: Maybe<string>;
  /** The character's image of media at medium size */
  medium?: Maybe<string>;
}

/** Voice actors or production staff */
export interface Staff {
  /** The id of the staff member */
  id: number;
  /** The names of the staff member */
  name?: Maybe<StaffName>;
  /** The primary language of the staff member */
  language?: Maybe<StaffLanguage>;
  /** The staff images */
  image?: Maybe<StaffImage>;
  /** A general description of the staff member */
  description?: Maybe<string>;
  /** If the staff member is marked as favourite by the currently authenticated user */
  isFavourite: boolean;
  /** The url for the staff page on the AniList website */
  siteUrl?: Maybe<string>;
  /** Media where the staff member has a production role */
  staffMedia?: Maybe<MediaConnection>;
  /** Characters voiced by the actor */
  characters?: Maybe<CharacterConnection>;

  updatedAt?: Maybe<number>;
  /** Staff member that the submission is referencing */
  staff?: Maybe<Staff>;
  /** Submitter for the submission */
  submitter?: Maybe<User>;
  /** Status of the submission */
  submissionStatus?: Maybe<number>;
  /** Inner details of submission status */
  submissionNotes?: Maybe<string>;
  /** The amount of user's who have favourited the staff member */
  favourites?: Maybe<number>;
}

/** The names of the staff member */
export interface StaffName {
  /** The person's given name */
  first?: Maybe<string>;
  /** The person's surname */
  last?: Maybe<string>;
  /** The person's full name */
  full?: Maybe<string>;
  /** The person's full name in their native language */
  native?: Maybe<string>;
  /** Other names the staff member might be referred to as (pen names) */
  alternative?: Maybe<string[]>;
}

export interface StaffImage {
  /** The person's image of media at its largest size */
  large?: Maybe<string>;
  /** The person's image of media at medium size */
  medium?: Maybe<string>;
}

export interface StaffConnection {
  edges?: Maybe<StaffEdge[]>;

  nodes?: Maybe<Staff[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** Staff connection edge */
export interface StaffEdge {
  node?: Maybe<Staff>;
  /** The id of the connection */
  id?: Maybe<number>;
  /** The role of the staff member in the production of the media */
  role?: Maybe<string>;
  /** The order the staff should be displayed from the users favourites */
  favouriteOrder?: Maybe<number>;
}

export interface StudioConnection {
  edges?: Maybe<StudioEdge[]>;

  nodes?: Maybe<Studio[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** Studio connection edge */
export interface StudioEdge {
  node?: Maybe<Studio>;
  /** The id of the connection */
  id?: Maybe<number>;
  /** If the studio is the main animation studio of the anime */
  isMain: boolean;
  /** The order the character should be displayed from the users favourites */
  favouriteOrder?: Maybe<number>;
}

/** Animation or production company */
export interface Studio {
  /** The id of the studio */
  id: number;
  /** The name of the studio */
  name: string;
  /** If the studio is an animation studio or a different kind of company */
  isAnimationStudio: boolean;
  /** The media the studio has worked on */
  media?: Maybe<MediaConnection>;
  /** The url for the studio page on the AniList website */
  siteUrl?: Maybe<string>;
  /** If the studio is marked as favourite by the currently authenticated user */
  isFavourite: boolean;
  /** The amount of user's who have favourited the studio */
  favourites?: Maybe<number>;
}

/** Media Airing Schedule */
export interface AiringSchedule {
  /** The id of the airing schedule item */
  id: number;
  /** The time the episode airs at */
  airingAt: number;
  /** Seconds until episode starts airing */
  timeUntilAiring: number;
  /** The airing episode number */
  episode: number;
  /** The associate media id of the airing episode */
  mediaId: number;
  /** The associate media of the airing episode */
  media?: Maybe<Media>;
}

export interface AiringScheduleConnection {
  edges?: Maybe<AiringScheduleEdge[]>;

  nodes?: Maybe<AiringSchedule[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** AiringSchedule connection edge */
export interface AiringScheduleEdge {
  node?: Maybe<AiringSchedule>;
  /** The id of the connection */
  id?: Maybe<number>;
}

export interface MediaTrendConnection {
  edges?: Maybe<MediaTrendEdge[]>;

  nodes?: Maybe<MediaTrend[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** Media trend connection edge */
export interface MediaTrendEdge {
  node?: Maybe<MediaTrend>;
}

/** Daily media statistics */
export interface MediaTrend {
  /** The id of the tag */
  mediaId: number;
  /** The day the data was recorded (timestamp) */
  date: number;
  /** The amount of media activity on the day */
  trending: number;
  /** A weighted average score of all the user's scores of the media */
  averageScore?: Maybe<number>;
  /** The number of users with the media on their list */
  popularity?: Maybe<number>;
  /** The number of users with watching/reading the media */
  inProgress?: Maybe<number>;
  /** If the media was being released at this time */
  releasing: boolean;
  /** The episode number of the anime released on this day */
  episode?: Maybe<number>;
  /** The related media */
  media?: Maybe<Media>;
}

/** An external link to another site related to the media */
export interface MediaExternalLink {
  /** The id of the external link */
  id: number;
  /** The url of the external link */
  url: string;
  /** The site location of the external link */
  site: string;
}

/** Data and links to legal streaming episodes on external sites */
export interface MediaStreamingEpisode {
  /** Title of the episode */
  title?: Maybe<string>;
  /** Url of episode image thumbnail */
  thumbnail?: Maybe<string>;
  /** The url of the episode */
  url?: Maybe<string>;
  /** The site location of the streaming episodes */
  site?: Maybe<string>;
}

/** The ranking of a media in a particular time span and format compared to other media */
export interface MediaRank {
  /** The id of the rank */
  id: number;
  /** The numerical rank of the media */
  rank: number;
  /** The type of ranking */
  type: MediaRankType;
  /** The format the media is ranked within */
  format: MediaFormat;
  /** The year the media is ranked within */
  year?: Maybe<number>;
  /** The season the media is ranked within */
  season?: Maybe<MediaSeason>;
  /** If the ranking is based on all time instead of a season/year */
  allTime?: Maybe<boolean>;
  /** String that gives context to the ranking type and time span */
  context: string;
}

/** List of anime or manga */
export interface MediaList {
  /** The id of the list entry */
  id: number;
  /** The id of the user owner of the list entry */
  userId: number;
  /** The id of the media */
  mediaId: number;
  /** The watching/reading status */
  status?: Maybe<MediaListStatus>;
  /** The score of the entry */
  score?: Maybe<number>;
  /** The amount of episodes/chapters consumed by the user */
  progress?: Maybe<number>;
  /** The amount of volumes read by the user */
  progressVolumes?: Maybe<number>;
  /** The amount of times the user has rewatched/read the media */
  repeat?: Maybe<number>;
  /** Priority of planning */
  priority?: Maybe<number>;
  /** If the entry should only be visible to authenticated user */
  private?: Maybe<boolean>;
  /** Text notes */
  notes?: Maybe<string>;
  /** If the entry shown be hidden from non-custom lists */
  hiddenFromStatusLists?: Maybe<boolean>;
  /** Map of booleans for which custom lists the entry are in */
  customLists?: Maybe<string>;
  /** Map of advanced scores with name keys */
  advancedScores?: Maybe<string>;
  /** When the entry was started by the user */
  startedAt?: Maybe<FuzzyDate>;
  /** When the entry was completed by the user */
  completedAt?: Maybe<FuzzyDate>;
  /** When the entry data was last updated */
  updatedAt?: Maybe<number>;
  /** When the entry data was created */
  createdAt?: Maybe<number>;

  media?: Maybe<Media>;

  user?: Maybe<User>;
}

export interface ReviewConnection {
  edges?: Maybe<ReviewEdge[]>;

  nodes?: Maybe<Review[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** Review connection edge */
export interface ReviewEdge {
  node?: Maybe<Review>;
}

/** A Review that features in an anime or manga */
export interface Review {
  /** The id of the review */
  id: number;
  /** The id of the review's creator */
  userId: number;
  /** The id of the review's media */
  mediaId: number;
  /** For which type of media the review is for */
  mediaType?: Maybe<MediaType>;
  /** A short summary of the review */
  summary?: Maybe<string>;
  /** The main review body text */
  body?: Maybe<string>;
  /** The total user rating of the review */
  rating?: Maybe<number>;
  /** The amount of user ratings of the review */
  ratingAmount?: Maybe<number>;
  /** The rating of the review by currently authenticated user */
  userRating?: Maybe<ReviewRating>;
  /** The review score of the media */
  score?: Maybe<number>;
  /** If the review is not yet publicly published and is only viewable by creator */
  private?: Maybe<boolean>;
  /** The url for the review page on the AniList website */
  siteUrl?: Maybe<string>;
  /** The time of the thread creation */
  createdAt: number;
  /** The time of the thread last update */
  updatedAt: number;
  /** The creator of the review */
  user?: Maybe<User>;
  /** The media the review is of */
  media?: Maybe<Media>;
}

export interface RecommendationConnection {
  edges?: Maybe<RecommendationEdge[]>;

  nodes?: Maybe<Recommendation[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** Recommendation connection edge */
export interface RecommendationEdge {
  node?: Maybe<Recommendation>;
}

/** Media recommendation */
export interface Recommendation {
  /** The id of the recommendation */
  id: number;
  /** Users rating of the recommendation */
  rating?: Maybe<number>;
  /** The rating of the recommendation by currently authenticated user */
  userRating?: Maybe<RecommendationRating>;
  /** The media the recommendation is from */
  media?: Maybe<Media>;
  /** The recommended media */
  mediaRecommendation?: Maybe<Media>;
  /** The user that first created the recommendation */
  user?: Maybe<User>;
}

/** A media's statistics */
export interface MediaStats {
  scoreDistribution?: Maybe<ScoreDistribution[]>;

  statusDistribution?: Maybe<StatusDistribution[]>;

  airingProgression?: Maybe<AiringProgression[]>;
}

/** A user's list score distribution. */
export interface ScoreDistribution {
  score?: Maybe<number>;
  /** The amount of list entries with this score */
  amount?: Maybe<number>;
}

/** The distribution of the watching/reading status of media or a user's list */
export interface StatusDistribution {
  /** The day the activity took place (Unix timestamp) */
  status?: Maybe<MediaListStatus>;
  /** The amount of entries with this status */
  amount?: Maybe<number>;
}

/** Score & Watcher stats for airing anime by episode and mid-week */
export interface AiringProgression {
  /** The episode the stats were recorded at. .5 is the mid point between 2 episodes airing dates. */
  episode?: Maybe<number>;
  /** The average score for the media */
  score?: Maybe<number>;
  /** The amount of users watching the anime */
  watching?: Maybe<number>;
}

export interface UserStatisticTypes {
  anime?: Maybe<UserStatistics>;

  manga?: Maybe<UserStatistics>;
}

export interface UserStatistics {
  count: number;

  meanScore: number;

  standardDeviation: number;

  minutesWatched: number;

  episodesWatched: number;

  chaptersRead: number;

  volumesRead: number;

  formats?: Maybe<UserFormatStatistic[]>;

  statuses?: Maybe<UserStatusStatistic[]>;

  scores?: Maybe<UserScoreStatistic[]>;

  lengths?: Maybe<UserLengthStatistic[]>;

  releaseYears?: Maybe<UserReleaseYearStatistic[]>;

  startYears?: Maybe<UserStartYearStatistic[]>;

  genres?: Maybe<UserGenreStatistic[]>;

  tags?: Maybe<UserTagStatistic[]>;

  countries?: Maybe<UserCountryStatistic[]>;

  voiceActors?: Maybe<UserVoiceActorStatistic[]>;

  staff?: Maybe<UserStaffStatistic[]>;

  studios?: Maybe<UserStudioStatistic[]>;
}

export interface UserFormatStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  format?: Maybe<MediaFormat>;
}

export interface UserStatusStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  status?: Maybe<MediaListStatus>;
}

export interface UserScoreStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  score?: Maybe<number>;
}

export interface UserLengthStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  length?: Maybe<string>;
}

export interface UserReleaseYearStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  releaseYear?: Maybe<number>;
}

export interface UserStartYearStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  startYear?: Maybe<number>;
}

export interface UserGenreStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  genre?: Maybe<string>;
}

export interface UserTagStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  tag?: Maybe<MediaTag>;
}

export interface UserCountryStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  country?: Maybe<undefined>;
}

export interface UserVoiceActorStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  voiceActor?: Maybe<Staff>;

  characterIds: number[];
}

export interface UserStaffStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  staff?: Maybe<Staff>;
}

export interface UserStudioStatistic {
  count: number;

  meanScore: number;

  minutesWatched: number;

  chaptersRead: number;

  mediaIds: number[];

  studio?: Maybe<Studio>;
}

/** A user's statistics */
export interface UserStats {
  /** The amount of anime the user has watched in minutes */
  watchedTime?: Maybe<number>;
  /** The amount of manga chapters the user has read */
  chaptersRead?: Maybe<number>;

  activityHistory?: Maybe<UserActivityHistory[]>;

  animeStatusDistribution?: Maybe<StatusDistribution[]>;

  mangaStatusDistribution?: Maybe<StatusDistribution[]>;

  animeScoreDistribution?: Maybe<ScoreDistribution[]>;

  mangaScoreDistribution?: Maybe<ScoreDistribution[]>;

  animeListScores?: Maybe<ListScoreStats>;

  mangaListScores?: Maybe<ListScoreStats>;

  favouredGenresOverview?: Maybe<GenreStats[]>;

  favouredGenres?: Maybe<GenreStats[]>;

  favouredTags?: Maybe<TagStats[]>;

  favouredActors?: Maybe<StaffStats[]>;

  favouredStaff?: Maybe<StaffStats[]>;

  favouredStudios?: Maybe<StudioStats[]>;

  favouredYears?: Maybe<YearStats[]>;

  favouredFormats?: Maybe<FormatStats[]>;
}

/** A user's activity history stats. */
export interface UserActivityHistory {
  /** The day the activity took place (Unix timestamp) */
  date?: Maybe<number>;
  /** The amount of activity on the day */
  amount?: Maybe<number>;
  /** The level of activity represented on a 1-10 scale */
  level?: Maybe<number>;
}

/** User's list score statistics */
export interface ListScoreStats {
  meanScore?: Maybe<number>;

  standardDeviation?: Maybe<number>;
}

/** User's genre statistics */
export interface GenreStats {
  genre?: Maybe<string>;

  amount?: Maybe<number>;

  meanScore?: Maybe<number>;
  /** The amount of time in minutes the genre has been watched by the user */
  timeWatched?: Maybe<number>;
}

/** User's tag statistics */
export interface TagStats {
  tag?: Maybe<MediaTag>;

  amount?: Maybe<number>;

  meanScore?: Maybe<number>;
  /** The amount of time in minutes the tag has been watched by the user */
  timeWatched?: Maybe<number>;
}

/** User's staff statistics */
export interface StaffStats {
  staff?: Maybe<Staff>;

  amount?: Maybe<number>;

  meanScore?: Maybe<number>;
  /** The amount of time in minutes the staff member has been watched by the user */
  timeWatched?: Maybe<number>;
}

/** User's studio statistics */
export interface StudioStats {
  studio?: Maybe<Studio>;

  amount?: Maybe<number>;

  meanScore?: Maybe<number>;
  /** The amount of time in minutes the studio's works have been watched by the user */
  timeWatched?: Maybe<number>;
}

/** User's year statistics */
export interface YearStats {
  year?: Maybe<number>;

  amount?: Maybe<number>;

  meanScore?: Maybe<number>;
}

/** User's format statistics */
export interface FormatStats {
  format?: Maybe<MediaFormat>;

  amount?: Maybe<number>;
}

/** Notification for when an episode of anime airs */
export interface AiringNotification {
  /** The id of the Notification */
  id: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the aired anime */
  animeId: number;
  /** The episode number that just aired */
  episode: number;
  /** The notification context text */
  contexts?: Maybe<string[]>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The associated media of the airing schedule */
  media?: Maybe<Media>;
}

/** Notification for when the authenticated user is followed by another user */
export interface FollowingNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who followed the authenticated user */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The liked activity */
  user?: Maybe<User>;
}

/** Notification for when a user is send an activity message */
export interface ActivityMessageNotification {
  /** The id of the Notification */
  id: number;
  /** The if of the user who send the message */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the activity message */
  activityId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The message activity */
  message?: Maybe<MessageActivity>;
  /** The user who sent the message */
  user?: Maybe<User>;
}

/** User message activity */
export interface MessageActivity {
  /** The id of the activity */
  id: number;
  /** The user id of the activity's recipient */
  recipientId?: Maybe<number>;
  /** The user id of the activity's sender */
  messengerId?: Maybe<number>;
  /** The type of the activity */
  type?: Maybe<ActivityType>;
  /** The number of activity replies */
  replyCount: number;
  /** The message text (Markdown) */
  message?: Maybe<string>;
  /** If the activity is locked and can receive replies */
  isLocked?: Maybe<boolean>;
  /** If the currently authenticated user is subscribed to the activity */
  isSubscribed?: Maybe<boolean>;
  /** The amount of likes the activity has */
  likeCount: number;
  /** If the currently authenticated user liked the activity */
  isLiked?: Maybe<boolean>;
  /** If the message is private and only viewable to the sender and recipients */
  isPrivate?: Maybe<boolean>;
  /** The url for the activity page on the AniList website */
  siteUrl?: Maybe<string>;
  /** The time the activity was created at */
  createdAt: number;
  /** The user who the activity message was sent to */
  recipient?: Maybe<User>;
  /** The user who sent the activity message */
  messenger?: Maybe<User>;
  /** The written replies to the activity */
  replies?: Maybe<ActivityReply[]>;
  /** The users who liked the activity */
  likes?: Maybe<User[]>;
}

/** Replay to an activity item */
export interface ActivityReply {
  /** The id of the reply */
  id: number;
  /** The id of the replies creator */
  userId?: Maybe<number>;
  /** The id of the parent activity */
  activityId?: Maybe<number>;
  /** The reply text */
  text?: Maybe<string>;
  /** The amount of likes the reply has */
  likeCount: number;
  /** If the currently authenticated user liked the reply */
  isLiked?: Maybe<boolean>;
  /** The time the reply was created at */
  createdAt: number;
  /** The user who created reply */
  user?: Maybe<User>;
  /** The users who liked the reply */
  likes?: Maybe<User[]>;
}

/** Notification for when authenticated user is @ mentioned in activity or reply */
export interface ActivityMentionNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who mentioned the authenticated user */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the activity where mentioned */
  activityId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The liked activity */
  activity?: Maybe<ActivityUnion>;
  /** The user who mentioned the authenticated user */
  user?: Maybe<User>;
}

/** User text activity */
export interface TextActivity {
  /** The id of the activity */
  id: number;
  /** The user id of the activity's creator */
  userId?: Maybe<number>;
  /** The type of activity */
  type?: Maybe<ActivityType>;
  /** The number of activity replies */
  replyCount: number;
  /** The status text (Markdown) */
  text?: Maybe<string>;
  /** The url for the activity page on the AniList website */
  siteUrl?: Maybe<string>;
  /** If the activity is locked and can receive replies */
  isLocked?: Maybe<boolean>;
  /** If the currently authenticated user is subscribed to the activity */
  isSubscribed?: Maybe<boolean>;
  /** The amount of likes the activity has */
  likeCount: number;
  /** If the currently authenticated user liked the activity */
  isLiked?: Maybe<boolean>;
  /** The time the activity was created at */
  createdAt: number;
  /** The user who created the activity */
  user?: Maybe<User>;
  /** The written replies to the activity */
  replies?: Maybe<ActivityReply[]>;
  /** The users who liked the activity */
  likes?: Maybe<User[]>;
}

/** User list activity (anime & manga updates) */
export interface ListActivity {
  /** The id of the activity */
  id: number;
  /** The user id of the activity's creator */
  userId?: Maybe<number>;
  /** The type of activity */
  type?: Maybe<ActivityType>;
  /** The number of activity replies */
  replyCount: number;
  /** The list item's textual status */
  status?: Maybe<string>;
  /** The list progress made */
  progress?: Maybe<string>;
  /** If the activity is locked and can receive replies */
  isLocked?: Maybe<boolean>;
  /** If the currently authenticated user is subscribed to the activity */
  isSubscribed?: Maybe<boolean>;
  /** The amount of likes the activity has */
  likeCount: number;
  /** If the currently authenticated user liked the activity */
  isLiked?: Maybe<boolean>;
  /** The url for the activity page on the AniList website */
  siteUrl?: Maybe<string>;
  /** The time the activity was created at */
  createdAt: number;
  /** The owner of the activity */
  user?: Maybe<User>;
  /** The associated media to the activity update */
  media?: Maybe<Media>;
  /** The written replies to the activity */
  replies?: Maybe<ActivityReply[]>;
  /** The users who liked the activity */
  likes?: Maybe<User[]>;
}

/** Notification for when a user replies to the authenticated users activity */
export interface ActivityReplyNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who replied to the activity */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the activity which was replied too */
  activityId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The liked activity */
  activity?: Maybe<ActivityUnion>;
  /** The user who replied to the activity */
  user?: Maybe<User>;
}

/** Notification for when a user replies to activity the authenticated user has replied to */
export interface ActivityReplySubscribedNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who replied to the activity */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the activity which was replied too */
  activityId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The liked activity */
  activity?: Maybe<ActivityUnion>;
  /** The user who replied to the activity */
  user?: Maybe<User>;
}

/** Notification for when a activity is liked */
export interface ActivityLikeNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who liked to the activity */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the activity which was liked */
  activityId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The liked activity */
  activity?: Maybe<ActivityUnion>;
  /** The user who liked the activity */
  user?: Maybe<User>;
}

/** Notification for when a activity reply is liked */
export interface ActivityReplyLikeNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who liked to the activity reply */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the activity where the reply which was liked */
  activityId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The liked activity */
  activity?: Maybe<ActivityUnion>;
  /** The user who liked the activity reply */
  user?: Maybe<User>;
}

/** Notification for when authenticated user is @ mentioned in a forum thread comment */
export interface ThreadCommentMentionNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who mentioned the authenticated user */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the comment where mentioned */
  commentId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to */
  thread?: Maybe<Thread>;
  /** The thread comment that included the @ mention */
  comment?: Maybe<ThreadComment>;
  /** The user who mentioned the authenticated user */
  user?: Maybe<User>;
}

/** Forum Thread */
export interface Thread {
  /** The id of the thread */
  id: number;
  /** The title of the thread */
  title?: Maybe<string>;
  /** The text body of the thread (Markdown) */
  body?: Maybe<string>;
  /** The id of the thread owner user */
  userId: number;
  /** The id of the user who most recently commented on the thread */
  replyUserId?: Maybe<number>;
  /** The id of the most recent comment on the thread */
  replyCommentId?: Maybe<number>;
  /** The number of comments on the thread */
  replyCount?: Maybe<number>;
  /** The number of times users have viewed the thread */
  viewCount?: Maybe<number>;
  /** If the thread is locked and can receive comments */
  isLocked?: Maybe<boolean>;
  /** If the thread is stickied and should be displayed at the top of the page */
  isSticky?: Maybe<boolean>;
  /** If the currently authenticated user is subscribed to the thread */
  isSubscribed?: Maybe<boolean>;
  /** The amount of likes the thread has */
  likeCount: number;
  /** If the currently authenticated user liked the thread */
  isLiked?: Maybe<boolean>;
  /** The time of the last reply */
  repliedAt?: Maybe<number>;
  /** The time of the thread creation */
  createdAt: number;
  /** The time of the thread last update */
  updatedAt: number;
  /** The owner of the thread */
  user?: Maybe<User>;
  /** The user to last reply to the thread */
  replyUser?: Maybe<User>;
  /** The users who liked the thread */
  likes?: Maybe<User[]>;
  /** The url for the thread page on the AniList website */
  siteUrl?: Maybe<string>;
  /** The categories of the thread */
  categories?: Maybe<ThreadCategory[]>;
  /** The media categories of the thread */
  mediaCategories?: Maybe<Media[]>;
}

/** A forum thread category */
export interface ThreadCategory {
  /** The id of the category */
  id: number;
  /** The name of the category */
  name: string;
}

/** Forum Thread Comment */
export interface ThreadComment {
  /** The id of the comment */
  id: number;
  /** The user id of the comment's owner */
  userId?: Maybe<number>;
  /** The id of thread the comment belongs to */
  threadId?: Maybe<number>;
  /** The text content of the comment (Markdown) */
  comment?: Maybe<string>;
  /** The amount of likes the comment has */
  likeCount: number;
  /** If the currently authenticated user liked the comment */
  isLiked?: Maybe<boolean>;
  /** The url for the comment page on the AniList website */
  siteUrl?: Maybe<string>;
  /** The time of the comments creation */
  createdAt: number;
  /** The time of the comments last update */
  updatedAt: number;
  /** The thread the comment belongs to */
  thread?: Maybe<Thread>;
  /** The user who created the comment */
  user?: Maybe<User>;
  /** The users who liked the comment */
  likes?: Maybe<User[]>;
  /** The comment's child reply comments */
  childComments?: Maybe<string>;
}

/** Notification for when a user replies to your forum thread comment */
export interface ThreadCommentReplyNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who create the comment reply */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the reply comment */
  commentId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to */
  thread?: Maybe<Thread>;
  /** The reply thread comment */
  comment?: Maybe<ThreadComment>;
  /** The user who replied to the activity */
  user?: Maybe<User>;
}

/** Notification for when a user replies to a subscribed forum thread */
export interface ThreadCommentSubscribedNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who commented on the thread */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the new comment in the subscribed thread */
  commentId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to */
  thread?: Maybe<Thread>;
  /** The reply thread comment */
  comment?: Maybe<ThreadComment>;
  /** The user who replied to the subscribed thread */
  user?: Maybe<User>;
}

/** Notification for when a thread comment is liked */
export interface ThreadCommentLikeNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who liked to the activity */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the activity which was liked */
  commentId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to */
  thread?: Maybe<Thread>;
  /** The thread comment that was liked */
  comment?: Maybe<ThreadComment>;
  /** The user who liked the activity */
  user?: Maybe<User>;
}

/** Notification for when a thread is liked */
export interface ThreadLikeNotification {
  /** The id of the Notification */
  id: number;
  /** The id of the user who liked to the activity */
  userId: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the thread which was liked */
  threadId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to */
  thread?: Maybe<Thread>;
  /** The liked thread comment */
  comment?: Maybe<ThreadComment>;
  /** The user who liked the activity */
  user?: Maybe<User>;
}

/** Notification for when new media is added to the site */
export interface RelatedMediaAdditionNotification {
  /** The id of the Notification */
  id: number;
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** The id of the new media */
  mediaId: number;
  /** The notification context text */
  context?: Maybe<string>;
  /** The time the notification was created at */
  createdAt?: Maybe<number>;
  /** The associated media of the airing schedule */
  media?: Maybe<Media>;
}

/** List of anime or manga */
export interface MediaListCollection {
  /** Grouped media list entries */
  lists?: Maybe<MediaListGroup[]>;
  /** The owner of the list */
  user?: Maybe<User>;
  /** If there is another chunk */
  hasNextChunk?: Maybe<boolean>;
  /** A map of media list entry arrays grouped by status */
  statusLists?: Maybe<MediaList[]>;
  /** A map of media list entry arrays grouped by custom lists */
  customLists?: Maybe<MediaList[]>;
}

/** List group of anime or manga entries */
export interface MediaListGroup {
  /** Media list entries */
  entries?: Maybe<MediaList[]>;

  name?: Maybe<string>;

  isCustomList?: Maybe<boolean>;

  isSplitCompletedList?: Maybe<boolean>;

  status?: Maybe<MediaListStatus>;
}

/** Provides the parsed markdown as html */
export interface ParsedMarkdown {
  /** The parsed markdown as html */
  html?: Maybe<string>;
}

export interface AniChartUser {
  user?: Maybe<User>;

  settings?: Maybe<string>;

  highlights?: Maybe<string>;
}

export interface SiteStatistics {
  users?: Maybe<SiteTrendConnection>;

  anime?: Maybe<SiteTrendConnection>;

  manga?: Maybe<SiteTrendConnection>;

  characters?: Maybe<SiteTrendConnection>;

  staff?: Maybe<SiteTrendConnection>;

  studios?: Maybe<SiteTrendConnection>;

  reviews?: Maybe<SiteTrendConnection>;
}

export interface SiteTrendConnection {
  edges?: Maybe<SiteTrendEdge[]>;

  nodes?: Maybe<SiteTrend[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** Site trend connection edge */
export interface SiteTrendEdge {
  node?: Maybe<SiteTrend>;
}

/** Daily site statistics */
export interface SiteTrend {
  /** The day the data was recorded (timestamp) */
  date: number;

  count: number;
  /** The change from yesterday */
  change: number;
}

export interface Mutation {
  UpdateUser?: Maybe<User>;
  /** Create or update a media list entry */
  SaveMediaListEntry?: Maybe<MediaList>;
  /** Update multiple media list entries to the same values */
  UpdateMediaListEntries?: Maybe<MediaList[]>;
  /** Delete a media list entry */
  DeleteMediaListEntry?: Maybe<Deleted>;
  /** Delete a custom list and remove the list entries from it */
  DeleteCustomList?: Maybe<Deleted>;
  /** Create or update text activity for the currently authenticated user */
  SaveTextActivity?: Maybe<TextActivity>;
  /** Create or update message activity for the currently authenticated user */
  SaveMessageActivity?: Maybe<MessageActivity>;
  /** Update list activity (Mod Only) */
  SaveListActivity?: Maybe<ListActivity>;
  /** Delete an activity item of the authenticated users */
  DeleteActivity?: Maybe<Deleted>;
  /** Toggle the subscription of an activity item */
  ToggleActivitySubscription?: Maybe<ActivityUnion>;
  /** Create or update an activity reply */
  SaveActivityReply?: Maybe<ActivityReply>;
  /** Delete an activity reply of the authenticated users */
  DeleteActivityReply?: Maybe<Deleted>;
  /** Add or remove a like from a likeable type.
                          Returns all the users who liked the same model */
  ToggleLike?: Maybe<User[]>;
  /** Add or remove a like from a likeable type. */
  ToggleLikeV2?: Maybe<LikeableUnion>;
  /** Toggle the un/following of a user */
  ToggleFollow?: Maybe<User>;
  /** Favourite or unfavourite an anime, manga, character, staff member, or studio */
  ToggleFavourite?: Maybe<Favourites>;
  /** Update the order favourites are displayed in */
  UpdateFavouriteOrder?: Maybe<Favourites>;
  /** Create or update a review */
  SaveReview?: Maybe<Review>;
  /** Delete a review */
  DeleteReview?: Maybe<Deleted>;
  /** Rate a review */
  RateReview?: Maybe<Review>;
  /** Recommendation a media */
  SaveRecommendation?: Maybe<Recommendation>;
  /** Create or update a forum thread */
  SaveThread?: Maybe<Thread>;
  /** Delete a thread */
  DeleteThread?: Maybe<Deleted>;
  /** Toggle the subscription of a forum thread */
  ToggleThreadSubscription?: Maybe<Thread>;
  /** Create or update a thread comment */
  SaveThreadComment?: Maybe<ThreadComment>;
  /** Delete a thread comment */
  DeleteThreadComment?: Maybe<Deleted>;

  UpdateAniChartSettings?: Maybe<string>;

  UpdateAniChartHighlights?: Maybe<string>;
}

/** Notification option input */
export interface NotificationOptionInput {
  /** The type of notification */
  type?: Maybe<NotificationType>;
  /** Whether this type of notification is enabled */
  enabled?: Maybe<boolean>;
}

/** A user's list options for anime or manga lists */
export interface MediaListOptionsInput {
  /** The order each list should be displayed in */
  sectionOrder?: Maybe<string[]>;
  /** If the completed sections of the list should be separated by format */
  splitCompletedSectionByFormat?: Maybe<boolean>;
  /** The names of the user's custom lists */
  customLists?: Maybe<string[]>;
  /** The names of the user's advanced scoring sections */
  advancedScoring?: Maybe<string[]>;
  /** If advanced scoring is enabled */
  advancedScoringEnabled?: Maybe<boolean>;
  /** list theme */
  theme?: Maybe<string>;
}

/** Date object that allows for incomplete date values (fuzzy) */
export interface FuzzyDateInput {
  /** Numeric Year (2017) */
  year?: Maybe<number>;
  /** Numeric Month (3) */
  month?: Maybe<number>;
  /** Numeric Day (24) */
  day?: Maybe<number>;
}

/** Deleted data type */
export interface Deleted {
  /** If an item has been successfully deleted */
  deleted?: Maybe<boolean>;
}

export interface AniChartHighlightInput {
  mediaId?: Maybe<number>;

  highlight?: Maybe<string>;
}

/** Page of data (Used for internal use only) */
export interface InternalPage {
  mediaSubmissions?: Maybe<MediaSubmission[]>;

  characterSubmissions?: Maybe<CharacterSubmission[]>;

  staffSubmissions?: Maybe<StaffSubmission[]>;

  revisionHistory?: Maybe<RevisionHistory[]>;

  reports?: Maybe<Report[]>;

  modActions?: Maybe<ModAction[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;

  users?: Maybe<User[]>;

  media?: Maybe<Media[]>;

  characters?: Maybe<Character[]>;

  staff?: Maybe<Staff[]>;

  studios?: Maybe<Studio[]>;

  mediaList?: Maybe<MediaList[]>;

  airingSchedules?: Maybe<AiringSchedule[]>;

  mediaTrends?: Maybe<MediaTrend[]>;

  notifications?: Maybe<NotificationUnion[]>;

  followers?: Maybe<User[]>;

  following?: Maybe<User[]>;

  activities?: Maybe<ActivityUnion[]>;

  activityReplies?: Maybe<ActivityReply[]>;

  threads?: Maybe<Thread[]>;

  threadComments?: Maybe<ThreadComment[]>;

  reviews?: Maybe<Review[]>;

  recommendations?: Maybe<Recommendation[]>;

  likes?: Maybe<User[]>;
}

/** Media submission */
export interface MediaSubmission {
  /** The id of the submission */
  id: number;
  /** User submitter of the submission */
  submitter?: Maybe<User>;
  /** Status of the submission */
  status?: Maybe<SubmissionStatus>;

  submitterStats?: Maybe<string>;

  notes?: Maybe<string>;

  source?: Maybe<string>;

  changes?: Maybe<string[]>;

  media?: Maybe<Media>;

  submission?: Maybe<Media>;

  characters?: Maybe<MediaSubmissionComparison[]>;

  staff?: Maybe<MediaSubmissionComparison[]>;

  studios?: Maybe<MediaSubmissionComparison[]>;

  relations?: Maybe<MediaEdge[]>;

  externalLinks?: Maybe<MediaExternalLink[]>;

  createdAt?: Maybe<number>;
}

/** Media submission with comparison to current data */
export interface MediaSubmissionComparison {
  submission?: Maybe<MediaSubmissionEdge>;

  character?: Maybe<MediaCharacter>;

  staff?: Maybe<StaffEdge>;

  studio?: Maybe<StudioEdge>;
}

export interface MediaSubmissionEdge {
  /** The id of the direct submission */
  id?: Maybe<number>;

  characterRole?: Maybe<CharacterRole>;

  staffRole?: Maybe<string>;

  isMain?: Maybe<boolean>;

  character?: Maybe<Character>;

  characterSubmission?: Maybe<Character>;

  voiceActor?: Maybe<Staff>;

  voiceActorSubmission?: Maybe<Staff>;

  staff?: Maybe<Staff>;

  staffSubmission?: Maybe<Staff>;

  studio?: Maybe<Studio>;

  media?: Maybe<Media>;
}

/** Internal - Media characters separated */
export interface MediaCharacter {
  /** The id of the connection */
  id?: Maybe<number>;
  /** The characters role in the media */
  role?: Maybe<CharacterRole>;
  /** The characters in the media voiced by the parent actor */
  character?: Maybe<Character>;
  /** The voice actor of the character */
  voiceActor?: Maybe<Staff>;
}

/** A submission for a character that features in an anime or manga */
export interface CharacterSubmission {
  /** The id of the submission */
  id: number;
  /** Character that the submission is referencing */
  character?: Maybe<Character>;
  /** The character submission changes */
  submission?: Maybe<Character>;
  /** Submitter for the submission */
  submitter?: Maybe<User>;
  /** Status of the submission */
  status?: Maybe<SubmissionStatus>;
  /** Inner details of submission status */
  notes?: Maybe<string>;

  createdAt?: Maybe<number>;
}

/** A submission for a staff that features in an anime or manga */
export interface StaffSubmission {
  /** The id of the submission */
  id: number;
  /** Staff that the submission is referencing */
  staff?: Maybe<Staff>;
  /** The staff submission changes */
  submission?: Maybe<Staff>;
  /** Submitter for the submission */
  submitter?: Maybe<User>;
  /** Status of the submission */
  status?: Maybe<SubmissionStatus>;
  /** Inner details of submission status */
  notes?: Maybe<string>;

  createdAt?: Maybe<number>;
}

/** Feed of mod edit activity */
export interface RevisionHistory {
  /** The id of the media */
  id: number;
  /** The action taken on the objects */
  action?: Maybe<RevisionHistoryAction>;
  /** A JSON object of the fields that changed */
  changes?: Maybe<string>;
  /** The user who made the edit to the object */
  user?: Maybe<User>;
  /** The media the mod feed entry references */
  media?: Maybe<Media>;
  /** The character the mod feed entry references */
  character?: Maybe<Character>;
  /** The staff member the mod feed entry references */
  staff?: Maybe<Staff>;
  /** The studio the mod feed entry references */
  studio?: Maybe<Studio>;
  /** When the mod feed entry was created */
  createdAt?: Maybe<number>;
}

export interface Report {
  id: number;

  reporter?: Maybe<User>;

  reported?: Maybe<User>;

  reason?: Maybe<string>;
  /** When the entry data was created */
  createdAt?: Maybe<number>;
}

export interface ModAction {
  /** The id of the action */
  id: number;

  user?: Maybe<User>;

  mod?: Maybe<User>;

  type?: Maybe<ModActionType>;

  objectId?: Maybe<number>;

  objectType?: Maybe<string>;

  data?: Maybe<string>;

  createdAt: number;
}

/** The official titles of the media in various languages */
export interface MediaTitleInput {
  /** The romanization of the native language title */
  romaji?: Maybe<string>;
  /** The official english title */
  english?: Maybe<string>;
  /** Official title in it's native language */
  native?: Maybe<string>;
}

/** An external link to another site related to the media */
export interface MediaExternalLinkInput {
  /** The id of the external link */
  id: number;
  /** The url of the external link */
  url: string;
  /** The site location of the external link */
  site: string;
}

export interface AiringScheduleInput {
  airingAt?: Maybe<number>;

  episode?: Maybe<number>;

  timeUntilAiring?: Maybe<number>;
}

/** The names of the character */
export interface CharacterNameInput {
  /** The character's given name */
  first?: Maybe<string>;
  /** The character's surname */
  last?: Maybe<string>;
  /** The character's full name in their native language */
  native?: Maybe<string>;
  /** Other names the character might be referred by */
  alternative?: Maybe<string[]>;
}

export interface CharacterSubmissionConnection {
  edges?: Maybe<CharacterSubmissionEdge[]>;

  nodes?: Maybe<CharacterSubmission[]>;
  /** The pagination information */
  pageInfo?: Maybe<PageInfo>;
}

/** CharacterSubmission connection edge */
export interface CharacterSubmissionEdge {
  node?: Maybe<CharacterSubmission>;
  /** The characters role in the media */
  role?: Maybe<CharacterRole>;
  /** The voice actors of the character */
  voiceActors?: Maybe<Staff[]>;
  /** The submitted voice actors of the character */
  submittedVoiceActors?: Maybe<StaffSubmission[]>;
}

/** The names of the staff member */
export interface StaffNameInput {
  /** The person's given name */
  first?: Maybe<string>;
  /** The person's surname */
  last?: Maybe<string>;
  /** The person's full name in their native language */
  native?: Maybe<string>;
  /** Other names the character might be referred by */
  alternative?: Maybe<string[]>;
}

/** User data for moderators */
export interface UserModData {
  alts?: Maybe<User[]>;

  bans?: Maybe<string>;

  ip?: Maybe<string>;

  counts?: Maybe<string>;
}

/** User sort enums */ export enum UserSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Username = 'USERNAME',
  Username_desc = 'USERNAME_DESC',
  Watched_time = 'WATCHED_TIME',
  Watched_time_desc = 'WATCHED_TIME_DESC',
  Chapters_read = 'CHAPTERS_READ',
  Chapters_read_desc = 'CHAPTERS_READ_DESC',
  Search_match = 'SEARCH_MATCH'
}

/** The language the user wants to see media titles in */ export enum UserTitleLanguage {
  Romaji = 'ROMAJI',
  English = 'ENGLISH',
  Native = 'NATIVE',
  Romaji_stylised = 'ROMAJI_STYLISED',
  English_stylised = 'ENGLISH_STYLISED',
  Native_stylised = 'NATIVE_STYLISED'
}

/** Notification type enum */ export enum NotificationType {
  Activity_message = 'ACTIVITY_MESSAGE',
  Activity_reply = 'ACTIVITY_REPLY',
  Following = 'FOLLOWING',
  Activity_mention = 'ACTIVITY_MENTION',
  Thread_comment_mention = 'THREAD_COMMENT_MENTION',
  Thread_subscribed = 'THREAD_SUBSCRIBED',
  Thread_comment_reply = 'THREAD_COMMENT_REPLY',
  Airing = 'AIRING',
  Activity_like = 'ACTIVITY_LIKE',
  Activity_reply_like = 'ACTIVITY_REPLY_LIKE',
  Thread_like = 'THREAD_LIKE',
  Thread_comment_like = 'THREAD_COMMENT_LIKE',
  Activity_reply_subscribed = 'ACTIVITY_REPLY_SUBSCRIBED',
  Related_media_addition = 'RELATED_MEDIA_ADDITION'
}

/** Media list scoring type */ export enum ScoreFormat {
  Point_100 = 'POINT_100',
  Point_10_decimal = 'POINT_10_DECIMAL',
  Point_10 = 'POINT_10',
  Point_5 = 'POINT_5',
  Point_3 = 'POINT_3'
}

/** Media type enum, anime or manga. */ export enum MediaType {
  Anime = 'ANIME',
  Manga = 'MANGA'
}

/** The format the media was released in */ export enum MediaFormat {
  Tv = 'TV',
  Tv_short = 'TV_SHORT',
  Movie = 'MOVIE',
  Special = 'SPECIAL',
  Ova = 'OVA',
  Ona = 'ONA',
  Music = 'MUSIC',
  Manga = 'MANGA',
  Novel = 'NOVEL',
  One_shot = 'ONE_SHOT'
}

/** The current releasing status of the media */ export enum MediaStatus {
  Finished = 'FINISHED',
  Releasing = 'RELEASING',
  Not_yet_released = 'NOT_YET_RELEASED',
  Cancelled = 'CANCELLED'
}

export enum MediaSeason {
  Winter = 'WINTER',
  Spring = 'SPRING',
  Summer = 'SUMMER',
  Fall = 'FALL'
}

/** Source type the media was adapted from */ export enum MediaSource {
  Original = 'ORIGINAL',
  Manga = 'MANGA',
  Light_novel = 'LIGHT_NOVEL',
  Visual_novel = 'VISUAL_NOVEL',
  Video_game = 'VIDEO_GAME',
  Other = 'OTHER',
  Novel = 'NOVEL',
  Doujinshi = 'DOUJINSHI',
  Anime = 'ANIME'
}

/** Character sort enums */ export enum CharacterSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Role = 'ROLE',
  Role_desc = 'ROLE_DESC',
  Search_match = 'SEARCH_MATCH',
  Favourites = 'FAVOURITES',
  Favourites_desc = 'FAVOURITES_DESC'
}

/** The role the character plays in the media */ export enum CharacterRole {
  Main = 'MAIN',
  Supporting = 'SUPPORTING',
  Background = 'BACKGROUND'
}

/** Media sort enums */ export enum MediaSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Title_romaji = 'TITLE_ROMAJI',
  Title_romaji_desc = 'TITLE_ROMAJI_DESC',
  Title_english = 'TITLE_ENGLISH',
  Title_english_desc = 'TITLE_ENGLISH_DESC',
  Title_native = 'TITLE_NATIVE',
  Title_native_desc = 'TITLE_NATIVE_DESC',
  Type = 'TYPE',
  Type_desc = 'TYPE_DESC',
  Format = 'FORMAT',
  Format_desc = 'FORMAT_DESC',
  Start_date = 'START_DATE',
  Start_date_desc = 'START_DATE_DESC',
  End_date = 'END_DATE',
  End_date_desc = 'END_DATE_DESC',
  Score = 'SCORE',
  Score_desc = 'SCORE_DESC',
  Popularity = 'POPULARITY',
  Popularity_desc = 'POPULARITY_DESC',
  Trending = 'TRENDING',
  Trending_desc = 'TRENDING_DESC',
  Episodes = 'EPISODES',
  Episodes_desc = 'EPISODES_DESC',
  Duration = 'DURATION',
  Duration_desc = 'DURATION_DESC',
  Status = 'STATUS',
  Status_desc = 'STATUS_DESC',
  Chapters = 'CHAPTERS',
  Chapters_desc = 'CHAPTERS_DESC',
  Volumes = 'VOLUMES',
  Volumes_desc = 'VOLUMES_DESC',
  Updated_at = 'UPDATED_AT',
  Updated_at_desc = 'UPDATED_AT_DESC',
  Search_match = 'SEARCH_MATCH',
  Favourites = 'FAVOURITES',
  Favourites_desc = 'FAVOURITES_DESC'
}

/** The primary language of the voice actor */ export enum StaffLanguage {
  Japanese = 'JAPANESE',
  English = 'ENGLISH',
  Korean = 'KOREAN',
  Italian = 'ITALIAN',
  Spanish = 'SPANISH',
  Portuguese = 'PORTUGUESE',
  French = 'FRENCH',
  German = 'GERMAN',
  Hebrew = 'HEBREW',
  Hungarian = 'HUNGARIAN'
}

/** Staff sort enums */ export enum StaffSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Role = 'ROLE',
  Role_desc = 'ROLE_DESC',
  Language = 'LANGUAGE',
  Language_desc = 'LANGUAGE_DESC',
  Search_match = 'SEARCH_MATCH',
  Favourites = 'FAVOURITES',
  Favourites_desc = 'FAVOURITES_DESC'
}

/** Studio sort enums */ export enum StudioSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Name = 'NAME',
  Name_desc = 'NAME_DESC',
  Search_match = 'SEARCH_MATCH',
  Favourites = 'FAVOURITES',
  Favourites_desc = 'FAVOURITES_DESC'
}

/** Media trend sort enums */ export enum MediaTrendSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Media_id = 'MEDIA_ID',
  Media_id_desc = 'MEDIA_ID_DESC',
  Date = 'DATE',
  Date_desc = 'DATE_DESC',
  Score = 'SCORE',
  Score_desc = 'SCORE_DESC',
  Popularity = 'POPULARITY',
  Popularity_desc = 'POPULARITY_DESC',
  Trending = 'TRENDING',
  Trending_desc = 'TRENDING_DESC',
  Episode = 'EPISODE',
  Episode_desc = 'EPISODE_DESC'
}

/** The type of ranking */ export enum MediaRankType {
  Rated = 'RATED',
  Popular = 'POPULAR'
}

/** Media list watching/reading status enum. */ export enum MediaListStatus {
  Current = 'CURRENT',
  Planning = 'PLANNING',
  Completed = 'COMPLETED',
  Dropped = 'DROPPED',
  Paused = 'PAUSED',
  Repeating = 'REPEATING'
}

/** Review sort enums */ export enum ReviewSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Score = 'SCORE',
  Score_desc = 'SCORE_DESC',
  Rating = 'RATING',
  Rating_desc = 'RATING_DESC',
  Created_at = 'CREATED_AT',
  Created_at_desc = 'CREATED_AT_DESC',
  Updated_at = 'UPDATED_AT',
  Updated_at_desc = 'UPDATED_AT_DESC'
}

/** Review rating enums */ export enum ReviewRating {
  No_vote = 'NO_VOTE',
  Up_vote = 'UP_VOTE',
  Down_vote = 'DOWN_VOTE'
}

/** Recommendation sort enums */ export enum RecommendationSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Rating = 'RATING',
  Rating_desc = 'RATING_DESC'
}

/** Recommendation rating enums */ export enum RecommendationRating {
  No_rating = 'NO_RATING',
  Rate_up = 'RATE_UP',
  Rate_down = 'RATE_DOWN'
}

/** Type of relation media has to its parent. */ export enum MediaRelation {
  Adaptation = 'ADAPTATION',
  Prequel = 'PREQUEL',
  Sequel = 'SEQUEL',
  Parent = 'PARENT',
  Side_story = 'SIDE_STORY',
  Character = 'CHARACTER',
  Summary = 'SUMMARY',
  Alternative = 'ALTERNATIVE',
  Spin_off = 'SPIN_OFF',
  Other = 'OTHER',
  Source = 'SOURCE',
  Compilation = 'COMPILATION',
  Contains = 'CONTAINS'
}

/** User statistics sort enum */ export enum UserStatisticsSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Count = 'COUNT',
  Count_desc = 'COUNT_DESC',
  Progress = 'PROGRESS',
  Progress_desc = 'PROGRESS_DESC',
  Mean_score = 'MEAN_SCORE',
  Mean_score_desc = 'MEAN_SCORE_DESC'
}

/** Media list sort enums */ export enum MediaListSort {
  Media_id = 'MEDIA_ID',
  Media_id_desc = 'MEDIA_ID_DESC',
  Score = 'SCORE',
  Score_desc = 'SCORE_DESC',
  Status = 'STATUS',
  Status_desc = 'STATUS_DESC',
  Progress = 'PROGRESS',
  Progress_desc = 'PROGRESS_DESC',
  Progress_volumes = 'PROGRESS_VOLUMES',
  Progress_volumes_desc = 'PROGRESS_VOLUMES_DESC',
  Repeat = 'REPEAT',
  Repeat_desc = 'REPEAT_DESC',
  Priority = 'PRIORITY',
  Priority_desc = 'PRIORITY_DESC',
  Started_on = 'STARTED_ON',
  Started_on_desc = 'STARTED_ON_DESC',
  Finished_on = 'FINISHED_ON',
  Finished_on_desc = 'FINISHED_ON_DESC',
  Added_time = 'ADDED_TIME',
  Added_time_desc = 'ADDED_TIME_DESC',
  Updated_time = 'UPDATED_TIME',
  Updated_time_desc = 'UPDATED_TIME_DESC',
  Media_title_romaji = 'MEDIA_TITLE_ROMAJI',
  Media_title_romaji_desc = 'MEDIA_TITLE_ROMAJI_DESC',
  Media_title_english = 'MEDIA_TITLE_ENGLISH',
  Media_title_english_desc = 'MEDIA_TITLE_ENGLISH_DESC',
  Media_title_native = 'MEDIA_TITLE_NATIVE',
  Media_title_native_desc = 'MEDIA_TITLE_NATIVE_DESC',
  Media_popularity = 'MEDIA_POPULARITY',
  Media_popularity_desc = 'MEDIA_POPULARITY_DESC'
}

/** Airing schedule sort enums */ export enum AiringSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Media_id = 'MEDIA_ID',
  Media_id_desc = 'MEDIA_ID_DESC',
  Time = 'TIME',
  Time_desc = 'TIME_DESC',
  Episode = 'EPISODE',
  Episode_desc = 'EPISODE_DESC'
}

/** Activity type enum. */ export enum ActivityType {
  Text = 'TEXT',
  Anime_list = 'ANIME_LIST',
  Manga_list = 'MANGA_LIST',
  Message = 'MESSAGE',
  Media_list = 'MEDIA_LIST'
}

/** Activity sort enums */ export enum ActivitySort {
  Id = 'ID',
  Id_desc = 'ID_DESC'
}

/** Thread sort enums */ export enum ThreadSort {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Title = 'TITLE',
  Title_desc = 'TITLE_DESC',
  Created_at = 'CREATED_AT',
  Created_at_desc = 'CREATED_AT_DESC',
  Updated_at = 'UPDATED_AT',
  Updated_at_desc = 'UPDATED_AT_DESC',
  Replied_at = 'REPLIED_AT',
  Replied_at_desc = 'REPLIED_AT_DESC',
  Reply_count = 'REPLY_COUNT',
  Reply_count_desc = 'REPLY_COUNT_DESC',
  View_count = 'VIEW_COUNT',
  View_count_desc = 'VIEW_COUNT_DESC',
  Is_sticky = 'IS_STICKY',
  Search_match = 'SEARCH_MATCH'
}

/** Thread comments sort enums */ export enum ThreadCommentSort {
  Id = 'ID',
  Id_desc = 'ID_DESC'
}

/** Types that can be liked */ export enum LikeableType {
  Thread = 'THREAD',
  Thread_comment = 'THREAD_COMMENT',
  Activity = 'ACTIVITY',
  Activity_reply = 'ACTIVITY_REPLY'
}

/** Site trend sort enums */ export enum SiteTrendSort {
  Date = 'DATE',
  Date_desc = 'DATE_DESC',
  Count = 'COUNT',
  Count_desc = 'COUNT_DESC',
  Change = 'CHANGE',
  Change_desc = 'CHANGE_DESC'
}

/** Submission status */ export enum SubmissionStatus {
  Pending = 'PENDING',
  Rejected = 'REJECTED',
  Partially_accepted = 'PARTIALLY_ACCEPTED',
  Accepted = 'ACCEPTED'
}

/** Revision history actions */ export enum RevisionHistoryAction {
  Create = 'CREATE',
  Edit = 'EDIT'
}

export enum ModActionType {
  Note = 'NOTE',
  Ban = 'BAN',
  Delete = 'DELETE',
  Edit = 'EDIT',
  Expire = 'EXPIRE',
  Report = 'REPORT',
  Reset = 'RESET',
  Anon = 'ANON'
}

export interface PageArgs {
  /** The page number */
  page?: Maybe<number>;
  /** The amount of entries per page, max 50 */
  perPage?: Maybe<number>;
}

/** Media query */
export interface MediaArgs {
  /** Filter by the media id */
  id?: Maybe<number>;
  /** Filter by the media's MyAnimeList id */
  idMal?: Maybe<number>;
  /** Filter by the start date of the media */
  startDate?: Maybe<undefined>;
  /** Filter by the end date of the media */
  endDate?: Maybe<undefined>;
  /** Filter by the season the media was released in */
  season?: Maybe<MediaSeason>;
  /** The year of the season (Winter 2017 would also include December 2016 releases). Requires season argument */
  seasonYear?: Maybe<number>;
  /** Filter by the media's type */
  type?: Maybe<MediaType>;
  /** Filter by the media's format */
  format?: Maybe<MediaFormat>;
  /** Filter by the media's current release status */
  status?: Maybe<MediaStatus>;
  /** Filter by amount of episodes the media has */
  episodes?: Maybe<number>;
  /** Filter by the media's episode length */
  duration?: Maybe<number>;
  /** Filter by the media's chapter count */
  chapters?: Maybe<number>;
  /** Filter by the media's volume count */
  volumes?: Maybe<number>;
  /** Filter by if the media's intended for 18+ adult audiences */
  isAdult?: Maybe<boolean>;
  /** Filter by the media's genres */
  genre?: Maybe<string>;
  /** Filter by the media's tags */
  tag?: Maybe<string>;
  /** Only apply the tags filter argument to tags above this rank. Default: 18 */
  minimumTagRank?: Maybe<number>;
  /** Filter by the media's tags with in a tag category */
  tagCategory?: Maybe<string>;
  /** Filter by the media on the authenticated user's lists */
  onList?: Maybe<boolean>;
  /** Filter media by sites with a online streaming or reading license */
  licensedBy?: Maybe<string>;
  /** Filter by the media's average score */
  averageScore?: Maybe<number>;
  /** Filter by the number of users with this media on their list */
  popularity?: Maybe<number>;
  /** Filter by the source type of the media */
  source?: Maybe<MediaSource>;
  /** Filter by the media's country of origin */
  countryOfOrigin?: Maybe<undefined>;
  /** Filter by search query */
  search?: Maybe<string>;
  /** Filter by the media id */
  id_not?: Maybe<number>;
  /** Filter by the media id */
  id_in?: Maybe<number[]>;
  /** Filter by the media id */
  id_not_in?: Maybe<number[]>;
  /** Filter by the media's MyAnimeList id */
  idMal_not?: Maybe<number>;
  /** Filter by the media's MyAnimeList id */
  idMal_in?: Maybe<number[]>;
  /** Filter by the media's MyAnimeList id */
  idMal_not_in?: Maybe<number[]>;
  /** Filter by the start date of the media */
  startDate_greater?: Maybe<undefined>;
  /** Filter by the start date of the media */
  startDate_lesser?: Maybe<undefined>;
  /** Filter by the start date of the media */
  startDate_like?: Maybe<string>;
  /** Filter by the end date of the media */
  endDate_greater?: Maybe<undefined>;
  /** Filter by the end date of the media */
  endDate_lesser?: Maybe<undefined>;
  /** Filter by the end date of the media */
  endDate_like?: Maybe<string>;
  /** Filter by the media's format */
  format_in?: Maybe<MediaFormat[]>;
  /** Filter by the media's format */
  format_not?: Maybe<MediaFormat>;
  /** Filter by the media's format */
  format_not_in?: Maybe<MediaFormat[]>;
  /** Filter by the media's current release status */
  status_in?: Maybe<MediaStatus[]>;
  /** Filter by the media's current release status */
  status_not?: Maybe<MediaStatus>;
  /** Filter by the media's current release status */
  status_not_in?: Maybe<MediaStatus[]>;
  /** Filter by amount of episodes the media has */
  episodes_greater?: Maybe<number>;
  /** Filter by amount of episodes the media has */
  episodes_lesser?: Maybe<number>;
  /** Filter by the media's episode length */
  duration_greater?: Maybe<number>;
  /** Filter by the media's episode length */
  duration_lesser?: Maybe<number>;
  /** Filter by the media's chapter count */
  chapters_greater?: Maybe<number>;
  /** Filter by the media's chapter count */
  chapters_lesser?: Maybe<number>;
  /** Filter by the media's volume count */
  volumes_greater?: Maybe<number>;
  /** Filter by the media's volume count */
  volumes_lesser?: Maybe<number>;
  /** Filter by the media's genres */
  genre_in?: Maybe<string[]>;
  /** Filter by the media's genres */
  genre_not_in?: Maybe<string[]>;
  /** Filter by the media's tags */
  tag_in?: Maybe<string[]>;
  /** Filter by the media's tags */
  tag_not_in?: Maybe<string[]>;
  /** Filter by the media's tags with in a tag category */
  tagCategory_in?: Maybe<string[]>;
  /** Filter by the media's tags with in a tag category */
  tagCategory_not_in?: Maybe<string[]>;
  /** Filter media by sites with a online streaming or reading license */
  licensedBy_in?: Maybe<string[]>;
  /** Filter by the media's average score */
  averageScore_not?: Maybe<number>;
  /** Filter by the media's average score */
  averageScore_greater?: Maybe<number>;
  /** Filter by the media's average score */
  averageScore_lesser?: Maybe<number>;
  /** Filter by the number of users with this media on their list */
  popularity_not?: Maybe<number>;
  /** Filter by the number of users with this media on their list */
  popularity_greater?: Maybe<number>;
  /** Filter by the number of users with this media on their list */
  popularity_lesser?: Maybe<number>;
  /** Filter by the source type of the media */
  source_in?: Maybe<MediaSource[]>;
  /** The order the results will be returned in */
  sort?: Maybe<MediaSort[]>;
}

/** Media Trend query */
export interface MediaTrendArgs {
  /** Filter by the media id */
  mediaId?: Maybe<number>;
  /** Filter by date */
  date?: Maybe<number>;
  /** Filter by trending amount */
  trending?: Maybe<number>;
  /** Filter by score */
  averageScore?: Maybe<number>;
  /** Filter by popularity */
  popularity?: Maybe<number>;
  /** Filter by episode number */
  episode?: Maybe<number>;
  /** Filter to stats recorded while the media was releasing */
  releasing?: Maybe<boolean>;
  /** Filter by the media id */
  mediaId_not?: Maybe<number>;
  /** Filter by the media id */
  mediaId_in?: Maybe<number[]>;
  /** Filter by the media id */
  mediaId_not_in?: Maybe<number[]>;
  /** Filter by date */
  date_greater?: Maybe<number>;
  /** Filter by date */
  date_lesser?: Maybe<number>;
  /** Filter by trending amount */
  trending_greater?: Maybe<number>;
  /** Filter by trending amount */
  trending_lesser?: Maybe<number>;
  /** Filter by trending amount */
  trending_not?: Maybe<number>;
  /** Filter by score */
  averageScore_greater?: Maybe<number>;
  /** Filter by score */
  averageScore_lesser?: Maybe<number>;
  /** Filter by score */
  averageScore_not?: Maybe<number>;
  /** Filter by popularity */
  popularity_greater?: Maybe<number>;
  /** Filter by popularity */
  popularity_lesser?: Maybe<number>;
  /** Filter by popularity */
  popularity_not?: Maybe<number>;
  /** Filter by episode number */
  episode_greater?: Maybe<number>;
  /** Filter by episode number */
  episode_lesser?: Maybe<number>;
  /** Filter by episode number */
  episode_not?: Maybe<number>;
  /** The order the results will be returned in */
  sort?: Maybe<MediaTrendSort[]>;
}

/** Airing schedule query */
export interface AiringScheduleArgs {
  /** Filter by the id of the airing schedule item */
  id?: Maybe<number>;
  /** Filter by the id of associated media */
  mediaId?: Maybe<number>;
  /** Filter by the airing episode number */
  episode?: Maybe<number>;
  /** Filter by the time of airing */
  airingAt?: Maybe<number>;
  /** Filter to episodes that haven't yet aired */
  notYetAired?: Maybe<boolean>;
  /** Filter by the id of the airing schedule item */
  id_not?: Maybe<number>;
  /** Filter by the id of the airing schedule item */
  id_in?: Maybe<number[]>;
  /** Filter by the id of the airing schedule item */
  id_not_in?: Maybe<number[]>;
  /** Filter by the id of associated media */
  mediaId_not?: Maybe<number>;
  /** Filter by the id of associated media */
  mediaId_in?: Maybe<number[]>;
  /** Filter by the id of associated media */
  mediaId_not_in?: Maybe<number[]>;
  /** Filter by the airing episode number */
  episode_not?: Maybe<number>;
  /** Filter by the airing episode number */
  episode_in?: Maybe<number[]>;
  /** Filter by the airing episode number */
  episode_not_in?: Maybe<number[]>;
  /** Filter by the airing episode number */
  episode_greater?: Maybe<number>;
  /** Filter by the airing episode number */
  episode_lesser?: Maybe<number>;
  /** Filter by the time of airing */
  airingAt_greater?: Maybe<number>;
  /** Filter by the time of airing */
  airingAt_lesser?: Maybe<number>;
  /** The order the results will be returned in */
  sort?: Maybe<AiringSort[]>;
}

/** Character query */
export interface CharacterArgs {
  /** Filter by character id */
  id?: Maybe<number>;
  /** Filter by search query */
  search?: Maybe<string>;
  /** Filter by character id */
  id_not?: Maybe<number>;
  /** Filter by character id */
  id_in?: Maybe<number[]>;
  /** Filter by character id */
  id_not_in?: Maybe<number[]>;
  /** The order the results will be returned in */
  sort?: Maybe<CharacterSort[]>;
}

/** Staff query */
export interface StaffArgs {
  /** Filter by the staff id */
  id?: Maybe<number>;
  /** Filter by search query */
  search?: Maybe<string>;
  /** Filter by the staff id */
  id_not?: Maybe<number>;
  /** Filter by the staff id */
  id_in?: Maybe<number[]>;
  /** Filter by the staff id */
  id_not_in?: Maybe<number[]>;
  /** The order the results will be returned in */
  sort?: Maybe<StaffSort[]>;
}

/** Media list query */
export interface MediaListArgs {
  /** Filter by a list entry's id */
  id?: Maybe<number>;
  /** Filter by a user's id */
  userId?: Maybe<number>;
  /** Filter by a user's name */
  userName?: Maybe<string>;
  /** Filter by the list entries media type */
  type?: Maybe<MediaType>;
  /** Filter by the watching/reading status */
  status?: Maybe<MediaListStatus>;
  /** Filter by the media id of the list entry */
  mediaId?: Maybe<number>;
  /** Filter list entries to users who are being followed by the authenticated user */
  isFollowing?: Maybe<boolean>;
  /** Filter by note words and #tags */
  notes?: Maybe<string>;
  /** Filter by the date the user started the media */
  startedAt?: Maybe<undefined>;
  /** Filter by the date the user completed the media */
  completedAt?: Maybe<undefined>;
  /** Limit to only entries also on the auth user's list. Requires user id or name arguments. */
  compareWithAuthList?: Maybe<boolean>;
  /** Filter by a user's id */
  userId_in?: Maybe<number[]>;
  /** Filter by the watching/reading status */
  status_in?: Maybe<MediaListStatus[]>;
  /** Filter by the watching/reading status */
  status_not_in?: Maybe<MediaListStatus[]>;
  /** Filter by the watching/reading status */
  status_not?: Maybe<MediaListStatus>;
  /** Filter by the media id of the list entry */
  mediaId_in?: Maybe<number[]>;
  /** Filter by the media id of the list entry */
  mediaId_not_in?: Maybe<number[]>;
  /** Filter by note words and #tags */
  notes_like?: Maybe<string>;
  /** Filter by the date the user started the media */
  startedAt_greater?: Maybe<undefined>;
  /** Filter by the date the user started the media */
  startedAt_lesser?: Maybe<undefined>;
  /** Filter by the date the user started the media */
  startedAt_like?: Maybe<string>;
  /** Filter by the date the user completed the media */
  completedAt_greater?: Maybe<undefined>;
  /** Filter by the date the user completed the media */
  completedAt_lesser?: Maybe<undefined>;
  /** Filter by the date the user completed the media */
  completedAt_like?: Maybe<string>;
  /** The order the results will be returned in */
  sort?: Maybe<MediaListSort[]>;
}

/** Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required. */
export interface MediaListCollectionArgs {
  /** Filter by a user's id */
  userId?: Maybe<number>;
  /** Filter by a user's name */
  userName?: Maybe<string>;
  /** Filter by the list entries media type */
  type?: Maybe<MediaType>;
  /** Filter by the watching/reading status */
  status?: Maybe<MediaListStatus>;
  /** Filter by note words and #tags */
  notes?: Maybe<string>;
  /** Filter by the date the user started the media */
  startedAt?: Maybe<undefined>;
  /** Filter by the date the user completed the media */
  completedAt?: Maybe<undefined>;
  /** Always return completed list entries in one group, overriding the user's split completed option. */
  forceSingleCompletedList?: Maybe<boolean>;
  /** Which chunk of list entries to load */
  chunk?: Maybe<number>;
  /** The amount of entries per chunk, max 500 */
  perChunk?: Maybe<number>;
  /** Filter by the watching/reading status */
  status_in?: Maybe<MediaListStatus[]>;
  /** Filter by the watching/reading status */
  status_not_in?: Maybe<MediaListStatus[]>;
  /** Filter by the watching/reading status */
  status_not?: Maybe<MediaListStatus>;
  /** Filter by note words and #tags */
  notes_like?: Maybe<string>;
  /** Filter by the date the user started the media */
  startedAt_greater?: Maybe<undefined>;
  /** Filter by the date the user started the media */
  startedAt_lesser?: Maybe<undefined>;
  /** Filter by the date the user started the media */
  startedAt_like?: Maybe<string>;
  /** Filter by the date the user completed the media */
  completedAt_greater?: Maybe<undefined>;
  /** Filter by the date the user completed the media */
  completedAt_lesser?: Maybe<undefined>;
  /** Filter by the date the user completed the media */
  completedAt_like?: Maybe<string>;
  /** The order the results will be returned in */
  sort?: Maybe<MediaListSort[]>;
}

/** Collection of all the possible media genres */
export interface GenreCollectionArgs {}

/** Collection of all the possible media tags */
export interface MediaTagCollectionArgs {
  /** Mod Only */
  status?: Maybe<number>;
}

/** User query */
export interface UserArgs {
  /** Filter by the user id */
  id?: Maybe<number>;
  /** Filter by the name of the user */
  name?: Maybe<string>;
  /** Filter by search query */
  search?: Maybe<string>;
  /** The order the results will be returned in */
  sort?: Maybe<UserSort[]>;
}

/** Get the currently authenticated user */
export interface ViewerArgs {}

/** Notification query */
export interface NotificationArgs {
  /** Filter by the type of notifications */
  type?: Maybe<NotificationType>;
  /** Reset the unread notification count to 0 on load */
  resetNotificationCount?: Maybe<boolean>;
  /** Filter by the type of notifications */
  type_in?: Maybe<NotificationType[]>;
}

/** Studio query */
export interface StudioArgs {
  /** Filter by the studio id */
  id?: Maybe<number>;
  /** Filter by search query */
  search?: Maybe<string>;
  /** Filter by the studio id */
  id_not?: Maybe<number>;
  /** Filter by the studio id */
  id_in?: Maybe<number[]>;
  /** Filter by the studio id */
  id_not_in?: Maybe<number[]>;
  /** The order the results will be returned in */
  sort?: Maybe<StudioSort[]>;
}

/** Review query */
export interface ReviewArgs {
  /** Filter by Review id */
  id?: Maybe<number>;
  /** Filter by media id */
  mediaId?: Maybe<number>;
  /** Filter by media id */
  userId?: Maybe<number>;
  /** Filter by media type */
  mediaType?: Maybe<MediaType>;
  /** The order the results will be returned in */
  sort?: Maybe<ReviewSort[]>;
}

/** Activity query */
export interface ActivityArgs {
  /** Filter by the activity id */
  id?: Maybe<number>;
  /** Filter by the owner user id */
  userId?: Maybe<number>;
  /** Filter by the id of the user who sent a message */
  messengerId?: Maybe<number>;
  /** Filter by the associated media id of the activity */
  mediaId?: Maybe<number>;
  /** Filter by the type of activity */
  type?: Maybe<ActivityType>;
  /** Filter activity to users who are being followed by the authenticated user */
  isFollowing?: Maybe<boolean>;
  /** Filter activity to only activity with replies */
  hasReplies?: Maybe<boolean>;
  /** Filter activity to only activity with replies or is of type text */
  hasRepliesOrTypeText?: Maybe<boolean>;
  /** Filter by the time the activity was created */
  createdAt?: Maybe<number>;
  /** Filter by the activity id */
  id_not?: Maybe<number>;
  /** Filter by the activity id */
  id_in?: Maybe<number[]>;
  /** Filter by the activity id */
  id_not_in?: Maybe<number[]>;
  /** Filter by the owner user id */
  userId_not?: Maybe<number>;
  /** Filter by the owner user id */
  userId_in?: Maybe<number[]>;
  /** Filter by the owner user id */
  userId_not_in?: Maybe<number[]>;
  /** Filter by the id of the user who sent a message */
  messengerId_not?: Maybe<number>;
  /** Filter by the id of the user who sent a message */
  messengerId_in?: Maybe<number[]>;
  /** Filter by the id of the user who sent a message */
  messengerId_not_in?: Maybe<number[]>;
  /** Filter by the associated media id of the activity */
  mediaId_not?: Maybe<number>;
  /** Filter by the associated media id of the activity */
  mediaId_in?: Maybe<number[]>;
  /** Filter by the associated media id of the activity */
  mediaId_not_in?: Maybe<number[]>;
  /** Filter by the type of activity */
  type_not?: Maybe<ActivityType>;
  /** Filter by the type of activity */
  type_in?: Maybe<ActivityType[]>;
  /** Filter by the type of activity */
  type_not_in?: Maybe<ActivityType[]>;
  /** Filter by the time the activity was created */
  createdAt_greater?: Maybe<number>;
  /** Filter by the time the activity was created */
  createdAt_lesser?: Maybe<number>;
  /** The order the results will be returned in */
  sort?: Maybe<ActivitySort[]>;
}

/** Activity reply query */
export interface ActivityReplyArgs {
  /** Filter by the reply id */
  id?: Maybe<number>;
  /** Filter by the parent id */
  activityId?: Maybe<number>;
}

/** Follow query */
export interface FollowingArgs {
  /** User id of the follower/followed */
  userId: number;
  /** The order the results will be returned in */
  sort?: Maybe<UserSort[]>;
}

/** Follow query */
export interface FollowerArgs {
  /** User id of the follower/followed */
  userId: number;
  /** The order the results will be returned in */
  sort?: Maybe<UserSort[]>;
}

/** Thread query */
export interface ThreadArgs {
  /** Filter by the thread id */
  id?: Maybe<number>;
  /** Filter by the user id of the thread's creator */
  userId?: Maybe<number>;
  /** Filter by the user id of the last user to comment on the thread */
  replyUserId?: Maybe<number>;
  /** Filter by if the currently authenticated user's subscribed threads */
  subscribed?: Maybe<boolean>;
  /** Filter by thread category id */
  categoryId?: Maybe<number>;
  /** Filter by thread media id category */
  mediaCategoryId?: Maybe<number>;
  /** Filter by search query */
  search?: Maybe<string>;
  /** Filter by the thread id */
  id_in?: Maybe<number[]>;
  /** The order the results will be returned in */
  sort?: Maybe<ThreadSort[]>;
}

/** Comment query */
export interface ThreadCommentArgs {
  /** Filter by the comment id */
  id?: Maybe<number>;
  /** Filter by the thread id */
  threadId?: Maybe<number>;
  /** Filter by the user id of the comment's creator */
  userId?: Maybe<number>;
  /** The order the results will be returned in */
  sort?: Maybe<ThreadCommentSort[]>;
}

/** Recommendation query */
export interface RecommendationArgs {
  /** Filter by recommendation id */
  id?: Maybe<number>;
  /** Filter by media id */
  mediaId?: Maybe<number>;
  /** Filter by media recommendation id */
  mediaRecommendationId?: Maybe<number>;
  /** Filter by user who created the recommendation */
  userId?: Maybe<number>;
  /** Filter by total rating of the recommendation */
  rating?: Maybe<number>;
  /** Filter by the media on the authenticated user's lists */
  onList?: Maybe<boolean>;
  /** Filter by total rating of the recommendation */
  rating_greater?: Maybe<number>;
  /** Filter by total rating of the recommendation */
  rating_lesser?: Maybe<number>;
  /** The order the results will be returned in */
  sort?: Maybe<RecommendationSort[]>;
}

/** Like query */
export interface LikeArgs {
  /** The id of the likeable type */
  likeableId?: Maybe<number>;
  /** The type of model the id applies to */
  type?: Maybe<LikeableType>;
}

/** Provide AniList markdown to be converted to html (Requires auth) */
export interface MarkdownArgs {
  /** The markdown to be parsed to html */
  markdown: string;
}

export interface AniChartUserArgs {}

/** Site statistics query */
export interface SiteStatisticsArgs {}

export interface UpdateUserArgs {
  /** User's about/bio text */
  about?: Maybe<string>;
  /** User's title language */
  titleLanguage?: Maybe<UserTitleLanguage>;
  /** If the user should see media marked as adult-only */
  displayAdultContent?: Maybe<boolean>;
  /** If the user should get notifications when a show they are watching aires */
  airingNotifications?: Maybe<boolean>;
  /** The user's list scoring system */
  scoreFormat?: Maybe<ScoreFormat>;
  /** The user's default list order */
  rowOrder?: Maybe<string>;
  /** Profile highlight color */
  profileColor?: Maybe<string>;
  /** Profile highlight color */
  donatorBadge?: Maybe<string>;
  /** Notification options */
  notificationOptions?: Maybe<NotificationOptionInput[]>;
  /** The user's anime list options */
  animeListOptions?: Maybe<MediaListOptionsInput>;
  /** The user's anime list options */
  mangaListOptions?: Maybe<MediaListOptionsInput>;
}

/** Create or update a media list entry */
export interface SaveMediaListEntryArgs {
  /** The list entry id, required for updating */
  id?: Maybe<number>;
  /** The id of the media the entry is of */
  mediaId?: Maybe<number>;
  /** The watching/reading status */
  status?: Maybe<MediaListStatus>;
  /** The score of the media in the user's chosen scoring method */
  score?: Maybe<number>;
  /** The score of the media in 100 point */
  scoreRaw?: Maybe<number>;
  /** The amount of episodes/chapters consumed by the user */
  progress?: Maybe<number>;
  /** The amount of volumes read by the user */
  progressVolumes?: Maybe<number>;
  /** The amount of times the user has rewatched/read the media */
  repeat?: Maybe<number>;
  /** Priority of planning */
  priority?: Maybe<number>;
  /** If the entry should only be visible to authenticated user */
  private?: Maybe<boolean>;
  /** Text notes */
  notes?: Maybe<string>;
  /** If the entry shown be hidden from non-custom lists */
  hiddenFromStatusLists?: Maybe<boolean>;
  /** Array of custom list names which should be enabled for this entry */
  customLists?: Maybe<string[]>;
  /** Array of advanced scores */
  advancedScores?: Maybe<number[]>;
  /** When the entry was started by the user */
  startedAt?: Maybe<FuzzyDateInput>;
  /** When the entry was completed by the user */
  completedAt?: Maybe<FuzzyDateInput>;
}

/** Update multiple media list entries to the same values */
export interface UpdateMediaListEntriesArgs {
  /** The watching/reading status */
  status?: Maybe<MediaListStatus>;
  /** The score of the media in the user's chosen scoring method */
  score?: Maybe<number>;
  /** The score of the media in 100 point */
  scoreRaw?: Maybe<number>;
  /** The amount of episodes/chapters consumed by the user */
  progress?: Maybe<number>;
  /** The amount of volumes read by the user */
  progressVolumes?: Maybe<number>;
  /** The amount of times the user has rewatched/read the media */
  repeat?: Maybe<number>;
  /** Priority of planning */
  priority?: Maybe<number>;
  /** If the entry should only be visible to authenticated user */
  private?: Maybe<boolean>;
  /** Text notes */
  notes?: Maybe<string>;
  /** If the entry shown be hidden from non-custom lists */
  hiddenFromStatusLists?: Maybe<boolean>;
  /** Array of advanced scores */
  advancedScores?: Maybe<number[]>;
  /** When the entry was started by the user */
  startedAt?: Maybe<FuzzyDateInput>;
  /** When the entry was completed by the user */
  completedAt?: Maybe<FuzzyDateInput>;
  /** The list entries ids to update */
  ids?: Maybe<number[]>;
}

/** Delete a media list entry */
export interface DeleteMediaListEntryArgs {
  /** The id of the media list entry to delete */
  id?: Maybe<number>;
}

/** Delete a custom list and remove the list entries from it */
export interface DeleteCustomListArgs {
  /** The name of the custom list to delete */
  customList?: Maybe<string>;
  /** The media list type of the custom list */
  type?: Maybe<MediaType>;
}

/** Create or update text activity for the currently authenticated user */
export interface SaveTextActivityArgs {
  /** The activity's id, required for updating */
  id?: Maybe<number>;
  /** The activity text */
  text?: Maybe<string>;
  /** If the activity should be locked. (Mod Only) */
  locked?: Maybe<boolean>;
}

/** Create or update message activity for the currently authenticated user */
export interface SaveMessageActivityArgs {
  /** The activity id, required for updating */
  id?: Maybe<number>;
  /** The activity message text */
  message?: Maybe<string>;
  /** The id of the user the message is being sent to */
  recipientId?: Maybe<number>;
  /** If the activity should be private */
  private?: Maybe<boolean>;
  /** If the activity should be locked. (Mod Only) */
  locked?: Maybe<boolean>;
  /** If the message should be sent from the Moderator account (Mod Only) */
  asMod?: Maybe<boolean>;
}

/** Update list activity (Mod Only) */
export interface SaveListActivityArgs {
  /** The activity's id, required for updating */
  id?: Maybe<number>;
  /** If the activity should be locked. (Mod Only) */
  locked?: Maybe<boolean>;
}

/** Delete an activity item of the authenticated users */
export interface DeleteActivityArgs {
  /** The id of the activity to delete */
  id?: Maybe<number>;
}

/** Toggle the subscription of an activity item */
export interface ToggleActivitySubscriptionArgs {
  /** The id of the activity to un/subscribe */
  activityId?: Maybe<number>;
  /** Whether to subscribe or unsubscribe from the activity */
  subscribe?: Maybe<boolean>;
}

/** Create or update an activity reply */
export interface SaveActivityReplyArgs {
  /** The activity reply id, required for updating */
  id?: Maybe<number>;
  /** The id of the parent activity being replied to */
  activityId?: Maybe<number>;
  /** The reply text */
  text?: Maybe<string>;
  /** If the reply should be sent from the Moderator account (Mod Only) */
  asMod?: Maybe<boolean>;
}

/** Delete an activity reply of the authenticated users */
export interface DeleteActivityReplyArgs {
  /** The id of the reply to delete */
  id?: Maybe<number>;
}

/** Add or remove a like from a likeable type.
                          Returns all the users who liked the same model */
export interface ToggleLikeArgs {
  /** The id of the likeable type */
  id?: Maybe<number>;
  /** The type of model to be un/liked */
  type?: Maybe<LikeableType>;
}

/** Add or remove a like from a likeable type. */
export interface ToggleLikeV2Args {
  /** The id of the likeable type */
  id?: Maybe<number>;
  /** The type of model to be un/liked */
  type?: Maybe<LikeableType>;
}

/** Toggle the un/following of a user */
export interface ToggleFollowArgs {
  /** The id of the user to un/follow */
  userId?: Maybe<number>;
}

/** Favourite or unfavourite an anime, manga, character, staff member, or studio */
export interface ToggleFavouriteArgs {
  /** The id of the anime to un/favourite */
  animeId?: Maybe<number>;
  /** The id of the manga to un/favourite */
  mangaId?: Maybe<number>;
  /** The id of the character to un/favourite */
  characterId?: Maybe<number>;
  /** The id of the staff to un/favourite */
  staffId?: Maybe<number>;
  /** The id of the studio to un/favourite */
  studioId?: Maybe<number>;
}

/** Update the order favourites are displayed in */
export interface UpdateFavouriteOrderArgs {
  /** The id of the anime to un/favourite */
  animeIds?: Maybe<number[]>;
  /** The id of the manga to un/favourite */
  mangaIds?: Maybe<number[]>;
  /** The id of the character to un/favourite */
  characterIds?: Maybe<number[]>;
  /** The id of the staff to un/favourite */
  staffIds?: Maybe<number[]>;
  /** The id of the studio to un/favourite */
  studioIds?: Maybe<number[]>;
  /** List of integers which the anime should be ordered by (Asc) */
  animeOrder?: Maybe<number[]>;
  /** List of integers which the manga should be ordered by (Asc) */
  mangaOrder?: Maybe<number[]>;
  /** List of integers which the character should be ordered by (Asc) */
  characterOrder?: Maybe<number[]>;
  /** List of integers which the staff should be ordered by (Asc) */
  staffOrder?: Maybe<number[]>;
  /** List of integers which the studio should be ordered by (Asc) */
  studioOrder?: Maybe<number[]>;
}

/** Create or update a review */
export interface SaveReviewArgs {
  /** The review id, required for updating */
  id?: Maybe<number>;
  /** The id of the media the review is of */
  mediaId?: Maybe<number>;
  /** The main review text. Min:2200 characters */
  body?: Maybe<string>;
  /** A short summary/preview of the review. Min:20, Max:120 characters */
  summary?: Maybe<string>;
  /** A short summary/preview of the review. Min:20, Max:120 characters */
  score?: Maybe<number>;
  /** If the review should only be visible to its creator */
  private?: Maybe<boolean>;
}

/** Delete a review */
export interface DeleteReviewArgs {
  /** The id of the review to delete */
  id?: Maybe<number>;
}

/** Rate a review */
export interface RateReviewArgs {
  /** The id of the review to rate */
  reviewId?: Maybe<number>;
  /** The rating to apply to the review */
  rating?: Maybe<ReviewRating>;
}

/** Recommendation a media */
export interface SaveRecommendationArgs {
  /** The id of the base media */
  mediaId?: Maybe<number>;
  /** The id of the media to recommend */
  mediaRecommendationId?: Maybe<number>;
  /** The rating to give the recommendation */
  rating?: Maybe<RecommendationRating>;
}

/** Create or update a forum thread */
export interface SaveThreadArgs {
  /** The thread id, required for updating */
  id?: Maybe<number>;
  /** The title of the thread */
  title?: Maybe<string>;
  /** The main text body of the thread */
  body?: Maybe<string>;
  /** Forum categories the thread should be within */
  categories?: Maybe<number[]>;
  /** Media related to the contents of the thread */
  mediaCategories?: Maybe<number[]>;
  /** If the thread should be stickied. (Mod Only) */
  sticky?: Maybe<boolean>;
  /** If the thread should be locked. (Mod Only) */
  locked?: Maybe<boolean>;
}

/** Delete a thread */
export interface DeleteThreadArgs {
  /** The id of the thread to delete */
  id?: Maybe<number>;
}

/** Toggle the subscription of a forum thread */
export interface ToggleThreadSubscriptionArgs {
  /** The id of the forum thread to un/subscribe */
  threadId?: Maybe<number>;
  /** Whether to subscribe or unsubscribe from the forum thread */
  subscribe?: Maybe<boolean>;
}

/** Create or update a thread comment */
export interface SaveThreadCommentArgs {
  /** The comment id, required for updating */
  id?: Maybe<number>;
  /** The id of thread the comment belongs to */
  threadId?: Maybe<number>;
  /** The id of thread comment to reply to */
  parentCommentId?: Maybe<number>;
  /** The comment markdown text */
  comment?: Maybe<string>;
}

/** Delete a thread comment */
export interface DeleteThreadCommentArgs {
  /** The id of the thread comment to delete */
  id?: Maybe<number>;
}

export interface UpdateAniChartSettingsArgs {
  titleLanguage?: Maybe<string>;

  outgoingLinkProvider?: Maybe<string>;

  theme?: Maybe<string>;

  sort?: Maybe<string>;
}

export interface UpdateAniChartHighlightsArgs {
  highlights?: Maybe<AniChartHighlightInput[]>;
}
"
`;

exports[`Test simple type generation from different sources Generates types correctly from graphqlZero 1`] = `
"/* eslint-disable */
/* tslint-disable */
// @ts-nocheck
// *******************************************************
// *******************************************************
//
// GENERATED FILE, DO NOT MODIFY
//
// Made by Victor Garcia Â®
//
// https://github.com/victorgarciaesgi
// *******************************************************
// *******************************************************
// ðŸ’™

export type Maybe<T> = T | null;

export interface Query {
  _?: Maybe<number>;

  albums?: Maybe<AlbumsPage>;

  album?: Maybe<Album>;

  comments?: Maybe<CommentsPage>;

  comment?: Maybe<Comment>;

  photos?: Maybe<PhotosPage>;

  photo?: Maybe<Photo>;

  posts?: Maybe<PostsPage>;

  post?: Maybe<Post>;

  todos?: Maybe<TodosPage>;

  todo?: Maybe<Todo>;

  users?: Maybe<UsersPage>;

  user?: Maybe<User>;
}

export interface PageQueryOptions {
  paginate?: Maybe<PaginateOptions>;

  slice?: Maybe<SliceOptions>;

  sort?: Maybe<SortOptions[]>;

  operators?: Maybe<OperatorOptions[]>;

  search?: Maybe<SearchOptions>;
}

export interface PaginateOptions {
  page?: Maybe<number>;

  limit?: Maybe<number>;
}

export interface SliceOptions {
  start?: Maybe<number>;

  end?: Maybe<number>;

  limit?: Maybe<number>;
}

export interface SortOptions {
  field?: Maybe<string>;

  order?: Maybe<SortOrderEnum>;
}

export interface OperatorOptions {
  kind?: Maybe<OperatorKindEnum>;

  field?: Maybe<string>;

  value?: Maybe<string>;
}

export interface SearchOptions {
  q?: Maybe<string>;
}

export interface AlbumsPage {
  data?: Maybe<Album[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Album {
  id?: Maybe<string>;

  title?: Maybe<string>;

  user?: Maybe<User>;

  photos?: Maybe<PhotosPage>;
}

export interface User {
  id?: Maybe<string>;

  name?: Maybe<string>;

  username?: Maybe<string>;

  email?: Maybe<string>;

  address?: Maybe<Address>;

  phone?: Maybe<string>;

  website?: Maybe<string>;

  company?: Maybe<Company>;

  posts?: Maybe<PostsPage>;

  albums?: Maybe<AlbumsPage>;

  todos?: Maybe<TodosPage>;
}

export interface Address {
  street?: Maybe<string>;

  suite?: Maybe<string>;

  city?: Maybe<string>;

  zipcode?: Maybe<string>;

  geo?: Maybe<Geo>;
}

export interface Geo {
  lat?: Maybe<number>;

  lng?: Maybe<number>;
}

export interface Company {
  name?: Maybe<string>;

  catchPhrase?: Maybe<string>;

  bs?: Maybe<string>;
}

export interface PostsPage {
  data?: Maybe<Post[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Post {
  id?: Maybe<string>;

  title?: Maybe<string>;

  body?: Maybe<string>;

  user?: Maybe<User>;

  comments?: Maybe<CommentsPage>;
}

export interface CommentsPage {
  data?: Maybe<Comment[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Comment {
  id?: Maybe<string>;

  name?: Maybe<string>;

  email?: Maybe<string>;

  body?: Maybe<string>;

  post?: Maybe<Post>;
}

export interface PaginationLinks {
  first?: Maybe<PageLimitPair>;

  prev?: Maybe<PageLimitPair>;

  next?: Maybe<PageLimitPair>;

  last?: Maybe<PageLimitPair>;
}

export interface PageLimitPair {
  page?: Maybe<number>;

  limit?: Maybe<number>;
}

export interface PageMetadata {
  totalCount?: Maybe<number>;
}

export interface TodosPage {
  data?: Maybe<Todo[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Todo {
  id?: Maybe<string>;

  title?: Maybe<string>;

  completed?: Maybe<boolean>;

  user?: Maybe<User>;
}

export interface PhotosPage {
  data?: Maybe<Photo[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Photo {
  id?: Maybe<string>;

  title?: Maybe<string>;

  url?: Maybe<string>;

  thumbnailUrl?: Maybe<string>;

  album?: Maybe<Album>;
}

export interface UsersPage {
  data?: Maybe<User[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Mutation {
  _?: Maybe<number>;

  createAlbum?: Maybe<Album>;

  updateAlbum?: Maybe<Album>;

  deleteAlbum?: Maybe<boolean>;

  createComment?: Maybe<Comment>;

  updateComment?: Maybe<Comment>;

  deleteComment?: Maybe<boolean>;

  createPhoto?: Maybe<Photo>;

  updatePhoto?: Maybe<Photo>;

  deletePhoto?: Maybe<boolean>;

  createPost?: Maybe<Post>;

  updatePost?: Maybe<Post>;

  deletePost?: Maybe<boolean>;

  createTodo?: Maybe<Todo>;

  updateTodo?: Maybe<Todo>;

  deleteTodo?: Maybe<boolean>;

  createUser?: Maybe<User>;

  updateUser?: Maybe<User>;

  deleteUser?: Maybe<boolean>;
}

export interface CreateAlbumInput {
  title: string;

  userId: string;
}

export interface UpdateAlbumInput {
  title?: Maybe<string>;

  userId?: Maybe<string>;
}

export interface CreateCommentInput {
  name: string;

  email: string;

  body: string;
}

export interface UpdateCommentInput {
  name?: Maybe<string>;

  email?: Maybe<string>;

  body?: Maybe<string>;
}

export interface CreatePhotoInput {
  title: string;

  url: string;

  thumbnailUrl: string;
}

export interface UpdatePhotoInput {
  title?: Maybe<string>;

  url?: Maybe<string>;

  thumbnailUrl?: Maybe<string>;
}

export interface CreatePostInput {
  title: string;

  body: string;
}

export interface UpdatePostInput {
  title?: Maybe<string>;

  body?: Maybe<string>;
}

export interface CreateTodoInput {
  title: string;

  completed: boolean;
}

export interface UpdateTodoInput {
  title?: Maybe<string>;

  completed?: Maybe<boolean>;
}

export interface CreateUserInput {
  name: string;

  username: string;

  email: string;

  address?: Maybe<AddressInput>;

  phone?: Maybe<string>;

  website?: Maybe<string>;

  company?: Maybe<CompanyInput>;
}

export interface AddressInput {
  street?: Maybe<string>;

  suite?: Maybe<string>;

  city?: Maybe<string>;

  zipcode?: Maybe<string>;

  geo?: Maybe<GeoInput>;
}

export interface GeoInput {
  lat?: Maybe<number>;

  lng?: Maybe<number>;
}

export interface CompanyInput {
  name?: Maybe<string>;

  catchPhrase?: Maybe<string>;

  bs?: Maybe<string>;
}

export interface UpdateUserInput {
  name?: Maybe<string>;

  username?: Maybe<string>;

  email?: Maybe<string>;

  address?: Maybe<AddressInput>;

  phone?: Maybe<string>;

  website?: Maybe<string>;

  company?: Maybe<CompanyInput>;
}

export enum SortOrderEnum {
  Asc = 'ASC',
  Desc = 'DESC'
}

export enum OperatorKindEnum {
  Gte = 'GTE',
  Lte = 'LTE',
  Ne = 'NE',
  Like = 'LIKE'
}

export enum CacheControlScope {
  Public = 'PUBLIC',
  Private = 'PRIVATE'
}

export interface albumsArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface albumArgs {
  id: string;
}

export interface commentsArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface commentArgs {
  id: string;
}

export interface photosArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface photoArgs {
  id: string;
}

export interface postsArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface postArgs {
  id: string;
}

export interface todosArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface todoArgs {
  id: string;
}

export interface usersArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface userArgs {
  id: string;
}

export interface createAlbumArgs {
  input: CreateAlbumInput;
}

export interface updateAlbumArgs {
  id: string;

  input: UpdateAlbumInput;
}

export interface deleteAlbumArgs {
  id: string;
}

export interface createCommentArgs {
  input: CreateCommentInput;
}

export interface updateCommentArgs {
  id: string;

  input: UpdateCommentInput;
}

export interface deleteCommentArgs {
  id: string;
}

export interface createPhotoArgs {
  input: CreatePhotoInput;
}

export interface updatePhotoArgs {
  id: string;

  input: UpdatePhotoInput;
}

export interface deletePhotoArgs {
  id: string;
}

export interface createPostArgs {
  input: CreatePostInput;
}

export interface updatePostArgs {
  id: string;

  input: UpdatePostInput;
}

export interface deletePostArgs {
  id: string;
}

export interface createTodoArgs {
  input: CreateTodoInput;
}

export interface updateTodoArgs {
  id: string;

  input: UpdateTodoInput;
}

export interface deleteTodoArgs {
  id: string;
}

export interface createUserArgs {
  input: CreateUserInput;
}

export interface updateUserArgs {
  id: string;

  input: UpdateUserInput;
}

export interface deleteUserArgs {
  id: string;
}
"
`;

exports[`Test simple type generation from different sources Generates types correctly from jsonplaceholder 1`] = `
"/* eslint-disable */
/* tslint-disable */
// @ts-nocheck
// *******************************************************
// *******************************************************
//
// GENERATED FILE, DO NOT MODIFY
//
// Made by Victor Garcia Â®
//
// https://github.com/victorgarciaesgi
// *******************************************************
// *******************************************************
// ðŸ’™

export type Maybe<T> = T | null;

export interface RootQueryType {
  post?: Maybe<Post>;

  posts?: Maybe<Post[]>;

  comment?: Maybe<Comment>;

  comments?: Maybe<Comment[]>;

  album?: Maybe<Album>;

  albums?: Maybe<Album[]>;

  photo?: Maybe<Photo>;

  photos?: Maybe<Photo[]>;

  todo?: Maybe<Todo>;

  todos?: Maybe<Todo[]>;

  user?: Maybe<User>;

  users?: Maybe<User[]>;
}

export interface Post {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  body?: Maybe<string>;
}

export interface User {
  id?: Maybe<number>;

  name?: Maybe<string>;

  username?: Maybe<string>;

  email?: Maybe<string>;

  phone?: Maybe<string>;

  website?: Maybe<string>;
}

export interface Comment {
  post?: Maybe<Post>;

  postId?: Maybe<number>;

  id?: Maybe<number>;

  name?: Maybe<string>;

  email?: Maybe<string>;

  body?: Maybe<string>;
}

export interface Album {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;
}

export interface Photo {
  album?: Maybe<Album>;

  albumId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  url?: Maybe<string>;

  thumbnailUrl?: Maybe<string>;
}

export interface Todo {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  completed?: Maybe<boolean>;
}

export interface postArgs {
  id?: Maybe<number>;
}

export interface postsArgs {
  userId?: Maybe<number>;
}

export interface commentArgs {
  id?: Maybe<number>;
}

export interface commentsArgs {
  postId?: Maybe<number>;
}

export interface albumArgs {
  id?: Maybe<number>;
}

export interface albumsArgs {
  userId?: Maybe<number>;
}

export interface photoArgs {
  id?: Maybe<number>;
}

export interface photosArgs {
  albumId?: Maybe<number>;
}

export interface todoArgs {
  id?: Maybe<number>;
}

export interface todosArgs {
  userId?: Maybe<number>;

  completed?: Maybe<boolean>;
}

export interface userArgs {
  id?: Maybe<number>;
}

export interface usersArgs {}
"
`;
