// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test Vue Hooks generation from different sources Generates types correctly from graphql Analyst 1`] = `
"/* eslint-disable */
/* tslint-disable */
// @ts-nocheck
// *******************************************************
// *******************************************************
//
// GENERATED FILE, DO NOT MODIFY
//
// Made by Victor Garcia Â®
//
// https://github.com/victorgarciaesgi
// *******************************************************
// *******************************************************
// ðŸ’™

export type Maybe<T> = T | null;

export interface IQueryModel {
  Page?: Maybe<IPageModel>;
  /** Media query*/
  Media?: Maybe<IMediaModel>;
  /** Media Trend query*/
  MediaTrend?: Maybe<IMediaTrendModel>;
  /** Airing schedule query*/
  AiringSchedule?: Maybe<IAiringScheduleModel>;
  /** Character query*/
  Character?: Maybe<ICharacterModel>;
  /** Staff query*/
  Staff?: Maybe<IStaffModel>;
  /** Media list query*/
  MediaList?: Maybe<IMediaListModel>;
  /** Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required.*/
  MediaListCollection?: Maybe<IMediaListCollectionModel>;
  /** Collection of all the possible media genres*/
  GenreCollection?: Maybe<string[]>;
  /** Collection of all the possible media tags*/
  MediaTagCollection?: Maybe<IMediaTagModel[]>;
  /** User query*/
  User?: Maybe<IUserModel>;
  /** Get the currently authenticated user*/
  Viewer?: Maybe<IUserModel>;
  /** Notification query*/
  Notification?: Maybe<INotificationUnionModel>;
  /** Studio query*/
  Studio?: Maybe<IStudioModel>;
  /** Review query*/
  Review?: Maybe<IReviewModel>;
  /** Activity query*/
  Activity?: Maybe<IActivityUnionModel>;
  /** Activity reply query*/
  ActivityReply?: Maybe<IActivityReplyModel>;
  /** Follow query*/
  Following?: Maybe<IUserModel>;
  /** Follow query*/
  Follower?: Maybe<IUserModel>;
  /** Thread query*/
  Thread?: Maybe<IThreadModel>;
  /** Comment query*/
  ThreadComment?: Maybe<IThreadCommentModel[]>;
  /** Recommendation query*/
  Recommendation?: Maybe<IRecommendationModel>;
  /** Like query*/
  Like?: Maybe<IUserModel>;
  /** Provide AniList markdown to be converted to html (Requires auth)*/
  Markdown?: Maybe<IParsedMarkdownModel>;
  AniChartUser?: Maybe<IAniChartUserModel>;
  /** Site statistics query*/
  SiteStatistics?: Maybe<ISiteStatisticsModel>;
}

/** Page of data */
export interface IPageModel {
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
  users?: Maybe<IUserModel[]>;
  media?: Maybe<IMediaModel[]>;
  characters?: Maybe<ICharacterModel[]>;
  staff?: Maybe<IStaffModel[]>;
  studios?: Maybe<IStudioModel[]>;
  mediaList?: Maybe<IMediaListModel[]>;
  airingSchedules?: Maybe<IAiringScheduleModel[]>;
  mediaTrends?: Maybe<IMediaTrendModel[]>;
  notifications?: Maybe<INotificationUnionModel[]>;
  followers?: Maybe<IUserModel[]>;
  following?: Maybe<IUserModel[]>;
  activities?: Maybe<IActivityUnionModel[]>;
  activityReplies?: Maybe<IActivityReplyModel[]>;
  threads?: Maybe<IThreadModel[]>;
  threadComments?: Maybe<IThreadCommentModel[]>;
  reviews?: Maybe<IReviewModel[]>;
  recommendations?: Maybe<IRecommendationModel[]>;
  likes?: Maybe<IUserModel[]>;
}

export interface IPageInfoModel {
  /** The total number of items*/
  total?: Maybe<number>;
  /** The count on a page*/
  perPage?: Maybe<number>;
  /** The current page*/
  currentPage?: Maybe<number>;
  /** The last page*/
  lastPage?: Maybe<number>;
  /** If there is another page*/
  hasNextPage?: Maybe<boolean>;
}

/** A user */
export interface IUserModel {
  /** The id of the user*/
  id: number;
  /** The name of the user*/
  name: string;
  /** The bio written by user (Markdown)*/
  about?: Maybe<string>;
  /** The user's avatar images*/
  avatar?: Maybe<IUserAvatarModel>;
  /** The user's banner images*/
  bannerImage?: Maybe<string>;
  /** If the authenticated user if following this user*/
  isFollowing?: Maybe<boolean>;
  /** If this user if following the authenticated user*/
  isFollower?: Maybe<boolean>;
  /** If the user is blocked by the authenticated user*/
  isBlocked?: Maybe<boolean>;
  bans?: Maybe<string>;
  /** The user's general options*/
  options?: Maybe<IUserOptionsModel>;
  /** The user's media list options*/
  mediaListOptions?: Maybe<IMediaListOptionsModel>;
  /** The users favourites*/
  favourites?: Maybe<IFavouritesModel>;
  /** The users anime & manga list statistics*/
  statistics?: Maybe<IUserStatisticTypesModel>;
  /** The number of unread notifications the user has*/
  unreadNotificationCount?: Maybe<number>;
  /** The url for the user page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** The donation tier of the user*/
  donatorTier?: Maybe<number>;
  /** Custom donation badge text*/
  donatorBadge?: Maybe<string>;
  /** If the user is a moderator or data moderator*/
  moderatorStatus?: Maybe<string>;
  /** When the user's data was last updated*/
  updatedAt?: Maybe<number>;
  /** The user's statistics*/
  stats?: Maybe<IUserStatsModel>;
}

/** A user's avatars */
export interface IUserAvatarModel {
  /** The avatar of user at its largest size*/
  large?: Maybe<string>;
  /** The avatar of user at medium size*/
  medium?: Maybe<string>;
}

/** A user's general options */
export interface IUserOptionsModel {
  /** The language the user wants to see media titles in*/
  titleLanguage?: Maybe<IUserTitleLanguageModel>;
  /** Whether the user has enabled viewing of 18+ content*/
  displayAdultContent?: Maybe<boolean>;
  /** Whether the user receives notifications when a show they are watching aires*/
  airingNotifications?: Maybe<boolean>;
  /** Profile highlight color (blue, purple, pink, orange, red, green, gray)*/
  profileColor?: Maybe<string>;
  /** Notification options*/
  notificationOptions?: Maybe<INotificationOptionModel[]>;
}

/** Notification option */
export interface INotificationOptionModel {
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** Whether this type of notification is enabled*/
  enabled?: Maybe<boolean>;
}

/** A user's list options */
export interface IMediaListOptionsModel {
  /** The score format the user is using for media lists*/
  scoreFormat?: Maybe<IScoreFormatModel>;
  /** The default order list rows should be displayed in*/
  rowOrder?: Maybe<string>;
  /** (Site only) If the user should be using legacy css-supporting list versions*/
  useLegacyLists?: Maybe<boolean>;
  /** The user's anime list options*/
  animeList?: Maybe<IMediaListTypeOptionsModel>;
  /** The user's manga list options*/
  mangaList?: Maybe<IMediaListTypeOptionsModel>;
  /** The list theme options for both lists*/
  sharedTheme?: Maybe<string>;
  /** If the shared theme should be used instead of the individual list themes*/
  sharedThemeEnabled?: Maybe<boolean>;
}

/** A user's list options for anime or manga lists */
export interface IMediaListTypeOptionsModel {
  /** The order each list should be displayed in*/
  sectionOrder?: Maybe<string[]>;
  /** If the completed sections of the list should be separated by format*/
  splitCompletedSectionByFormat?: Maybe<boolean>;
  /** The list theme options*/
  theme?: Maybe<string>;
  /** The names of the user's custom lists*/
  customLists?: Maybe<string[]>;
  /** The names of the user's advanced scoring sections*/
  advancedScoring?: Maybe<string[]>;
  /** If advanced scoring is enabled*/
  advancedScoringEnabled?: Maybe<boolean>;
}

/** User's favourite anime, manga, characters, staff & studios */
export interface IFavouritesModel {
  /** Favourite anime*/
  anime?: Maybe<IMediaConnectionModel>;
  /** Favourite manga*/
  manga?: Maybe<IMediaConnectionModel>;
  /** Favourite characters*/
  characters?: Maybe<ICharacterConnectionModel>;
  /** Favourite staff*/
  staff?: Maybe<IStaffConnectionModel>;
  /** Favourite studios*/
  studios?: Maybe<IStudioConnectionModel>;
}

export interface IMediaConnectionModel {
  edges?: Maybe<IMediaEdgeModel[]>;
  nodes?: Maybe<IMediaModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** Media connection edge */
export interface IMediaEdgeModel {
  node?: Maybe<IMediaModel>;
  /** The id of the connection*/
  id?: Maybe<number>;
  /** The type of relation to the parent model*/
  relationType?: Maybe<IMediaRelationModel>;
  /** If the studio is the main animation studio of the media (For Studio->MediaConnection field only)*/
  isMainStudio: boolean;
  /** The characters in the media voiced by the parent actor*/
  characters?: Maybe<ICharacterModel[]>;
  /** The characters role in the media*/
  characterRole?: Maybe<ICharacterRoleModel>;
  /** The role of the staff member in the production of the media*/
  staffRole?: Maybe<string>;
  /** The voice actors of the character*/
  voiceActors?: Maybe<IStaffModel[]>;
  /** The order the media should be displayed from the users favourites*/
  favouriteOrder?: Maybe<number>;
}

/** Anime or Manga */
export interface IMediaModel {
  /** The id of the media*/
  id: number;
  /** The mal id of the media*/
  idMal?: Maybe<number>;
  /** The official titles of the media in various languages*/
  title?: Maybe<IMediaTitleModel>;
  /** The type of the media; anime or manga*/
  type?: Maybe<IMediaTypeModel>;
  /** The format the media was released in*/
  format?: Maybe<IMediaFormatModel>;
  /** The current releasing status of the media*/
  status?: Maybe<IMediaStatusModel>;
  /** Short description of the media's story and characters*/
  description?: Maybe<string>;
  /** The first official release date of the media*/
  startDate?: Maybe<IFuzzyDateModel>;
  /** The last official release date of the media*/
  endDate?: Maybe<IFuzzyDateModel>;
  /** The season the media was initially released in*/
  season?: Maybe<IMediaSeasonModel>;
  /** The season year the media was initially released in*/
  seasonYear?: Maybe<number>;
  /** The year & season the media was initially released in*/
  seasonInt?: Maybe<number>;
  /** The amount of episodes the anime has when complete*/
  episodes?: Maybe<number>;
  /** The general length of each anime episode in minutes*/
  duration?: Maybe<number>;
  /** The amount of chapters the manga has when complete*/
  chapters?: Maybe<number>;
  /** The amount of volumes the manga has when complete*/
  volumes?: Maybe<number>;
  /** Where the media was created. (ISO 3166-1 alpha-2)*/
  countryOfOrigin?: Maybe<undefined>;
  /** If the media is officially licensed or a self-published doujin release*/
  isLicensed?: Maybe<boolean>;
  /** Source type the media was adapted from.*/
  source?: Maybe<IMediaSourceModel>;
  /** Official Twitter hashtags for the media*/
  hashtag?: Maybe<string>;
  /** Media trailer or advertisement*/
  trailer?: Maybe<IMediaTrailerModel>;
  /** When the media's data was last updated*/
  updatedAt?: Maybe<number>;
  /** The cover images of the media*/
  coverImage?: Maybe<IMediaCoverImageModel>;
  /** The banner image of the media*/
  bannerImage?: Maybe<string>;
  /** The genres of the media*/
  genres?: Maybe<string[]>;
  /** Alternative titles of the media*/
  synonyms?: Maybe<string[]>;
  /** A weighted average score of all the user's scores of the media*/
  averageScore?: Maybe<number>;
  /** Mean score of all the user's scores of the media*/
  meanScore?: Maybe<number>;
  /** The number of users with the media on their list*/
  popularity?: Maybe<number>;
  /** Locked media may not be added to lists our favorited. This may be due to the entry pending for deletion or other reasons.*/
  isLocked?: Maybe<boolean>;
  /** The amount of related activity in the past hour*/
  trending?: Maybe<number>;
  /** The amount of user's who have favourited the media*/
  favourites?: Maybe<number>;
  /** List of tags that describes elements and themes of the media*/
  tags?: Maybe<IMediaTagModel[]>;
  /** Other media in the same or connecting franchise*/
  relations?: Maybe<IMediaConnectionModel>;
  /** The characters in the media*/
  characters?: Maybe<ICharacterConnectionModel>;
  /** The staff who produced the media*/
  staff?: Maybe<IStaffConnectionModel>;
  /** The companies who produced the media*/
  studios?: Maybe<IStudioConnectionModel>;
  /** If the media is marked as favourite by the current authenticated user*/
  isFavourite: boolean;
  /** If the media is intended only for 18+ adult audiences*/
  isAdult?: Maybe<boolean>;
  /** The media's next episode airing schedule*/
  nextAiringEpisode?: Maybe<IAiringScheduleModel>;
  /** The media's entire airing schedule*/
  airingSchedule?: Maybe<IAiringScheduleConnectionModel>;
  /** The media's daily trend stats*/
  trends?: Maybe<IMediaTrendConnectionModel>;
  /** External links to another site related to the media*/
  externalLinks?: Maybe<IMediaExternalLinkModel[]>;
  /** Data and links to legal streaming episodes on external sites*/
  streamingEpisodes?: Maybe<IMediaStreamingEpisodeModel[]>;
  /** The ranking of the media in a particular time span and format compared to other media*/
  rankings?: Maybe<IMediaRankModel[]>;
  /** The authenticated user's media list entry for the media*/
  mediaListEntry?: Maybe<IMediaListModel>;
  /** User reviews of the media*/
  reviews?: Maybe<IReviewConnectionModel>;
  /** User recommendations for similar media*/
  recommendations?: Maybe<IRecommendationConnectionModel>;
  stats?: Maybe<IMediaStatsModel>;
  /** The url for the media page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** If the media should have forum thread automatically created for it on airing episode release*/
  autoCreateForumThread?: Maybe<boolean>;
  /** If the media is blocked from being recommended to/from*/
  isRecommendationBlocked?: Maybe<boolean>;
  /** Notes for site moderators*/
  modNotes?: Maybe<string>;
}

/** The official titles of the media in various languages */
export interface IMediaTitleModel {
  /** The romanization of the native language title*/
  romaji?: Maybe<string>;
  /** The official english title*/
  english?: Maybe<string>;
  /** Official title in it's native language*/
  native?: Maybe<string>;
  /** The currently authenticated users preferred title language. Default romaji for non-authenticated*/
  userPreferred?: Maybe<string>;
}

/** Date object that allows for incomplete date values (fuzzy) */
export interface IFuzzyDateModel {
  /** Numeric Year (2017)*/
  year?: Maybe<number>;
  /** Numeric Month (3)*/
  month?: Maybe<number>;
  /** Numeric Day (24)*/
  day?: Maybe<number>;
}

/** Media trailer or advertisement */
export interface IMediaTrailerModel {
  /** The trailer video id*/
  id?: Maybe<string>;
  /** The site the video is hosted by (Currently either youtube or dailymotion)*/
  site?: Maybe<string>;
  /** The url for the thumbnail image of the video*/
  thumbnail?: Maybe<string>;
}

export interface IMediaCoverImageModel {
  /** The cover image url of the media at its largest size. If this size isn't available, large will be provided instead.*/
  extraLarge?: Maybe<string>;
  /** The cover image url of the media at a large size*/
  large?: Maybe<string>;
  /** The cover image url of the media at medium size*/
  medium?: Maybe<string>;
  /** Average #hex color of cover image*/
  color?: Maybe<string>;
}

/** A tag that describes a theme or element of the media */
export interface IMediaTagModel {
  /** The id of the tag*/
  id: number;
  /** The name of the tag*/
  name: string;
  /** A general description of the tag*/
  description?: Maybe<string>;
  /** The categories of tags this tag belongs to*/
  category?: Maybe<string>;
  /** The relevance ranking of the tag out of the 100 for this media*/
  rank?: Maybe<number>;
  /** If the tag could be a spoiler for any media*/
  isGeneralSpoiler?: Maybe<boolean>;
  /** If the tag is a spoiler for this media*/
  isMediaSpoiler?: Maybe<boolean>;
  /** If the tag is only for adult 18+ media*/
  isAdult?: Maybe<boolean>;
}

export interface ICharacterConnectionModel {
  edges?: Maybe<ICharacterEdgeModel[]>;
  nodes?: Maybe<ICharacterModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** Character connection edge */
export interface ICharacterEdgeModel {
  node?: Maybe<ICharacterModel>;
  /** The id of the connection*/
  id?: Maybe<number>;
  /** The characters role in the media*/
  role?: Maybe<ICharacterRoleModel>;
  /** The voice actors of the character*/
  voiceActors?: Maybe<IStaffModel[]>;
  /** The media the character is in*/
  media?: Maybe<IMediaModel[]>;
  /** The order the character should be displayed from the users favourites*/
  favouriteOrder?: Maybe<number>;
}

/** A character that features in an anime or manga */
export interface ICharacterModel {
  /** The id of the character*/
  id: number;
  /** The names of the character*/
  name?: Maybe<ICharacterNameModel>;
  /** Character images*/
  image?: Maybe<ICharacterImageModel>;
  /** A general description of the character*/
  description?: Maybe<string>;
  /** If the character is marked as favourite by the currently authenticated user*/
  isFavourite: boolean;
  /** The url for the character page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** Media that includes the character*/
  media?: Maybe<IMediaConnectionModel>;
  updatedAt?: Maybe<number>;
  /** The amount of user's who have favourited the character*/
  favourites?: Maybe<number>;
  /** Notes for site moderators*/
  modNotes?: Maybe<string>;
}

/** The names of the character */
export interface ICharacterNameModel {
  /** The character's given name*/
  first?: Maybe<string>;
  /** The character's surname*/
  last?: Maybe<string>;
  /** The character's full name*/
  full?: Maybe<string>;
  /** The character's full name in their native language*/
  native?: Maybe<string>;
  /** Other names the character might be referred to as*/
  alternative?: Maybe<string[]>;
}

export interface ICharacterImageModel {
  /** The character's image of media at its largest size*/
  large?: Maybe<string>;
  /** The character's image of media at medium size*/
  medium?: Maybe<string>;
}

/** Voice actors or production staff */
export interface IStaffModel {
  /** The id of the staff member*/
  id: number;
  /** The names of the staff member*/
  name?: Maybe<IStaffNameModel>;
  /** The primary language of the staff member*/
  language?: Maybe<IStaffLanguageModel>;
  /** The staff images*/
  image?: Maybe<IStaffImageModel>;
  /** A general description of the staff member*/
  description?: Maybe<string>;
  /** If the staff member is marked as favourite by the currently authenticated user*/
  isFavourite: boolean;
  /** The url for the staff page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** Media where the staff member has a production role*/
  staffMedia?: Maybe<IMediaConnectionModel>;
  /** Characters voiced by the actor*/
  characters?: Maybe<ICharacterConnectionModel>;
  updatedAt?: Maybe<number>;
  /** Staff member that the submission is referencing*/
  staff?: Maybe<IStaffModel>;
  /** Submitter for the submission*/
  submitter?: Maybe<IUserModel>;
  /** Status of the submission*/
  submissionStatus?: Maybe<number>;
  /** Inner details of submission status*/
  submissionNotes?: Maybe<string>;
  /** The amount of user's who have favourited the staff member*/
  favourites?: Maybe<number>;
  /** Notes for site moderators*/
  modNotes?: Maybe<string>;
}

/** The names of the staff member */
export interface IStaffNameModel {
  /** The person's given name*/
  first?: Maybe<string>;
  /** The person's surname*/
  last?: Maybe<string>;
  /** The person's full name*/
  full?: Maybe<string>;
  /** The person's full name in their native language*/
  native?: Maybe<string>;
  /** Other names the staff member might be referred to as (pen names)*/
  alternative?: Maybe<string[]>;
}

export interface IStaffImageModel {
  /** The person's image of media at its largest size*/
  large?: Maybe<string>;
  /** The person's image of media at medium size*/
  medium?: Maybe<string>;
}

export interface IStaffConnectionModel {
  edges?: Maybe<IStaffEdgeModel[]>;
  nodes?: Maybe<IStaffModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** Staff connection edge */
export interface IStaffEdgeModel {
  node?: Maybe<IStaffModel>;
  /** The id of the connection*/
  id?: Maybe<number>;
  /** The role of the staff member in the production of the media*/
  role?: Maybe<string>;
  /** The order the staff should be displayed from the users favourites*/
  favouriteOrder?: Maybe<number>;
}

export interface IStudioConnectionModel {
  edges?: Maybe<IStudioEdgeModel[]>;
  nodes?: Maybe<IStudioModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** Studio connection edge */
export interface IStudioEdgeModel {
  node?: Maybe<IStudioModel>;
  /** The id of the connection*/
  id?: Maybe<number>;
  /** If the studio is the main animation studio of the anime*/
  isMain: boolean;
  /** The order the character should be displayed from the users favourites*/
  favouriteOrder?: Maybe<number>;
}

/** Animation or production company */
export interface IStudioModel {
  /** The id of the studio*/
  id: number;
  /** The name of the studio*/
  name: string;
  /** If the studio is an animation studio or a different kind of company*/
  isAnimationStudio: boolean;
  /** The media the studio has worked on*/
  media?: Maybe<IMediaConnectionModel>;
  /** The url for the studio page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** If the studio is marked as favourite by the currently authenticated user*/
  isFavourite: boolean;
  /** The amount of user's who have favourited the studio*/
  favourites?: Maybe<number>;
}

/** Media Airing Schedule */
export interface IAiringScheduleModel {
  /** The id of the airing schedule item*/
  id: number;
  /** The time the episode airs at*/
  airingAt: number;
  /** Seconds until episode starts airing*/
  timeUntilAiring: number;
  /** The airing episode number*/
  episode: number;
  /** The associate media id of the airing episode*/
  mediaId: number;
  /** The associate media of the airing episode*/
  media?: Maybe<IMediaModel>;
}

export interface IAiringScheduleConnectionModel {
  edges?: Maybe<IAiringScheduleEdgeModel[]>;
  nodes?: Maybe<IAiringScheduleModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** AiringSchedule connection edge */
export interface IAiringScheduleEdgeModel {
  node?: Maybe<IAiringScheduleModel>;
  /** The id of the connection*/
  id?: Maybe<number>;
}

export interface IMediaTrendConnectionModel {
  edges?: Maybe<IMediaTrendEdgeModel[]>;
  nodes?: Maybe<IMediaTrendModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** Media trend connection edge */
export interface IMediaTrendEdgeModel {
  node?: Maybe<IMediaTrendModel>;
}

/** Daily media statistics */
export interface IMediaTrendModel {
  /** The id of the tag*/
  mediaId: number;
  /** The day the data was recorded (timestamp)*/
  date: number;
  /** The amount of media activity on the day*/
  trending: number;
  /** A weighted average score of all the user's scores of the media*/
  averageScore?: Maybe<number>;
  /** The number of users with the media on their list*/
  popularity?: Maybe<number>;
  /** The number of users with watching/reading the media*/
  inProgress?: Maybe<number>;
  /** If the media was being released at this time*/
  releasing: boolean;
  /** The episode number of the anime released on this day*/
  episode?: Maybe<number>;
  /** The related media*/
  media?: Maybe<IMediaModel>;
}

/** An external link to another site related to the media */
export interface IMediaExternalLinkModel {
  /** The id of the external link*/
  id: number;
  /** The url of the external link*/
  url: string;
  /** The site location of the external link*/
  site: string;
}

/** Data and links to legal streaming episodes on external sites */
export interface IMediaStreamingEpisodeModel {
  /** Title of the episode*/
  title?: Maybe<string>;
  /** Url of episode image thumbnail*/
  thumbnail?: Maybe<string>;
  /** The url of the episode*/
  url?: Maybe<string>;
  /** The site location of the streaming episodes*/
  site?: Maybe<string>;
}

/** The ranking of a media in a particular time span and format compared to other media */
export interface IMediaRankModel {
  /** The id of the rank*/
  id: number;
  /** The numerical rank of the media*/
  rank: number;
  /** The type of ranking*/
  type: IMediaRankTypeModel;
  /** The format the media is ranked within*/
  format: IMediaFormatModel;
  /** The year the media is ranked within*/
  year?: Maybe<number>;
  /** The season the media is ranked within*/
  season?: Maybe<IMediaSeasonModel>;
  /** If the ranking is based on all time instead of a season/year*/
  allTime?: Maybe<boolean>;
  /** String that gives context to the ranking type and time span*/
  context: string;
}

/** List of anime or manga */
export interface IMediaListModel {
  /** The id of the list entry*/
  id: number;
  /** The id of the user owner of the list entry*/
  userId: number;
  /** The id of the media*/
  mediaId: number;
  /** The watching/reading status*/
  status?: Maybe<IMediaListStatusModel>;
  /** The score of the entry*/
  score?: Maybe<number>;
  /** The amount of episodes/chapters consumed by the user*/
  progress?: Maybe<number>;
  /** The amount of volumes read by the user*/
  progressVolumes?: Maybe<number>;
  /** The amount of times the user has rewatched/read the media*/
  repeat?: Maybe<number>;
  /** Priority of planning*/
  priority?: Maybe<number>;
  /** If the entry should only be visible to authenticated user*/
  private?: Maybe<boolean>;
  /** Text notes*/
  notes?: Maybe<string>;
  /** If the entry shown be hidden from non-custom lists*/
  hiddenFromStatusLists?: Maybe<boolean>;
  /** Map of booleans for which custom lists the entry are in*/
  customLists?: Maybe<string>;
  /** Map of advanced scores with name keys*/
  advancedScores?: Maybe<string>;
  /** When the entry was started by the user*/
  startedAt?: Maybe<IFuzzyDateModel>;
  /** When the entry was completed by the user*/
  completedAt?: Maybe<IFuzzyDateModel>;
  /** When the entry data was last updated*/
  updatedAt?: Maybe<number>;
  /** When the entry data was created*/
  createdAt?: Maybe<number>;
  media?: Maybe<IMediaModel>;
  user?: Maybe<IUserModel>;
}

export interface IReviewConnectionModel {
  edges?: Maybe<IReviewEdgeModel[]>;
  nodes?: Maybe<IReviewModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** Review connection edge */
export interface IReviewEdgeModel {
  node?: Maybe<IReviewModel>;
}

/** A Review that features in an anime or manga */
export interface IReviewModel {
  /** The id of the review*/
  id: number;
  /** The id of the review's creator*/
  userId: number;
  /** The id of the review's media*/
  mediaId: number;
  /** For which type of media the review is for*/
  mediaType?: Maybe<IMediaTypeModel>;
  /** A short summary of the review*/
  summary?: Maybe<string>;
  /** The main review body text*/
  body?: Maybe<string>;
  /** The total user rating of the review*/
  rating?: Maybe<number>;
  /** The amount of user ratings of the review*/
  ratingAmount?: Maybe<number>;
  /** The rating of the review by currently authenticated user*/
  userRating?: Maybe<IReviewRatingModel>;
  /** The review score of the media*/
  score?: Maybe<number>;
  /** If the review is not yet publicly published and is only viewable by creator*/
  private?: Maybe<boolean>;
  /** The url for the review page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** The time of the thread creation*/
  createdAt: number;
  /** The time of the thread last update*/
  updatedAt: number;
  /** The creator of the review*/
  user?: Maybe<IUserModel>;
  /** The media the review is of*/
  media?: Maybe<IMediaModel>;
}

export interface IRecommendationConnectionModel {
  edges?: Maybe<IRecommendationEdgeModel[]>;
  nodes?: Maybe<IRecommendationModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** Recommendation connection edge */
export interface IRecommendationEdgeModel {
  node?: Maybe<IRecommendationModel>;
}

/** Media recommendation */
export interface IRecommendationModel {
  /** The id of the recommendation*/
  id: number;
  /** Users rating of the recommendation*/
  rating?: Maybe<number>;
  /** The rating of the recommendation by currently authenticated user*/
  userRating?: Maybe<IRecommendationRatingModel>;
  /** The media the recommendation is from*/
  media?: Maybe<IMediaModel>;
  /** The recommended media*/
  mediaRecommendation?: Maybe<IMediaModel>;
  /** The user that first created the recommendation*/
  user?: Maybe<IUserModel>;
}

/** A media's statistics */
export interface IMediaStatsModel {
  scoreDistribution?: Maybe<IScoreDistributionModel[]>;
  statusDistribution?: Maybe<IStatusDistributionModel[]>;
  airingProgression?: Maybe<IAiringProgressionModel[]>;
}

/** A user's list score distribution. */
export interface IScoreDistributionModel {
  score?: Maybe<number>;
  /** The amount of list entries with this score*/
  amount?: Maybe<number>;
}

/** The distribution of the watching/reading status of media or a user's list */
export interface IStatusDistributionModel {
  /** The day the activity took place (Unix timestamp)*/
  status?: Maybe<IMediaListStatusModel>;
  /** The amount of entries with this status*/
  amount?: Maybe<number>;
}

/** Score & Watcher stats for airing anime by episode and mid-week */
export interface IAiringProgressionModel {
  /** The episode the stats were recorded at. .5 is the mid point between 2 episodes airing dates.*/
  episode?: Maybe<number>;
  /** The average score for the media*/
  score?: Maybe<number>;
  /** The amount of users watching the anime*/
  watching?: Maybe<number>;
}

export interface IUserStatisticTypesModel {
  anime?: Maybe<IUserStatisticsModel>;
  manga?: Maybe<IUserStatisticsModel>;
}

export interface IUserStatisticsModel {
  count: number;
  meanScore: number;
  standardDeviation: number;
  minutesWatched: number;
  episodesWatched: number;
  chaptersRead: number;
  volumesRead: number;
  formats?: Maybe<IUserFormatStatisticModel[]>;
  statuses?: Maybe<IUserStatusStatisticModel[]>;
  scores?: Maybe<IUserScoreStatisticModel[]>;
  lengths?: Maybe<IUserLengthStatisticModel[]>;
  releaseYears?: Maybe<IUserReleaseYearStatisticModel[]>;
  startYears?: Maybe<IUserStartYearStatisticModel[]>;
  genres?: Maybe<IUserGenreStatisticModel[]>;
  tags?: Maybe<IUserTagStatisticModel[]>;
  countries?: Maybe<IUserCountryStatisticModel[]>;
  voiceActors?: Maybe<IUserVoiceActorStatisticModel[]>;
  staff?: Maybe<IUserStaffStatisticModel[]>;
  studios?: Maybe<IUserStudioStatisticModel[]>;
}

export interface IUserFormatStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  format?: Maybe<IMediaFormatModel>;
}

export interface IUserStatusStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  status?: Maybe<IMediaListStatusModel>;
}

export interface IUserScoreStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  score?: Maybe<number>;
}

export interface IUserLengthStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  length?: Maybe<string>;
}

export interface IUserReleaseYearStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  releaseYear?: Maybe<number>;
}

export interface IUserStartYearStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  startYear?: Maybe<number>;
}

export interface IUserGenreStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  genre?: Maybe<string>;
}

export interface IUserTagStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  tag?: Maybe<IMediaTagModel>;
}

export interface IUserCountryStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  country?: Maybe<undefined>;
}

export interface IUserVoiceActorStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  voiceActor?: Maybe<IStaffModel>;
  characterIds: number[];
}

export interface IUserStaffStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  staff?: Maybe<IStaffModel>;
}

export interface IUserStudioStatisticModel {
  count: number;
  meanScore: number;
  minutesWatched: number;
  chaptersRead: number;
  mediaIds: number[];
  studio?: Maybe<IStudioModel>;
}

/** A user's statistics */
export interface IUserStatsModel {
  /** The amount of anime the user has watched in minutes*/
  watchedTime?: Maybe<number>;
  /** The amount of manga chapters the user has read*/
  chaptersRead?: Maybe<number>;
  activityHistory?: Maybe<IUserActivityHistoryModel[]>;
  animeStatusDistribution?: Maybe<IStatusDistributionModel[]>;
  mangaStatusDistribution?: Maybe<IStatusDistributionModel[]>;
  animeScoreDistribution?: Maybe<IScoreDistributionModel[]>;
  mangaScoreDistribution?: Maybe<IScoreDistributionModel[]>;
  animeListScores?: Maybe<IListScoreStatsModel>;
  mangaListScores?: Maybe<IListScoreStatsModel>;
  favouredGenresOverview?: Maybe<IGenreStatsModel[]>;
  favouredGenres?: Maybe<IGenreStatsModel[]>;
  favouredTags?: Maybe<ITagStatsModel[]>;
  favouredActors?: Maybe<IStaffStatsModel[]>;
  favouredStaff?: Maybe<IStaffStatsModel[]>;
  favouredStudios?: Maybe<IStudioStatsModel[]>;
  favouredYears?: Maybe<IYearStatsModel[]>;
  favouredFormats?: Maybe<IFormatStatsModel[]>;
}

/** A user's activity history stats. */
export interface IUserActivityHistoryModel {
  /** The day the activity took place (Unix timestamp)*/
  date?: Maybe<number>;
  /** The amount of activity on the day*/
  amount?: Maybe<number>;
  /** The level of activity represented on a 1-10 scale*/
  level?: Maybe<number>;
}

/** User's list score statistics */
export interface IListScoreStatsModel {
  meanScore?: Maybe<number>;
  standardDeviation?: Maybe<number>;
}

/** User's genre statistics */
export interface IGenreStatsModel {
  genre?: Maybe<string>;
  amount?: Maybe<number>;
  meanScore?: Maybe<number>;
  /** The amount of time in minutes the genre has been watched by the user*/
  timeWatched?: Maybe<number>;
}

/** User's tag statistics */
export interface ITagStatsModel {
  tag?: Maybe<IMediaTagModel>;
  amount?: Maybe<number>;
  meanScore?: Maybe<number>;
  /** The amount of time in minutes the tag has been watched by the user*/
  timeWatched?: Maybe<number>;
}

/** User's staff statistics */
export interface IStaffStatsModel {
  staff?: Maybe<IStaffModel>;
  amount?: Maybe<number>;
  meanScore?: Maybe<number>;
  /** The amount of time in minutes the staff member has been watched by the user*/
  timeWatched?: Maybe<number>;
}

/** User's studio statistics */
export interface IStudioStatsModel {
  studio?: Maybe<IStudioModel>;
  amount?: Maybe<number>;
  meanScore?: Maybe<number>;
  /** The amount of time in minutes the studio's works have been watched by the user*/
  timeWatched?: Maybe<number>;
}

/** User's year statistics */
export interface IYearStatsModel {
  year?: Maybe<number>;
  amount?: Maybe<number>;
  meanScore?: Maybe<number>;
}

/** User's format statistics */
export interface IFormatStatsModel {
  format?: Maybe<IMediaFormatModel>;
  amount?: Maybe<number>;
}

/** Notification for when an episode of anime airs */
export interface IAiringNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the aired anime*/
  animeId: number;
  /** The episode number that just aired*/
  episode: number;
  /** The notification context text*/
  contexts?: Maybe<string[]>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The associated media of the airing schedule*/
  media?: Maybe<IMediaModel>;
}

/** Notification for when the authenticated user is followed by another user */
export interface IFollowingNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who followed the authenticated user*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The liked activity*/
  user?: Maybe<IUserModel>;
}

/** Notification for when a user is send an activity message */
export interface IActivityMessageNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The if of the user who send the message*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the activity message*/
  activityId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The message activity*/
  message?: Maybe<IMessageActivityModel>;
  /** The user who sent the message*/
  user?: Maybe<IUserModel>;
}

/** User message activity */
export interface IMessageActivityModel {
  /** The id of the activity*/
  id: number;
  /** The user id of the activity's recipient*/
  recipientId?: Maybe<number>;
  /** The user id of the activity's sender*/
  messengerId?: Maybe<number>;
  /** The type of the activity*/
  type?: Maybe<IActivityTypeModel>;
  /** The number of activity replies*/
  replyCount: number;
  /** The message text (Markdown)*/
  message?: Maybe<string>;
  /** If the activity is locked and can receive replies*/
  isLocked?: Maybe<boolean>;
  /** If the currently authenticated user is subscribed to the activity*/
  isSubscribed?: Maybe<boolean>;
  /** The amount of likes the activity has*/
  likeCount: number;
  /** If the currently authenticated user liked the activity*/
  isLiked?: Maybe<boolean>;
  /** If the message is private and only viewable to the sender and recipients*/
  isPrivate?: Maybe<boolean>;
  /** The url for the activity page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** The time the activity was created at*/
  createdAt: number;
  /** The user who the activity message was sent to*/
  recipient?: Maybe<IUserModel>;
  /** The user who sent the activity message*/
  messenger?: Maybe<IUserModel>;
  /** The written replies to the activity*/
  replies?: Maybe<IActivityReplyModel[]>;
  /** The users who liked the activity*/
  likes?: Maybe<IUserModel[]>;
}

/** Replay to an activity item */
export interface IActivityReplyModel {
  /** The id of the reply*/
  id: number;
  /** The id of the replies creator*/
  userId?: Maybe<number>;
  /** The id of the parent activity*/
  activityId?: Maybe<number>;
  /** The reply text*/
  text?: Maybe<string>;
  /** The amount of likes the reply has*/
  likeCount: number;
  /** If the currently authenticated user liked the reply*/
  isLiked?: Maybe<boolean>;
  /** The time the reply was created at*/
  createdAt: number;
  /** The user who created reply*/
  user?: Maybe<IUserModel>;
  /** The users who liked the reply*/
  likes?: Maybe<IUserModel[]>;
}

/** Notification for when authenticated user is @ mentioned in activity or reply */
export interface IActivityMentionNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who mentioned the authenticated user*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the activity where mentioned*/
  activityId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The liked activity*/
  activity?: Maybe<IActivityUnionModel>;
  /** The user who mentioned the authenticated user*/
  user?: Maybe<IUserModel>;
}

/** User text activity */
export interface ITextActivityModel {
  /** The id of the activity*/
  id: number;
  /** The user id of the activity's creator*/
  userId?: Maybe<number>;
  /** The type of activity*/
  type?: Maybe<IActivityTypeModel>;
  /** The number of activity replies*/
  replyCount: number;
  /** The status text (Markdown)*/
  text?: Maybe<string>;
  /** The url for the activity page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** If the activity is locked and can receive replies*/
  isLocked?: Maybe<boolean>;
  /** If the currently authenticated user is subscribed to the activity*/
  isSubscribed?: Maybe<boolean>;
  /** The amount of likes the activity has*/
  likeCount: number;
  /** If the currently authenticated user liked the activity*/
  isLiked?: Maybe<boolean>;
  /** The time the activity was created at*/
  createdAt: number;
  /** The user who created the activity*/
  user?: Maybe<IUserModel>;
  /** The written replies to the activity*/
  replies?: Maybe<IActivityReplyModel[]>;
  /** The users who liked the activity*/
  likes?: Maybe<IUserModel[]>;
}

/** User list activity (anime & manga updates) */
export interface IListActivityModel {
  /** The id of the activity*/
  id: number;
  /** The user id of the activity's creator*/
  userId?: Maybe<number>;
  /** The type of activity*/
  type?: Maybe<IActivityTypeModel>;
  /** The number of activity replies*/
  replyCount: number;
  /** The list item's textual status*/
  status?: Maybe<string>;
  /** The list progress made*/
  progress?: Maybe<string>;
  /** If the activity is locked and can receive replies*/
  isLocked?: Maybe<boolean>;
  /** If the currently authenticated user is subscribed to the activity*/
  isSubscribed?: Maybe<boolean>;
  /** The amount of likes the activity has*/
  likeCount: number;
  /** If the currently authenticated user liked the activity*/
  isLiked?: Maybe<boolean>;
  /** The url for the activity page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** The time the activity was created at*/
  createdAt: number;
  /** The owner of the activity*/
  user?: Maybe<IUserModel>;
  /** The associated media to the activity update*/
  media?: Maybe<IMediaModel>;
  /** The written replies to the activity*/
  replies?: Maybe<IActivityReplyModel[]>;
  /** The users who liked the activity*/
  likes?: Maybe<IUserModel[]>;
}

/** Notification for when a user replies to the authenticated users activity */
export interface IActivityReplyNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who replied to the activity*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the activity which was replied too*/
  activityId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The liked activity*/
  activity?: Maybe<IActivityUnionModel>;
  /** The user who replied to the activity*/
  user?: Maybe<IUserModel>;
}

/** Notification for when a user replies to activity the authenticated user has replied to */
export interface IActivityReplySubscribedNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who replied to the activity*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the activity which was replied too*/
  activityId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The liked activity*/
  activity?: Maybe<IActivityUnionModel>;
  /** The user who replied to the activity*/
  user?: Maybe<IUserModel>;
}

/** Notification for when a activity is liked */
export interface IActivityLikeNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who liked to the activity*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the activity which was liked*/
  activityId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The liked activity*/
  activity?: Maybe<IActivityUnionModel>;
  /** The user who liked the activity*/
  user?: Maybe<IUserModel>;
}

/** Notification for when a activity reply is liked */
export interface IActivityReplyLikeNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who liked to the activity reply*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the activity where the reply which was liked*/
  activityId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The liked activity*/
  activity?: Maybe<IActivityUnionModel>;
  /** The user who liked the activity reply*/
  user?: Maybe<IUserModel>;
}

/** Notification for when authenticated user is @ mentioned in a forum thread comment */
export interface IThreadCommentMentionNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who mentioned the authenticated user*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the comment where mentioned*/
  commentId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to*/
  thread?: Maybe<IThreadModel>;
  /** The thread comment that included the @ mention*/
  comment?: Maybe<IThreadCommentModel>;
  /** The user who mentioned the authenticated user*/
  user?: Maybe<IUserModel>;
}

/** Forum Thread */
export interface IThreadModel {
  /** The id of the thread*/
  id: number;
  /** The title of the thread*/
  title?: Maybe<string>;
  /** The text body of the thread (Markdown)*/
  body?: Maybe<string>;
  /** The id of the thread owner user*/
  userId: number;
  /** The id of the user who most recently commented on the thread*/
  replyUserId?: Maybe<number>;
  /** The id of the most recent comment on the thread*/
  replyCommentId?: Maybe<number>;
  /** The number of comments on the thread*/
  replyCount?: Maybe<number>;
  /** The number of times users have viewed the thread*/
  viewCount?: Maybe<number>;
  /** If the thread is locked and can receive comments*/
  isLocked?: Maybe<boolean>;
  /** If the thread is stickied and should be displayed at the top of the page*/
  isSticky?: Maybe<boolean>;
  /** If the currently authenticated user is subscribed to the thread*/
  isSubscribed?: Maybe<boolean>;
  /** The amount of likes the thread has*/
  likeCount: number;
  /** If the currently authenticated user liked the thread*/
  isLiked?: Maybe<boolean>;
  /** The time of the last reply*/
  repliedAt?: Maybe<number>;
  /** The time of the thread creation*/
  createdAt: number;
  /** The time of the thread last update*/
  updatedAt: number;
  /** The owner of the thread*/
  user?: Maybe<IUserModel>;
  /** The user to last reply to the thread*/
  replyUser?: Maybe<IUserModel>;
  /** The users who liked the thread*/
  likes?: Maybe<IUserModel[]>;
  /** The url for the thread page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** The categories of the thread*/
  categories?: Maybe<IThreadCategoryModel[]>;
  /** The media categories of the thread*/
  mediaCategories?: Maybe<IMediaModel[]>;
}

/** A forum thread category */
export interface IThreadCategoryModel {
  /** The id of the category*/
  id: number;
  /** The name of the category*/
  name: string;
}

/** Forum Thread Comment */
export interface IThreadCommentModel {
  /** The id of the comment*/
  id: number;
  /** The user id of the comment's owner*/
  userId?: Maybe<number>;
  /** The id of thread the comment belongs to*/
  threadId?: Maybe<number>;
  /** The text content of the comment (Markdown)*/
  comment?: Maybe<string>;
  /** The amount of likes the comment has*/
  likeCount: number;
  /** If the currently authenticated user liked the comment*/
  isLiked?: Maybe<boolean>;
  /** The url for the comment page on the AniList website*/
  siteUrl?: Maybe<string>;
  /** The time of the comments creation*/
  createdAt: number;
  /** The time of the comments last update*/
  updatedAt: number;
  /** The thread the comment belongs to*/
  thread?: Maybe<IThreadModel>;
  /** The user who created the comment*/
  user?: Maybe<IUserModel>;
  /** The users who liked the comment*/
  likes?: Maybe<IUserModel[]>;
  /** The comment's child reply comments*/
  childComments?: Maybe<string>;
}

/** Notification for when a user replies to your forum thread comment */
export interface IThreadCommentReplyNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who create the comment reply*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the reply comment*/
  commentId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to*/
  thread?: Maybe<IThreadModel>;
  /** The reply thread comment*/
  comment?: Maybe<IThreadCommentModel>;
  /** The user who replied to the activity*/
  user?: Maybe<IUserModel>;
}

/** Notification for when a user replies to a subscribed forum thread */
export interface IThreadCommentSubscribedNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who commented on the thread*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the new comment in the subscribed thread*/
  commentId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to*/
  thread?: Maybe<IThreadModel>;
  /** The reply thread comment*/
  comment?: Maybe<IThreadCommentModel>;
  /** The user who replied to the subscribed thread*/
  user?: Maybe<IUserModel>;
}

/** Notification for when a thread comment is liked */
export interface IThreadCommentLikeNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who liked to the activity*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the activity which was liked*/
  commentId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to*/
  thread?: Maybe<IThreadModel>;
  /** The thread comment that was liked*/
  comment?: Maybe<IThreadCommentModel>;
  /** The user who liked the activity*/
  user?: Maybe<IUserModel>;
}

/** Notification for when a thread is liked */
export interface IThreadLikeNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The id of the user who liked to the activity*/
  userId: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the thread which was liked*/
  threadId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The thread that the relevant comment belongs to*/
  thread?: Maybe<IThreadModel>;
  /** The liked thread comment*/
  comment?: Maybe<IThreadCommentModel>;
  /** The user who liked the activity*/
  user?: Maybe<IUserModel>;
}

/** Notification for when new media is added to the site */
export interface IRelatedMediaAdditionNotificationModel {
  /** The id of the Notification*/
  id: number;
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** The id of the new media*/
  mediaId: number;
  /** The notification context text*/
  context?: Maybe<string>;
  /** The time the notification was created at*/
  createdAt?: Maybe<number>;
  /** The associated media of the airing schedule*/
  media?: Maybe<IMediaModel>;
}

/** List of anime or manga */
export interface IMediaListCollectionModel {
  /** Grouped media list entries*/
  lists?: Maybe<IMediaListGroupModel[]>;
  /** The owner of the list*/
  user?: Maybe<IUserModel>;
  /** If there is another chunk*/
  hasNextChunk?: Maybe<boolean>;
  /** A map of media list entry arrays grouped by status*/
  statusLists?: Maybe<IMediaListModel[]>;
  /** A map of media list entry arrays grouped by custom lists*/
  customLists?: Maybe<IMediaListModel[]>;
}

/** List group of anime or manga entries */
export interface IMediaListGroupModel {
  /** Media list entries*/
  entries?: Maybe<IMediaListModel[]>;
  name?: Maybe<string>;
  isCustomList?: Maybe<boolean>;
  isSplitCompletedList?: Maybe<boolean>;
  status?: Maybe<IMediaListStatusModel>;
}

/** Provides the parsed markdown as html */
export interface IParsedMarkdownModel {
  /** The parsed markdown as html*/
  html?: Maybe<string>;
}

export interface IAniChartUserModel {
  user?: Maybe<IUserModel>;
  settings?: Maybe<string>;
  highlights?: Maybe<string>;
}

export interface ISiteStatisticsModel {
  users?: Maybe<ISiteTrendConnectionModel>;
  anime?: Maybe<ISiteTrendConnectionModel>;
  manga?: Maybe<ISiteTrendConnectionModel>;
  characters?: Maybe<ISiteTrendConnectionModel>;
  staff?: Maybe<ISiteTrendConnectionModel>;
  studios?: Maybe<ISiteTrendConnectionModel>;
  reviews?: Maybe<ISiteTrendConnectionModel>;
}

export interface ISiteTrendConnectionModel {
  edges?: Maybe<ISiteTrendEdgeModel[]>;
  nodes?: Maybe<ISiteTrendModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** Site trend connection edge */
export interface ISiteTrendEdgeModel {
  node?: Maybe<ISiteTrendModel>;
}

/** Daily site statistics */
export interface ISiteTrendModel {
  /** The day the data was recorded (timestamp)*/
  date: number;
  count: number;
  /** The change from yesterday*/
  change: number;
}

export interface IMutationModel {
  UpdateUser?: Maybe<IUserModel>;
  /** Create or update a media list entry*/
  SaveMediaListEntry?: Maybe<IMediaListModel>;
  /** Update multiple media list entries to the same values*/
  UpdateMediaListEntries?: Maybe<IMediaListModel[]>;
  /** Delete a media list entry*/
  DeleteMediaListEntry?: Maybe<IDeletedModel>;
  /** Delete a custom list and remove the list entries from it*/
  DeleteCustomList?: Maybe<IDeletedModel>;
  /** Create or update text activity for the currently authenticated user*/
  SaveTextActivity?: Maybe<ITextActivityModel>;
  /** Create or update message activity for the currently authenticated user*/
  SaveMessageActivity?: Maybe<IMessageActivityModel>;
  /** Update list activity (Mod Only)*/
  SaveListActivity?: Maybe<IListActivityModel>;
  /** Delete an activity item of the authenticated users*/
  DeleteActivity?: Maybe<IDeletedModel>;
  /** Toggle the subscription of an activity item*/
  ToggleActivitySubscription?: Maybe<IActivityUnionModel>;
  /** Create or update an activity reply*/
  SaveActivityReply?: Maybe<IActivityReplyModel>;
  /** Delete an activity reply of the authenticated users*/
  DeleteActivityReply?: Maybe<IDeletedModel>;
  /** Add or remove a like from a likeable type.
                          Returns all the users who liked the same model*/
  ToggleLike?: Maybe<IUserModel[]>;
  /** Add or remove a like from a likeable type.*/
  ToggleLikeV2?: Maybe<ILikeableUnionModel>;
  /** Toggle the un/following of a user*/
  ToggleFollow?: Maybe<IUserModel>;
  /** Favourite or unfavourite an anime, manga, character, staff member, or studio*/
  ToggleFavourite?: Maybe<IFavouritesModel>;
  /** Update the order favourites are displayed in*/
  UpdateFavouriteOrder?: Maybe<IFavouritesModel>;
  /** Create or update a review*/
  SaveReview?: Maybe<IReviewModel>;
  /** Delete a review*/
  DeleteReview?: Maybe<IDeletedModel>;
  /** Rate a review*/
  RateReview?: Maybe<IReviewModel>;
  /** Recommendation a media*/
  SaveRecommendation?: Maybe<IRecommendationModel>;
  /** Create or update a forum thread*/
  SaveThread?: Maybe<IThreadModel>;
  /** Delete a thread*/
  DeleteThread?: Maybe<IDeletedModel>;
  /** Toggle the subscription of a forum thread*/
  ToggleThreadSubscription?: Maybe<IThreadModel>;
  /** Create or update a thread comment*/
  SaveThreadComment?: Maybe<IThreadCommentModel>;
  /** Delete a thread comment*/
  DeleteThreadComment?: Maybe<IDeletedModel>;
  UpdateAniChartSettings?: Maybe<string>;
  UpdateAniChartHighlights?: Maybe<string>;
}

/** Notification option input */
export interface INotificationOptionInputModel {
  /** The type of notification*/
  type?: Maybe<INotificationTypeModel>;
  /** Whether this type of notification is enabled*/
  enabled?: Maybe<boolean>;
}

/** A user's list options for anime or manga lists */
export interface IMediaListOptionsInputModel {
  /** The order each list should be displayed in*/
  sectionOrder?: Maybe<string[]>;
  /** If the completed sections of the list should be separated by format*/
  splitCompletedSectionByFormat?: Maybe<boolean>;
  /** The names of the user's custom lists*/
  customLists?: Maybe<string[]>;
  /** The names of the user's advanced scoring sections*/
  advancedScoring?: Maybe<string[]>;
  /** If advanced scoring is enabled*/
  advancedScoringEnabled?: Maybe<boolean>;
  /** list theme*/
  theme?: Maybe<string>;
}

/** Date object that allows for incomplete date values (fuzzy) */
export interface IFuzzyDateInputModel {
  /** Numeric Year (2017)*/
  year?: Maybe<number>;
  /** Numeric Month (3)*/
  month?: Maybe<number>;
  /** Numeric Day (24)*/
  day?: Maybe<number>;
}

/** Deleted data type */
export interface IDeletedModel {
  /** If an item has been successfully deleted*/
  deleted?: Maybe<boolean>;
}

export interface IAniChartHighlightInputModel {
  mediaId?: Maybe<number>;
  highlight?: Maybe<string>;
}

/** Page of data (Used for internal use only) */
export interface IInternalPageModel {
  mediaSubmissions?: Maybe<IMediaSubmissionModel[]>;
  characterSubmissions?: Maybe<ICharacterSubmissionModel[]>;
  staffSubmissions?: Maybe<IStaffSubmissionModel[]>;
  revisionHistory?: Maybe<IRevisionHistoryModel[]>;
  reports?: Maybe<IReportModel[]>;
  modActions?: Maybe<IModActionModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
  users?: Maybe<IUserModel[]>;
  media?: Maybe<IMediaModel[]>;
  characters?: Maybe<ICharacterModel[]>;
  staff?: Maybe<IStaffModel[]>;
  studios?: Maybe<IStudioModel[]>;
  mediaList?: Maybe<IMediaListModel[]>;
  airingSchedules?: Maybe<IAiringScheduleModel[]>;
  mediaTrends?: Maybe<IMediaTrendModel[]>;
  notifications?: Maybe<INotificationUnionModel[]>;
  followers?: Maybe<IUserModel[]>;
  following?: Maybe<IUserModel[]>;
  activities?: Maybe<IActivityUnionModel[]>;
  activityReplies?: Maybe<IActivityReplyModel[]>;
  threads?: Maybe<IThreadModel[]>;
  threadComments?: Maybe<IThreadCommentModel[]>;
  reviews?: Maybe<IReviewModel[]>;
  recommendations?: Maybe<IRecommendationModel[]>;
  likes?: Maybe<IUserModel[]>;
}

/** Media submission */
export interface IMediaSubmissionModel {
  /** The id of the submission*/
  id: number;
  /** User submitter of the submission*/
  submitter?: Maybe<IUserModel>;
  /** Status of the submission*/
  status?: Maybe<ISubmissionStatusModel>;
  submitterStats?: Maybe<string>;
  notes?: Maybe<string>;
  source?: Maybe<string>;
  changes?: Maybe<string[]>;
  media?: Maybe<IMediaModel>;
  submission?: Maybe<IMediaModel>;
  characters?: Maybe<IMediaSubmissionComparisonModel[]>;
  staff?: Maybe<IMediaSubmissionComparisonModel[]>;
  studios?: Maybe<IMediaSubmissionComparisonModel[]>;
  relations?: Maybe<IMediaEdgeModel[]>;
  externalLinks?: Maybe<IMediaExternalLinkModel[]>;
  createdAt?: Maybe<number>;
}

/** Media submission with comparison to current data */
export interface IMediaSubmissionComparisonModel {
  submission?: Maybe<IMediaSubmissionEdgeModel>;
  character?: Maybe<IMediaCharacterModel>;
  staff?: Maybe<IStaffEdgeModel>;
  studio?: Maybe<IStudioEdgeModel>;
}

export interface IMediaSubmissionEdgeModel {
  /** The id of the direct submission*/
  id?: Maybe<number>;
  characterRole?: Maybe<ICharacterRoleModel>;
  staffRole?: Maybe<string>;
  isMain?: Maybe<boolean>;
  character?: Maybe<ICharacterModel>;
  characterSubmission?: Maybe<ICharacterModel>;
  voiceActor?: Maybe<IStaffModel>;
  voiceActorSubmission?: Maybe<IStaffModel>;
  staff?: Maybe<IStaffModel>;
  staffSubmission?: Maybe<IStaffModel>;
  studio?: Maybe<IStudioModel>;
  media?: Maybe<IMediaModel>;
}

/** Internal - Media characters separated */
export interface IMediaCharacterModel {
  /** The id of the connection*/
  id?: Maybe<number>;
  /** The characters role in the media*/
  role?: Maybe<ICharacterRoleModel>;
  /** The characters in the media voiced by the parent actor*/
  character?: Maybe<ICharacterModel>;
  /** The voice actor of the character*/
  voiceActor?: Maybe<IStaffModel>;
}

/** A submission for a character that features in an anime or manga */
export interface ICharacterSubmissionModel {
  /** The id of the submission*/
  id: number;
  /** Character that the submission is referencing*/
  character?: Maybe<ICharacterModel>;
  /** The character submission changes*/
  submission?: Maybe<ICharacterModel>;
  /** Submitter for the submission*/
  submitter?: Maybe<IUserModel>;
  /** Status of the submission*/
  status?: Maybe<ISubmissionStatusModel>;
  /** Inner details of submission status*/
  notes?: Maybe<string>;
  source?: Maybe<string>;
  createdAt?: Maybe<number>;
}

/** A submission for a staff that features in an anime or manga */
export interface IStaffSubmissionModel {
  /** The id of the submission*/
  id: number;
  /** Staff that the submission is referencing*/
  staff?: Maybe<IStaffModel>;
  /** The staff submission changes*/
  submission?: Maybe<IStaffModel>;
  /** Submitter for the submission*/
  submitter?: Maybe<IUserModel>;
  /** Status of the submission*/
  status?: Maybe<ISubmissionStatusModel>;
  /** Inner details of submission status*/
  notes?: Maybe<string>;
  source?: Maybe<string>;
  createdAt?: Maybe<number>;
}

/** Feed of mod edit activity */
export interface IRevisionHistoryModel {
  /** The id of the media*/
  id: number;
  /** The action taken on the objects*/
  action?: Maybe<IRevisionHistoryActionModel>;
  /** A JSON object of the fields that changed*/
  changes?: Maybe<string>;
  /** The user who made the edit to the object*/
  user?: Maybe<IUserModel>;
  /** The media the mod feed entry references*/
  media?: Maybe<IMediaModel>;
  /** The character the mod feed entry references*/
  character?: Maybe<ICharacterModel>;
  /** The staff member the mod feed entry references*/
  staff?: Maybe<IStaffModel>;
  /** The studio the mod feed entry references*/
  studio?: Maybe<IStudioModel>;
  /** When the mod feed entry was created*/
  createdAt?: Maybe<number>;
}

export interface IReportModel {
  id: number;
  reporter?: Maybe<IUserModel>;
  reported?: Maybe<IUserModel>;
  reason?: Maybe<string>;
  /** When the entry data was created*/
  createdAt?: Maybe<number>;
}

export interface IModActionModel {
  /** The id of the action*/
  id: number;
  user?: Maybe<IUserModel>;
  mod?: Maybe<IUserModel>;
  type?: Maybe<IModActionTypeModel>;
  objectId?: Maybe<number>;
  objectType?: Maybe<string>;
  data?: Maybe<string>;
  createdAt: number;
}

/** The official titles of the media in various languages */
export interface IMediaTitleInputModel {
  /** The romanization of the native language title*/
  romaji?: Maybe<string>;
  /** The official english title*/
  english?: Maybe<string>;
  /** Official title in it's native language*/
  native?: Maybe<string>;
}

/** An external link to another site related to the media */
export interface IMediaExternalLinkInputModel {
  /** The id of the external link*/
  id: number;
  /** The url of the external link*/
  url: string;
  /** The site location of the external link*/
  site: string;
}

export interface IAiringScheduleInputModel {
  airingAt?: Maybe<number>;
  episode?: Maybe<number>;
  timeUntilAiring?: Maybe<number>;
}

/** The names of the character */
export interface ICharacterNameInputModel {
  /** The character's given name*/
  first?: Maybe<string>;
  /** The character's surname*/
  last?: Maybe<string>;
  /** The character's full name in their native language*/
  native?: Maybe<string>;
  /** Other names the character might be referred by*/
  alternative?: Maybe<string[]>;
}

export interface ICharacterSubmissionConnectionModel {
  edges?: Maybe<ICharacterSubmissionEdgeModel[]>;
  nodes?: Maybe<ICharacterSubmissionModel[]>;
  /** The pagination information*/
  pageInfo?: Maybe<IPageInfoModel>;
}

/** CharacterSubmission connection edge */
export interface ICharacterSubmissionEdgeModel {
  node?: Maybe<ICharacterSubmissionModel>;
  /** The characters role in the media*/
  role?: Maybe<ICharacterRoleModel>;
  /** The voice actors of the character*/
  voiceActors?: Maybe<IStaffModel[]>;
  /** The submitted voice actors of the character*/
  submittedVoiceActors?: Maybe<IStaffSubmissionModel[]>;
}

/** The names of the staff member */
export interface IStaffNameInputModel {
  /** The person's given name*/
  first?: Maybe<string>;
  /** The person's surname*/
  last?: Maybe<string>;
  /** The person's full name in their native language*/
  native?: Maybe<string>;
  /** Other names the character might be referred by*/
  alternative?: Maybe<string[]>;
}

/** User data for moderators */
export interface IUserModDataModel {
  alts?: Maybe<IUserModel[]>;
  bans?: Maybe<string>;
  ip?: Maybe<string>;
  counts?: Maybe<string>;
}

/** User sort enums */
export enum IUserSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Username = 'USERNAME',
  Username_desc = 'USERNAME_DESC',
  Watched_time = 'WATCHED_TIME',
  Watched_time_desc = 'WATCHED_TIME_DESC',
  Chapters_read = 'CHAPTERS_READ',
  Chapters_read_desc = 'CHAPTERS_READ_DESC',
  Search_match = 'SEARCH_MATCH',
}
/** The language the user wants to see media titles in */
export enum IUserTitleLanguageModel {
  Romaji = 'ROMAJI',
  English = 'ENGLISH',
  Native = 'NATIVE',
  Romaji_stylised = 'ROMAJI_STYLISED',
  English_stylised = 'ENGLISH_STYLISED',
  Native_stylised = 'NATIVE_STYLISED',
}
/** Notification type enum */
export enum INotificationTypeModel {
  Activity_message = 'ACTIVITY_MESSAGE',
  Activity_reply = 'ACTIVITY_REPLY',
  Following = 'FOLLOWING',
  Activity_mention = 'ACTIVITY_MENTION',
  Thread_comment_mention = 'THREAD_COMMENT_MENTION',
  Thread_subscribed = 'THREAD_SUBSCRIBED',
  Thread_comment_reply = 'THREAD_COMMENT_REPLY',
  Airing = 'AIRING',
  Activity_like = 'ACTIVITY_LIKE',
  Activity_reply_like = 'ACTIVITY_REPLY_LIKE',
  Thread_like = 'THREAD_LIKE',
  Thread_comment_like = 'THREAD_COMMENT_LIKE',
  Activity_reply_subscribed = 'ACTIVITY_REPLY_SUBSCRIBED',
  Related_media_addition = 'RELATED_MEDIA_ADDITION',
}
/** Media list scoring type */
export enum IScoreFormatModel {
  Point_100 = 'POINT_100',
  Point_10_decimal = 'POINT_10_DECIMAL',
  Point_10 = 'POINT_10',
  Point_5 = 'POINT_5',
  Point_3 = 'POINT_3',
}
/** Media type enum, anime or manga. */
export enum IMediaTypeModel {
  Anime = 'ANIME',
  Manga = 'MANGA',
}
/** The format the media was released in */
export enum IMediaFormatModel {
  Tv = 'TV',
  Tv_short = 'TV_SHORT',
  Movie = 'MOVIE',
  Special = 'SPECIAL',
  Ova = 'OVA',
  Ona = 'ONA',
  Music = 'MUSIC',
  Manga = 'MANGA',
  Novel = 'NOVEL',
  One_shot = 'ONE_SHOT',
}
/** The current releasing status of the media */
export enum IMediaStatusModel {
  Finished = 'FINISHED',
  Releasing = 'RELEASING',
  Not_yet_released = 'NOT_YET_RELEASED',
  Cancelled = 'CANCELLED',
}
export enum IMediaSeasonModel {
  Winter = 'WINTER',
  Spring = 'SPRING',
  Summer = 'SUMMER',
  Fall = 'FALL',
}
/** Source type the media was adapted from */
export enum IMediaSourceModel {
  Original = 'ORIGINAL',
  Manga = 'MANGA',
  Light_novel = 'LIGHT_NOVEL',
  Visual_novel = 'VISUAL_NOVEL',
  Video_game = 'VIDEO_GAME',
  Other = 'OTHER',
  Novel = 'NOVEL',
  Doujinshi = 'DOUJINSHI',
  Anime = 'ANIME',
}
/** Character sort enums */
export enum ICharacterSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Role = 'ROLE',
  Role_desc = 'ROLE_DESC',
  Search_match = 'SEARCH_MATCH',
  Favourites = 'FAVOURITES',
  Favourites_desc = 'FAVOURITES_DESC',
}
/** The role the character plays in the media */
export enum ICharacterRoleModel {
  Main = 'MAIN',
  Supporting = 'SUPPORTING',
  Background = 'BACKGROUND',
}
/** Media sort enums */
export enum IMediaSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Title_romaji = 'TITLE_ROMAJI',
  Title_romaji_desc = 'TITLE_ROMAJI_DESC',
  Title_english = 'TITLE_ENGLISH',
  Title_english_desc = 'TITLE_ENGLISH_DESC',
  Title_native = 'TITLE_NATIVE',
  Title_native_desc = 'TITLE_NATIVE_DESC',
  Type = 'TYPE',
  Type_desc = 'TYPE_DESC',
  Format = 'FORMAT',
  Format_desc = 'FORMAT_DESC',
  Start_date = 'START_DATE',
  Start_date_desc = 'START_DATE_DESC',
  End_date = 'END_DATE',
  End_date_desc = 'END_DATE_DESC',
  Score = 'SCORE',
  Score_desc = 'SCORE_DESC',
  Popularity = 'POPULARITY',
  Popularity_desc = 'POPULARITY_DESC',
  Trending = 'TRENDING',
  Trending_desc = 'TRENDING_DESC',
  Episodes = 'EPISODES',
  Episodes_desc = 'EPISODES_DESC',
  Duration = 'DURATION',
  Duration_desc = 'DURATION_DESC',
  Status = 'STATUS',
  Status_desc = 'STATUS_DESC',
  Chapters = 'CHAPTERS',
  Chapters_desc = 'CHAPTERS_DESC',
  Volumes = 'VOLUMES',
  Volumes_desc = 'VOLUMES_DESC',
  Updated_at = 'UPDATED_AT',
  Updated_at_desc = 'UPDATED_AT_DESC',
  Search_match = 'SEARCH_MATCH',
  Favourites = 'FAVOURITES',
  Favourites_desc = 'FAVOURITES_DESC',
}
/** The primary language of the voice actor */
export enum IStaffLanguageModel {
  Japanese = 'JAPANESE',
  English = 'ENGLISH',
  Korean = 'KOREAN',
  Italian = 'ITALIAN',
  Spanish = 'SPANISH',
  Portuguese = 'PORTUGUESE',
  French = 'FRENCH',
  German = 'GERMAN',
  Hebrew = 'HEBREW',
  Hungarian = 'HUNGARIAN',
}
/** Staff sort enums */
export enum IStaffSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Role = 'ROLE',
  Role_desc = 'ROLE_DESC',
  Language = 'LANGUAGE',
  Language_desc = 'LANGUAGE_DESC',
  Search_match = 'SEARCH_MATCH',
  Favourites = 'FAVOURITES',
  Favourites_desc = 'FAVOURITES_DESC',
}
/** Studio sort enums */
export enum IStudioSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Name = 'NAME',
  Name_desc = 'NAME_DESC',
  Search_match = 'SEARCH_MATCH',
  Favourites = 'FAVOURITES',
  Favourites_desc = 'FAVOURITES_DESC',
}
/** Media trend sort enums */
export enum IMediaTrendSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Media_id = 'MEDIA_ID',
  Media_id_desc = 'MEDIA_ID_DESC',
  Date = 'DATE',
  Date_desc = 'DATE_DESC',
  Score = 'SCORE',
  Score_desc = 'SCORE_DESC',
  Popularity = 'POPULARITY',
  Popularity_desc = 'POPULARITY_DESC',
  Trending = 'TRENDING',
  Trending_desc = 'TRENDING_DESC',
  Episode = 'EPISODE',
  Episode_desc = 'EPISODE_DESC',
}
/** The type of ranking */
export enum IMediaRankTypeModel {
  Rated = 'RATED',
  Popular = 'POPULAR',
}
/** Media list watching/reading status enum. */
export enum IMediaListStatusModel {
  Current = 'CURRENT',
  Planning = 'PLANNING',
  Completed = 'COMPLETED',
  Dropped = 'DROPPED',
  Paused = 'PAUSED',
  Repeating = 'REPEATING',
}
/** Review sort enums */
export enum IReviewSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Score = 'SCORE',
  Score_desc = 'SCORE_DESC',
  Rating = 'RATING',
  Rating_desc = 'RATING_DESC',
  Created_at = 'CREATED_AT',
  Created_at_desc = 'CREATED_AT_DESC',
  Updated_at = 'UPDATED_AT',
  Updated_at_desc = 'UPDATED_AT_DESC',
}
/** Review rating enums */
export enum IReviewRatingModel {
  No_vote = 'NO_VOTE',
  Up_vote = 'UP_VOTE',
  Down_vote = 'DOWN_VOTE',
}
/** Recommendation sort enums */
export enum IRecommendationSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Rating = 'RATING',
  Rating_desc = 'RATING_DESC',
}
/** Recommendation rating enums */
export enum IRecommendationRatingModel {
  No_rating = 'NO_RATING',
  Rate_up = 'RATE_UP',
  Rate_down = 'RATE_DOWN',
}
/** Type of relation media has to its parent. */
export enum IMediaRelationModel {
  Adaptation = 'ADAPTATION',
  Prequel = 'PREQUEL',
  Sequel = 'SEQUEL',
  Parent = 'PARENT',
  Side_story = 'SIDE_STORY',
  Character = 'CHARACTER',
  Summary = 'SUMMARY',
  Alternative = 'ALTERNATIVE',
  Spin_off = 'SPIN_OFF',
  Other = 'OTHER',
  Source = 'SOURCE',
  Compilation = 'COMPILATION',
  Contains = 'CONTAINS',
}
/** User statistics sort enum */
export enum IUserStatisticsSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Count = 'COUNT',
  Count_desc = 'COUNT_DESC',
  Progress = 'PROGRESS',
  Progress_desc = 'PROGRESS_DESC',
  Mean_score = 'MEAN_SCORE',
  Mean_score_desc = 'MEAN_SCORE_DESC',
}
/** Media list sort enums */
export enum IMediaListSortModel {
  Media_id = 'MEDIA_ID',
  Media_id_desc = 'MEDIA_ID_DESC',
  Score = 'SCORE',
  Score_desc = 'SCORE_DESC',
  Status = 'STATUS',
  Status_desc = 'STATUS_DESC',
  Progress = 'PROGRESS',
  Progress_desc = 'PROGRESS_DESC',
  Progress_volumes = 'PROGRESS_VOLUMES',
  Progress_volumes_desc = 'PROGRESS_VOLUMES_DESC',
  Repeat = 'REPEAT',
  Repeat_desc = 'REPEAT_DESC',
  Priority = 'PRIORITY',
  Priority_desc = 'PRIORITY_DESC',
  Started_on = 'STARTED_ON',
  Started_on_desc = 'STARTED_ON_DESC',
  Finished_on = 'FINISHED_ON',
  Finished_on_desc = 'FINISHED_ON_DESC',
  Added_time = 'ADDED_TIME',
  Added_time_desc = 'ADDED_TIME_DESC',
  Updated_time = 'UPDATED_TIME',
  Updated_time_desc = 'UPDATED_TIME_DESC',
  Media_title_romaji = 'MEDIA_TITLE_ROMAJI',
  Media_title_romaji_desc = 'MEDIA_TITLE_ROMAJI_DESC',
  Media_title_english = 'MEDIA_TITLE_ENGLISH',
  Media_title_english_desc = 'MEDIA_TITLE_ENGLISH_DESC',
  Media_title_native = 'MEDIA_TITLE_NATIVE',
  Media_title_native_desc = 'MEDIA_TITLE_NATIVE_DESC',
  Media_popularity = 'MEDIA_POPULARITY',
  Media_popularity_desc = 'MEDIA_POPULARITY_DESC',
}
/** Airing schedule sort enums */
export enum IAiringSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Media_id = 'MEDIA_ID',
  Media_id_desc = 'MEDIA_ID_DESC',
  Time = 'TIME',
  Time_desc = 'TIME_DESC',
  Episode = 'EPISODE',
  Episode_desc = 'EPISODE_DESC',
}
/** Notification union type */
export type INotificationUnionModel =
  | AiringNotification
  | FollowingNotification
  | ActivityMessageNotification
  | ActivityMentionNotification
  | ActivityReplyNotification
  | ActivityReplySubscribedNotification
  | ActivityLikeNotification
  | ActivityReplyLikeNotification
  | ThreadCommentMentionNotification
  | ThreadCommentReplyNotification
  | ThreadCommentSubscribedNotification
  | ThreadCommentLikeNotification
  | ThreadLikeNotification
  | RelatedMediaAdditionNotification;
/** Activity type enum. */
export enum IActivityTypeModel {
  Text = 'TEXT',
  Anime_list = 'ANIME_LIST',
  Manga_list = 'MANGA_LIST',
  Message = 'MESSAGE',
  Media_list = 'MEDIA_LIST',
}
/** Activity union type */
export type IActivityUnionModel = TextActivity | ListActivity | MessageActivity;
/** Activity sort enums */
export enum IActivitySortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
}
/** Thread sort enums */
export enum IThreadSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
  Title = 'TITLE',
  Title_desc = 'TITLE_DESC',
  Created_at = 'CREATED_AT',
  Created_at_desc = 'CREATED_AT_DESC',
  Updated_at = 'UPDATED_AT',
  Updated_at_desc = 'UPDATED_AT_DESC',
  Replied_at = 'REPLIED_AT',
  Replied_at_desc = 'REPLIED_AT_DESC',
  Reply_count = 'REPLY_COUNT',
  Reply_count_desc = 'REPLY_COUNT_DESC',
  View_count = 'VIEW_COUNT',
  View_count_desc = 'VIEW_COUNT_DESC',
  Is_sticky = 'IS_STICKY',
  Search_match = 'SEARCH_MATCH',
}
/** Thread comments sort enums */
export enum IThreadCommentSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
}
/** Types that can be liked */
export enum ILikeableTypeModel {
  Thread = 'THREAD',
  Thread_comment = 'THREAD_COMMENT',
  Activity = 'ACTIVITY',
  Activity_reply = 'ACTIVITY_REPLY',
}
/** Site trend sort enums */
export enum ISiteTrendSortModel {
  Date = 'DATE',
  Date_desc = 'DATE_DESC',
  Count = 'COUNT',
  Count_desc = 'COUNT_DESC',
  Change = 'CHANGE',
  Change_desc = 'CHANGE_DESC',
}
/** Likeable union type */
export type ILikeableUnionModel =
  | ListActivity
  | TextActivity
  | MessageActivity
  | ActivityReply
  | Thread
  | ThreadComment;
/** Submission status */
export enum ISubmissionStatusModel {
  Pending = 'PENDING',
  Rejected = 'REJECTED',
  Partially_accepted = 'PARTIALLY_ACCEPTED',
  Accepted = 'ACCEPTED',
}
/** Submission sort enums */
export enum ISubmissionSortModel {
  Id = 'ID',
  Id_desc = 'ID_DESC',
}
/** Revision history actions */
export enum IRevisionHistoryActionModel {
  Create = 'CREATE',
  Edit = 'EDIT',
}
export enum IModActionTypeModel {
  Note = 'NOTE',
  Ban = 'BAN',
  Delete = 'DELETE',
  Edit = 'EDIT',
  Expire = 'EXPIRE',
  Report = 'REPORT',
  Reset = 'RESET',
  Anon = 'ANON',
}
export interface IPageModelArgs {
  /** The page number*/
  page?: Maybe<number>;
  /** The amount of entries per page, max 50*/
  perPage?: Maybe<number>;
}

/** Media query */
export interface IMediaModelArgs {
  /** Filter by the media id*/
  id?: Maybe<number>;
  /** Filter by the media's MyAnimeList id*/
  idMal?: Maybe<number>;
  /** Filter by the start date of the media*/
  startDate?: Maybe<undefined>;
  /** Filter by the end date of the media*/
  endDate?: Maybe<undefined>;
  /** Filter by the season the media was released in*/
  season?: Maybe<IMediaSeasonModel>;
  /** The year of the season (Winter 2017 would also include December 2016 releases). Requires season argument*/
  seasonYear?: Maybe<number>;
  /** Filter by the media's type*/
  type?: Maybe<IMediaTypeModel>;
  /** Filter by the media's format*/
  format?: Maybe<IMediaFormatModel>;
  /** Filter by the media's current release status*/
  status?: Maybe<IMediaStatusModel>;
  /** Filter by amount of episodes the media has*/
  episodes?: Maybe<number>;
  /** Filter by the media's episode length*/
  duration?: Maybe<number>;
  /** Filter by the media's chapter count*/
  chapters?: Maybe<number>;
  /** Filter by the media's volume count*/
  volumes?: Maybe<number>;
  /** Filter by if the media's intended for 18+ adult audiences*/
  isAdult?: Maybe<boolean>;
  /** Filter by the media's genres*/
  genre?: Maybe<string>;
  /** Filter by the media's tags*/
  tag?: Maybe<string>;
  /** Only apply the tags filter argument to tags above this rank. Default: 18*/
  minimumTagRank?: Maybe<number>;
  /** Filter by the media's tags with in a tag category*/
  tagCategory?: Maybe<string>;
  /** Filter by the media on the authenticated user's lists*/
  onList?: Maybe<boolean>;
  /** Filter media by sites with a online streaming or reading license*/
  licensedBy?: Maybe<string>;
  /** Filter by the media's average score*/
  averageScore?: Maybe<number>;
  /** Filter by the number of users with this media on their list*/
  popularity?: Maybe<number>;
  /** Filter by the source type of the media*/
  source?: Maybe<IMediaSourceModel>;
  /** Filter by the media's country of origin*/
  countryOfOrigin?: Maybe<undefined>;
  /** Filter by search query*/
  search?: Maybe<string>;
  /** Filter by the media id*/
  id_not?: Maybe<number>;
  /** Filter by the media id*/
  id_in?: Maybe<number[]>;
  /** Filter by the media id*/
  id_not_in?: Maybe<number[]>;
  /** Filter by the media's MyAnimeList id*/
  idMal_not?: Maybe<number>;
  /** Filter by the media's MyAnimeList id*/
  idMal_in?: Maybe<number[]>;
  /** Filter by the media's MyAnimeList id*/
  idMal_not_in?: Maybe<number[]>;
  /** Filter by the start date of the media*/
  startDate_greater?: Maybe<undefined>;
  /** Filter by the start date of the media*/
  startDate_lesser?: Maybe<undefined>;
  /** Filter by the start date of the media*/
  startDate_like?: Maybe<string>;
  /** Filter by the end date of the media*/
  endDate_greater?: Maybe<undefined>;
  /** Filter by the end date of the media*/
  endDate_lesser?: Maybe<undefined>;
  /** Filter by the end date of the media*/
  endDate_like?: Maybe<string>;
  /** Filter by the media's format*/
  format_in?: Maybe<IMediaFormatModel[]>;
  /** Filter by the media's format*/
  format_not?: Maybe<IMediaFormatModel>;
  /** Filter by the media's format*/
  format_not_in?: Maybe<IMediaFormatModel[]>;
  /** Filter by the media's current release status*/
  status_in?: Maybe<IMediaStatusModel[]>;
  /** Filter by the media's current release status*/
  status_not?: Maybe<IMediaStatusModel>;
  /** Filter by the media's current release status*/
  status_not_in?: Maybe<IMediaStatusModel[]>;
  /** Filter by amount of episodes the media has*/
  episodes_greater?: Maybe<number>;
  /** Filter by amount of episodes the media has*/
  episodes_lesser?: Maybe<number>;
  /** Filter by the media's episode length*/
  duration_greater?: Maybe<number>;
  /** Filter by the media's episode length*/
  duration_lesser?: Maybe<number>;
  /** Filter by the media's chapter count*/
  chapters_greater?: Maybe<number>;
  /** Filter by the media's chapter count*/
  chapters_lesser?: Maybe<number>;
  /** Filter by the media's volume count*/
  volumes_greater?: Maybe<number>;
  /** Filter by the media's volume count*/
  volumes_lesser?: Maybe<number>;
  /** Filter by the media's genres*/
  genre_in?: Maybe<string[]>;
  /** Filter by the media's genres*/
  genre_not_in?: Maybe<string[]>;
  /** Filter by the media's tags*/
  tag_in?: Maybe<string[]>;
  /** Filter by the media's tags*/
  tag_not_in?: Maybe<string[]>;
  /** Filter by the media's tags with in a tag category*/
  tagCategory_in?: Maybe<string[]>;
  /** Filter by the media's tags with in a tag category*/
  tagCategory_not_in?: Maybe<string[]>;
  /** Filter media by sites with a online streaming or reading license*/
  licensedBy_in?: Maybe<string[]>;
  /** Filter by the media's average score*/
  averageScore_not?: Maybe<number>;
  /** Filter by the media's average score*/
  averageScore_greater?: Maybe<number>;
  /** Filter by the media's average score*/
  averageScore_lesser?: Maybe<number>;
  /** Filter by the number of users with this media on their list*/
  popularity_not?: Maybe<number>;
  /** Filter by the number of users with this media on their list*/
  popularity_greater?: Maybe<number>;
  /** Filter by the number of users with this media on their list*/
  popularity_lesser?: Maybe<number>;
  /** Filter by the source type of the media*/
  source_in?: Maybe<IMediaSourceModel[]>;
  /** The order the results will be returned in*/
  sort?: Maybe<IMediaSortModel[]>;
}

/** Media Trend query */
export interface IMediaTrendModelArgs {
  /** Filter by the media id*/
  mediaId?: Maybe<number>;
  /** Filter by date*/
  date?: Maybe<number>;
  /** Filter by trending amount*/
  trending?: Maybe<number>;
  /** Filter by score*/
  averageScore?: Maybe<number>;
  /** Filter by popularity*/
  popularity?: Maybe<number>;
  /** Filter by episode number*/
  episode?: Maybe<number>;
  /** Filter to stats recorded while the media was releasing*/
  releasing?: Maybe<boolean>;
  /** Filter by the media id*/
  mediaId_not?: Maybe<number>;
  /** Filter by the media id*/
  mediaId_in?: Maybe<number[]>;
  /** Filter by the media id*/
  mediaId_not_in?: Maybe<number[]>;
  /** Filter by date*/
  date_greater?: Maybe<number>;
  /** Filter by date*/
  date_lesser?: Maybe<number>;
  /** Filter by trending amount*/
  trending_greater?: Maybe<number>;
  /** Filter by trending amount*/
  trending_lesser?: Maybe<number>;
  /** Filter by trending amount*/
  trending_not?: Maybe<number>;
  /** Filter by score*/
  averageScore_greater?: Maybe<number>;
  /** Filter by score*/
  averageScore_lesser?: Maybe<number>;
  /** Filter by score*/
  averageScore_not?: Maybe<number>;
  /** Filter by popularity*/
  popularity_greater?: Maybe<number>;
  /** Filter by popularity*/
  popularity_lesser?: Maybe<number>;
  /** Filter by popularity*/
  popularity_not?: Maybe<number>;
  /** Filter by episode number*/
  episode_greater?: Maybe<number>;
  /** Filter by episode number*/
  episode_lesser?: Maybe<number>;
  /** Filter by episode number*/
  episode_not?: Maybe<number>;
  /** The order the results will be returned in*/
  sort?: Maybe<IMediaTrendSortModel[]>;
}

/** Airing schedule query */
export interface IAiringScheduleModelArgs {
  /** Filter by the id of the airing schedule item*/
  id?: Maybe<number>;
  /** Filter by the id of associated media*/
  mediaId?: Maybe<number>;
  /** Filter by the airing episode number*/
  episode?: Maybe<number>;
  /** Filter by the time of airing*/
  airingAt?: Maybe<number>;
  /** Filter to episodes that haven't yet aired*/
  notYetAired?: Maybe<boolean>;
  /** Filter by the id of the airing schedule item*/
  id_not?: Maybe<number>;
  /** Filter by the id of the airing schedule item*/
  id_in?: Maybe<number[]>;
  /** Filter by the id of the airing schedule item*/
  id_not_in?: Maybe<number[]>;
  /** Filter by the id of associated media*/
  mediaId_not?: Maybe<number>;
  /** Filter by the id of associated media*/
  mediaId_in?: Maybe<number[]>;
  /** Filter by the id of associated media*/
  mediaId_not_in?: Maybe<number[]>;
  /** Filter by the airing episode number*/
  episode_not?: Maybe<number>;
  /** Filter by the airing episode number*/
  episode_in?: Maybe<number[]>;
  /** Filter by the airing episode number*/
  episode_not_in?: Maybe<number[]>;
  /** Filter by the airing episode number*/
  episode_greater?: Maybe<number>;
  /** Filter by the airing episode number*/
  episode_lesser?: Maybe<number>;
  /** Filter by the time of airing*/
  airingAt_greater?: Maybe<number>;
  /** Filter by the time of airing*/
  airingAt_lesser?: Maybe<number>;
  /** The order the results will be returned in*/
  sort?: Maybe<IAiringSortModel[]>;
}

/** Character query */
export interface ICharacterModelArgs {
  /** Filter by character id*/
  id?: Maybe<number>;
  /** Filter by search query*/
  search?: Maybe<string>;
  /** Filter by character id*/
  id_not?: Maybe<number>;
  /** Filter by character id*/
  id_in?: Maybe<number[]>;
  /** Filter by character id*/
  id_not_in?: Maybe<number[]>;
  /** The order the results will be returned in*/
  sort?: Maybe<ICharacterSortModel[]>;
}

/** Staff query */
export interface IStaffModelArgs {
  /** Filter by the staff id*/
  id?: Maybe<number>;
  /** Filter by search query*/
  search?: Maybe<string>;
  /** Filter by the staff id*/
  id_not?: Maybe<number>;
  /** Filter by the staff id*/
  id_in?: Maybe<number[]>;
  /** Filter by the staff id*/
  id_not_in?: Maybe<number[]>;
  /** The order the results will be returned in*/
  sort?: Maybe<IStaffSortModel[]>;
}

/** Media list query */
export interface IMediaListModelArgs {
  /** Filter by a list entry's id*/
  id?: Maybe<number>;
  /** Filter by a user's id*/
  userId?: Maybe<number>;
  /** Filter by a user's name*/
  userName?: Maybe<string>;
  /** Filter by the list entries media type*/
  type?: Maybe<IMediaTypeModel>;
  /** Filter by the watching/reading status*/
  status?: Maybe<IMediaListStatusModel>;
  /** Filter by the media id of the list entry*/
  mediaId?: Maybe<number>;
  /** Filter list entries to users who are being followed by the authenticated user*/
  isFollowing?: Maybe<boolean>;
  /** Filter by note words and #tags*/
  notes?: Maybe<string>;
  /** Filter by the date the user started the media*/
  startedAt?: Maybe<undefined>;
  /** Filter by the date the user completed the media*/
  completedAt?: Maybe<undefined>;
  /** Limit to only entries also on the auth user's list. Requires user id or name arguments.*/
  compareWithAuthList?: Maybe<boolean>;
  /** Filter by a user's id*/
  userId_in?: Maybe<number[]>;
  /** Filter by the watching/reading status*/
  status_in?: Maybe<IMediaListStatusModel[]>;
  /** Filter by the watching/reading status*/
  status_not_in?: Maybe<IMediaListStatusModel[]>;
  /** Filter by the watching/reading status*/
  status_not?: Maybe<IMediaListStatusModel>;
  /** Filter by the media id of the list entry*/
  mediaId_in?: Maybe<number[]>;
  /** Filter by the media id of the list entry*/
  mediaId_not_in?: Maybe<number[]>;
  /** Filter by note words and #tags*/
  notes_like?: Maybe<string>;
  /** Filter by the date the user started the media*/
  startedAt_greater?: Maybe<undefined>;
  /** Filter by the date the user started the media*/
  startedAt_lesser?: Maybe<undefined>;
  /** Filter by the date the user started the media*/
  startedAt_like?: Maybe<string>;
  /** Filter by the date the user completed the media*/
  completedAt_greater?: Maybe<undefined>;
  /** Filter by the date the user completed the media*/
  completedAt_lesser?: Maybe<undefined>;
  /** Filter by the date the user completed the media*/
  completedAt_like?: Maybe<string>;
  /** The order the results will be returned in*/
  sort?: Maybe<IMediaListSortModel[]>;
}

/** Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required. */
export interface IMediaListCollectionModelArgs {
  /** Filter by a user's id*/
  userId?: Maybe<number>;
  /** Filter by a user's name*/
  userName?: Maybe<string>;
  /** Filter by the list entries media type*/
  type?: Maybe<IMediaTypeModel>;
  /** Filter by the watching/reading status*/
  status?: Maybe<IMediaListStatusModel>;
  /** Filter by note words and #tags*/
  notes?: Maybe<string>;
  /** Filter by the date the user started the media*/
  startedAt?: Maybe<undefined>;
  /** Filter by the date the user completed the media*/
  completedAt?: Maybe<undefined>;
  /** Always return completed list entries in one group, overriding the user's split completed option.*/
  forceSingleCompletedList?: Maybe<boolean>;
  /** Which chunk of list entries to load*/
  chunk?: Maybe<number>;
  /** The amount of entries per chunk, max 500*/
  perChunk?: Maybe<number>;
  /** Filter by the watching/reading status*/
  status_in?: Maybe<IMediaListStatusModel[]>;
  /** Filter by the watching/reading status*/
  status_not_in?: Maybe<IMediaListStatusModel[]>;
  /** Filter by the watching/reading status*/
  status_not?: Maybe<IMediaListStatusModel>;
  /** Filter by note words and #tags*/
  notes_like?: Maybe<string>;
  /** Filter by the date the user started the media*/
  startedAt_greater?: Maybe<undefined>;
  /** Filter by the date the user started the media*/
  startedAt_lesser?: Maybe<undefined>;
  /** Filter by the date the user started the media*/
  startedAt_like?: Maybe<string>;
  /** Filter by the date the user completed the media*/
  completedAt_greater?: Maybe<undefined>;
  /** Filter by the date the user completed the media*/
  completedAt_lesser?: Maybe<undefined>;
  /** Filter by the date the user completed the media*/
  completedAt_like?: Maybe<string>;
  /** The order the results will be returned in*/
  sort?: Maybe<IMediaListSortModel[]>;
}

/** Collection of all the possible media genres */
export interface IGenreCollectionModelArgs {}

/** Collection of all the possible media tags */
export interface IMediaTagCollectionModelArgs {
  /** Mod Only*/
  status?: Maybe<number>;
}

/** User query */
export interface IUserModelArgs {
  /** Filter by the user id*/
  id?: Maybe<number>;
  /** Filter by the name of the user*/
  name?: Maybe<string>;
  /** Filter by search query*/
  search?: Maybe<string>;
  /** The order the results will be returned in*/
  sort?: Maybe<IUserSortModel[]>;
}

/** Get the currently authenticated user */
export interface IViewerModelArgs {}

/** Notification query */
export interface INotificationModelArgs {
  /** Filter by the type of notifications*/
  type?: Maybe<INotificationTypeModel>;
  /** Reset the unread notification count to 0 on load*/
  resetNotificationCount?: Maybe<boolean>;
  /** Filter by the type of notifications*/
  type_in?: Maybe<INotificationTypeModel[]>;
}

/** Studio query */
export interface IStudioModelArgs {
  /** Filter by the studio id*/
  id?: Maybe<number>;
  /** Filter by search query*/
  search?: Maybe<string>;
  /** Filter by the studio id*/
  id_not?: Maybe<number>;
  /** Filter by the studio id*/
  id_in?: Maybe<number[]>;
  /** Filter by the studio id*/
  id_not_in?: Maybe<number[]>;
  /** The order the results will be returned in*/
  sort?: Maybe<IStudioSortModel[]>;
}

/** Review query */
export interface IReviewModelArgs {
  /** Filter by Review id*/
  id?: Maybe<number>;
  /** Filter by media id*/
  mediaId?: Maybe<number>;
  /** Filter by media id*/
  userId?: Maybe<number>;
  /** Filter by media type*/
  mediaType?: Maybe<IMediaTypeModel>;
  /** The order the results will be returned in*/
  sort?: Maybe<IReviewSortModel[]>;
}

/** Activity query */
export interface IActivityModelArgs {
  /** Filter by the activity id*/
  id?: Maybe<number>;
  /** Filter by the owner user id*/
  userId?: Maybe<number>;
  /** Filter by the id of the user who sent a message*/
  messengerId?: Maybe<number>;
  /** Filter by the associated media id of the activity*/
  mediaId?: Maybe<number>;
  /** Filter by the type of activity*/
  type?: Maybe<IActivityTypeModel>;
  /** Filter activity to users who are being followed by the authenticated user*/
  isFollowing?: Maybe<boolean>;
  /** Filter activity to only activity with replies*/
  hasReplies?: Maybe<boolean>;
  /** Filter activity to only activity with replies or is of type text*/
  hasRepliesOrTypeText?: Maybe<boolean>;
  /** Filter by the time the activity was created*/
  createdAt?: Maybe<number>;
  /** Filter by the activity id*/
  id_not?: Maybe<number>;
  /** Filter by the activity id*/
  id_in?: Maybe<number[]>;
  /** Filter by the activity id*/
  id_not_in?: Maybe<number[]>;
  /** Filter by the owner user id*/
  userId_not?: Maybe<number>;
  /** Filter by the owner user id*/
  userId_in?: Maybe<number[]>;
  /** Filter by the owner user id*/
  userId_not_in?: Maybe<number[]>;
  /** Filter by the id of the user who sent a message*/
  messengerId_not?: Maybe<number>;
  /** Filter by the id of the user who sent a message*/
  messengerId_in?: Maybe<number[]>;
  /** Filter by the id of the user who sent a message*/
  messengerId_not_in?: Maybe<number[]>;
  /** Filter by the associated media id of the activity*/
  mediaId_not?: Maybe<number>;
  /** Filter by the associated media id of the activity*/
  mediaId_in?: Maybe<number[]>;
  /** Filter by the associated media id of the activity*/
  mediaId_not_in?: Maybe<number[]>;
  /** Filter by the type of activity*/
  type_not?: Maybe<IActivityTypeModel>;
  /** Filter by the type of activity*/
  type_in?: Maybe<IActivityTypeModel[]>;
  /** Filter by the type of activity*/
  type_not_in?: Maybe<IActivityTypeModel[]>;
  /** Filter by the time the activity was created*/
  createdAt_greater?: Maybe<number>;
  /** Filter by the time the activity was created*/
  createdAt_lesser?: Maybe<number>;
  /** The order the results will be returned in*/
  sort?: Maybe<IActivitySortModel[]>;
}

/** Activity reply query */
export interface IActivityReplyModelArgs {
  /** Filter by the reply id*/
  id?: Maybe<number>;
  /** Filter by the parent id*/
  activityId?: Maybe<number>;
}

/** Follow query */
export interface IFollowingModelArgs {
  /** User id of the follower/followed*/
  userId: number;
  /** The order the results will be returned in*/
  sort?: Maybe<IUserSortModel[]>;
}

/** Follow query */
export interface IFollowerModelArgs {
  /** User id of the follower/followed*/
  userId: number;
  /** The order the results will be returned in*/
  sort?: Maybe<IUserSortModel[]>;
}

/** Thread query */
export interface IThreadModelArgs {
  /** Filter by the thread id*/
  id?: Maybe<number>;
  /** Filter by the user id of the thread's creator*/
  userId?: Maybe<number>;
  /** Filter by the user id of the last user to comment on the thread*/
  replyUserId?: Maybe<number>;
  /** Filter by if the currently authenticated user's subscribed threads*/
  subscribed?: Maybe<boolean>;
  /** Filter by thread category id*/
  categoryId?: Maybe<number>;
  /** Filter by thread media id category*/
  mediaCategoryId?: Maybe<number>;
  /** Filter by search query*/
  search?: Maybe<string>;
  /** Filter by the thread id*/
  id_in?: Maybe<number[]>;
  /** The order the results will be returned in*/
  sort?: Maybe<IThreadSortModel[]>;
}

/** Comment query */
export interface IThreadCommentModelArgs {
  /** Filter by the comment id*/
  id?: Maybe<number>;
  /** Filter by the thread id*/
  threadId?: Maybe<number>;
  /** Filter by the user id of the comment's creator*/
  userId?: Maybe<number>;
  /** The order the results will be returned in*/
  sort?: Maybe<IThreadCommentSortModel[]>;
}

/** Recommendation query */
export interface IRecommendationModelArgs {
  /** Filter by recommendation id*/
  id?: Maybe<number>;
  /** Filter by media id*/
  mediaId?: Maybe<number>;
  /** Filter by media recommendation id*/
  mediaRecommendationId?: Maybe<number>;
  /** Filter by user who created the recommendation*/
  userId?: Maybe<number>;
  /** Filter by total rating of the recommendation*/
  rating?: Maybe<number>;
  /** Filter by the media on the authenticated user's lists*/
  onList?: Maybe<boolean>;
  /** Filter by total rating of the recommendation*/
  rating_greater?: Maybe<number>;
  /** Filter by total rating of the recommendation*/
  rating_lesser?: Maybe<number>;
  /** The order the results will be returned in*/
  sort?: Maybe<IRecommendationSortModel[]>;
}

/** Like query */
export interface ILikeModelArgs {
  /** The id of the likeable type*/
  likeableId?: Maybe<number>;
  /** The type of model the id applies to*/
  type?: Maybe<ILikeableTypeModel>;
}

/** Provide AniList markdown to be converted to html (Requires auth) */
export interface IMarkdownModelArgs {
  /** The markdown to be parsed to html*/
  markdown: string;
}

export interface IAniChartUserModelArgs {}

/** Site statistics query */
export interface ISiteStatisticsModelArgs {}

export interface IUpdateUserModelArgs {
  /** User's about/bio text*/
  about?: Maybe<string>;
  /** User's title language*/
  titleLanguage?: Maybe<IUserTitleLanguageModel>;
  /** If the user should see media marked as adult-only*/
  displayAdultContent?: Maybe<boolean>;
  /** If the user should get notifications when a show they are watching aires*/
  airingNotifications?: Maybe<boolean>;
  /** The user's list scoring system*/
  scoreFormat?: Maybe<IScoreFormatModel>;
  /** The user's default list order*/
  rowOrder?: Maybe<string>;
  /** Profile highlight color*/
  profileColor?: Maybe<string>;
  /** Profile highlight color*/
  donatorBadge?: Maybe<string>;
  /** Notification options*/
  notificationOptions?: Maybe<INotificationOptionInputModel[]>;
  /** The user's anime list options*/
  animeListOptions?: Maybe<IMediaListOptionsInputModel>;
  /** The user's anime list options*/
  mangaListOptions?: Maybe<IMediaListOptionsInputModel>;
}

/** Create or update a media list entry */
export interface ISaveMediaListEntryModelArgs {
  /** The list entry id, required for updating*/
  id?: Maybe<number>;
  /** The id of the media the entry is of*/
  mediaId?: Maybe<number>;
  /** The watching/reading status*/
  status?: Maybe<IMediaListStatusModel>;
  /** The score of the media in the user's chosen scoring method*/
  score?: Maybe<number>;
  /** The score of the media in 100 point*/
  scoreRaw?: Maybe<number>;
  /** The amount of episodes/chapters consumed by the user*/
  progress?: Maybe<number>;
  /** The amount of volumes read by the user*/
  progressVolumes?: Maybe<number>;
  /** The amount of times the user has rewatched/read the media*/
  repeat?: Maybe<number>;
  /** Priority of planning*/
  priority?: Maybe<number>;
  /** If the entry should only be visible to authenticated user*/
  private?: Maybe<boolean>;
  /** Text notes*/
  notes?: Maybe<string>;
  /** If the entry shown be hidden from non-custom lists*/
  hiddenFromStatusLists?: Maybe<boolean>;
  /** Array of custom list names which should be enabled for this entry*/
  customLists?: Maybe<string[]>;
  /** Array of advanced scores*/
  advancedScores?: Maybe<number[]>;
  /** When the entry was started by the user*/
  startedAt?: Maybe<IFuzzyDateInputModel>;
  /** When the entry was completed by the user*/
  completedAt?: Maybe<IFuzzyDateInputModel>;
}

/** Update multiple media list entries to the same values */
export interface IUpdateMediaListEntriesModelArgs {
  /** The watching/reading status*/
  status?: Maybe<IMediaListStatusModel>;
  /** The score of the media in the user's chosen scoring method*/
  score?: Maybe<number>;
  /** The score of the media in 100 point*/
  scoreRaw?: Maybe<number>;
  /** The amount of episodes/chapters consumed by the user*/
  progress?: Maybe<number>;
  /** The amount of volumes read by the user*/
  progressVolumes?: Maybe<number>;
  /** The amount of times the user has rewatched/read the media*/
  repeat?: Maybe<number>;
  /** Priority of planning*/
  priority?: Maybe<number>;
  /** If the entry should only be visible to authenticated user*/
  private?: Maybe<boolean>;
  /** Text notes*/
  notes?: Maybe<string>;
  /** If the entry shown be hidden from non-custom lists*/
  hiddenFromStatusLists?: Maybe<boolean>;
  /** Array of advanced scores*/
  advancedScores?: Maybe<number[]>;
  /** When the entry was started by the user*/
  startedAt?: Maybe<IFuzzyDateInputModel>;
  /** When the entry was completed by the user*/
  completedAt?: Maybe<IFuzzyDateInputModel>;
  /** The list entries ids to update*/
  ids?: Maybe<number[]>;
}

/** Delete a media list entry */
export interface IDeleteMediaListEntryModelArgs {
  /** The id of the media list entry to delete*/
  id?: Maybe<number>;
}

/** Delete a custom list and remove the list entries from it */
export interface IDeleteCustomListModelArgs {
  /** The name of the custom list to delete*/
  customList?: Maybe<string>;
  /** The media list type of the custom list*/
  type?: Maybe<IMediaTypeModel>;
}

/** Create or update text activity for the currently authenticated user */
export interface ISaveTextActivityModelArgs {
  /** The activity's id, required for updating*/
  id?: Maybe<number>;
  /** The activity text*/
  text?: Maybe<string>;
  /** If the activity should be locked. (Mod Only)*/
  locked?: Maybe<boolean>;
}

/** Create or update message activity for the currently authenticated user */
export interface ISaveMessageActivityModelArgs {
  /** The activity id, required for updating*/
  id?: Maybe<number>;
  /** The activity message text*/
  message?: Maybe<string>;
  /** The id of the user the message is being sent to*/
  recipientId?: Maybe<number>;
  /** If the activity should be private*/
  private?: Maybe<boolean>;
  /** If the activity should be locked. (Mod Only)*/
  locked?: Maybe<boolean>;
  /** If the message should be sent from the Moderator account (Mod Only)*/
  asMod?: Maybe<boolean>;
}

/** Update list activity (Mod Only) */
export interface ISaveListActivityModelArgs {
  /** The activity's id, required for updating*/
  id?: Maybe<number>;
  /** If the activity should be locked. (Mod Only)*/
  locked?: Maybe<boolean>;
}

/** Delete an activity item of the authenticated users */
export interface IDeleteActivityModelArgs {
  /** The id of the activity to delete*/
  id?: Maybe<number>;
}

/** Toggle the subscription of an activity item */
export interface IToggleActivitySubscriptionModelArgs {
  /** The id of the activity to un/subscribe*/
  activityId?: Maybe<number>;
  /** Whether to subscribe or unsubscribe from the activity*/
  subscribe?: Maybe<boolean>;
}

/** Create or update an activity reply */
export interface ISaveActivityReplyModelArgs {
  /** The activity reply id, required for updating*/
  id?: Maybe<number>;
  /** The id of the parent activity being replied to*/
  activityId?: Maybe<number>;
  /** The reply text*/
  text?: Maybe<string>;
  /** If the reply should be sent from the Moderator account (Mod Only)*/
  asMod?: Maybe<boolean>;
}

/** Delete an activity reply of the authenticated users */
export interface IDeleteActivityReplyModelArgs {
  /** The id of the reply to delete*/
  id?: Maybe<number>;
}

/** Add or remove a like from a likeable type.
                          Returns all the users who liked the same model */
export interface IToggleLikeModelArgs {
  /** The id of the likeable type*/
  id?: Maybe<number>;
  /** The type of model to be un/liked*/
  type?: Maybe<ILikeableTypeModel>;
}

/** Add or remove a like from a likeable type. */
export interface IToggleLikeV2ModelArgs {
  /** The id of the likeable type*/
  id?: Maybe<number>;
  /** The type of model to be un/liked*/
  type?: Maybe<ILikeableTypeModel>;
}

/** Toggle the un/following of a user */
export interface IToggleFollowModelArgs {
  /** The id of the user to un/follow*/
  userId?: Maybe<number>;
}

/** Favourite or unfavourite an anime, manga, character, staff member, or studio */
export interface IToggleFavouriteModelArgs {
  /** The id of the anime to un/favourite*/
  animeId?: Maybe<number>;
  /** The id of the manga to un/favourite*/
  mangaId?: Maybe<number>;
  /** The id of the character to un/favourite*/
  characterId?: Maybe<number>;
  /** The id of the staff to un/favourite*/
  staffId?: Maybe<number>;
  /** The id of the studio to un/favourite*/
  studioId?: Maybe<number>;
}

/** Update the order favourites are displayed in */
export interface IUpdateFavouriteOrderModelArgs {
  /** The id of the anime to un/favourite*/
  animeIds?: Maybe<number[]>;
  /** The id of the manga to un/favourite*/
  mangaIds?: Maybe<number[]>;
  /** The id of the character to un/favourite*/
  characterIds?: Maybe<number[]>;
  /** The id of the staff to un/favourite*/
  staffIds?: Maybe<number[]>;
  /** The id of the studio to un/favourite*/
  studioIds?: Maybe<number[]>;
  /** List of integers which the anime should be ordered by (Asc)*/
  animeOrder?: Maybe<number[]>;
  /** List of integers which the manga should be ordered by (Asc)*/
  mangaOrder?: Maybe<number[]>;
  /** List of integers which the character should be ordered by (Asc)*/
  characterOrder?: Maybe<number[]>;
  /** List of integers which the staff should be ordered by (Asc)*/
  staffOrder?: Maybe<number[]>;
  /** List of integers which the studio should be ordered by (Asc)*/
  studioOrder?: Maybe<number[]>;
}

/** Create or update a review */
export interface ISaveReviewModelArgs {
  /** The review id, required for updating*/
  id?: Maybe<number>;
  /** The id of the media the review is of*/
  mediaId?: Maybe<number>;
  /** The main review text. Min:2200 characters*/
  body?: Maybe<string>;
  /** A short summary/preview of the review. Min:20, Max:120 characters*/
  summary?: Maybe<string>;
  /** A short summary/preview of the review. Min:20, Max:120 characters*/
  score?: Maybe<number>;
  /** If the review should only be visible to its creator*/
  private?: Maybe<boolean>;
}

/** Delete a review */
export interface IDeleteReviewModelArgs {
  /** The id of the review to delete*/
  id?: Maybe<number>;
}

/** Rate a review */
export interface IRateReviewModelArgs {
  /** The id of the review to rate*/
  reviewId?: Maybe<number>;
  /** The rating to apply to the review*/
  rating?: Maybe<IReviewRatingModel>;
}

/** Recommendation a media */
export interface ISaveRecommendationModelArgs {
  /** The id of the base media*/
  mediaId?: Maybe<number>;
  /** The id of the media to recommend*/
  mediaRecommendationId?: Maybe<number>;
  /** The rating to give the recommendation*/
  rating?: Maybe<IRecommendationRatingModel>;
}

/** Create or update a forum thread */
export interface ISaveThreadModelArgs {
  /** The thread id, required for updating*/
  id?: Maybe<number>;
  /** The title of the thread*/
  title?: Maybe<string>;
  /** The main text body of the thread*/
  body?: Maybe<string>;
  /** Forum categories the thread should be within*/
  categories?: Maybe<number[]>;
  /** Media related to the contents of the thread*/
  mediaCategories?: Maybe<number[]>;
  /** If the thread should be stickied. (Mod Only)*/
  sticky?: Maybe<boolean>;
  /** If the thread should be locked. (Mod Only)*/
  locked?: Maybe<boolean>;
}

/** Delete a thread */
export interface IDeleteThreadModelArgs {
  /** The id of the thread to delete*/
  id?: Maybe<number>;
}

/** Toggle the subscription of a forum thread */
export interface IToggleThreadSubscriptionModelArgs {
  /** The id of the forum thread to un/subscribe*/
  threadId?: Maybe<number>;
  /** Whether to subscribe or unsubscribe from the forum thread*/
  subscribe?: Maybe<boolean>;
}

/** Create or update a thread comment */
export interface ISaveThreadCommentModelArgs {
  /** The comment id, required for updating*/
  id?: Maybe<number>;
  /** The id of thread the comment belongs to*/
  threadId?: Maybe<number>;
  /** The id of thread comment to reply to*/
  parentCommentId?: Maybe<number>;
  /** The comment markdown text*/
  comment?: Maybe<string>;
}

/** Delete a thread comment */
export interface IDeleteThreadCommentModelArgs {
  /** The id of the thread comment to delete*/
  id?: Maybe<number>;
}

export interface IUpdateAniChartSettingsModelArgs {
  titleLanguage?: Maybe<string>;
  outgoingLinkProvider?: Maybe<string>;
  theme?: Maybe<string>;
  sort?: Maybe<string>;
}

export interface IUpdateAniChartHighlightsModelArgs {
  highlights?: Maybe<IAniChartHighlightInputModel[]>;
}

import { OperationDefinitionNode } from 'graphql';
import sgtsQL, { DocumentNode } from 'graphql-tag';

const guessFragmentType = (fragment: string | DocumentNode) => {
  let isString,
    isFragment = false;
  let fragmentName = '';
  if (typeof fragment === 'string') {
    isString = true;
  } else if (typeof fragment === 'object' && fragment.definitions.length) {
    isFragment = true;
    const definition = fragment.definitions[0];
    if (definition.kind === 'FragmentDefinition') {
      fragmentName = definition.name.value;
    } else {
      console.error(
        \`The argument passed is not a fragment definition, got \${definition.kind} instead\`
      );
      return;
    }
  }
  return { isString, isFragment, fragmentName };
};

import { Ref } from '@vue/composition-api';
import {
  useMutation,
  useQuery,
  useSubscription,
  UseQueryOptions,
  UseMutationOptions,
  UseSubscriptionOptions,
} from '@vue/apollo-composable';
export type ReactiveFunction<TParam> = () => TParam;

export const PageFragment = sgtsQL\` 
  fragment PageFragment on Page {
    pageInfo {total perPage currentPage lastPage hasNextPage } users {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } notifications {} activities {} activityReplies {id userId activityId text likeCount isLiked createdAt } threads {id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt siteUrl categories {id name } } threadComments {id userId threadId comment likeCount isLiked siteUrl createdAt updatedAt childComments } 
  }
\`;
export const PageInfoFragment = sgtsQL\` 
  fragment PageInfoFragment on PageInfo {
    total perPage currentPage lastPage hasNextPage 
  }
\`;
export const UserFragment = sgtsQL\` 
  fragment UserFragment on User {
    id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } 
  }
\`;
export const UserAvatarFragment = sgtsQL\` 
  fragment UserAvatarFragment on UserAvatar {
    large medium 
  }
\`;
export const UserOptionsFragment = sgtsQL\` 
  fragment UserOptionsFragment on UserOptions {
    titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } 
  }
\`;
export const NotificationOptionFragment = sgtsQL\` 
  fragment NotificationOptionFragment on NotificationOption {
    type enabled 
  }
\`;
export const MediaListOptionsFragment = sgtsQL\` 
  fragment MediaListOptionsFragment on MediaListOptions {
    scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled 
  }
\`;
export const MediaListTypeOptionsFragment = sgtsQL\` 
  fragment MediaListTypeOptionsFragment on MediaListTypeOptions {
    sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled 
  }
\`;
export const FavouritesFragment = sgtsQL\` 
  fragment FavouritesFragment on Favourites {
    anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds studio {id name isAnimationStudio siteUrl isFavourite favourites } } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } 
  }
\`;
export const MediaConnectionFragment = sgtsQL\` 
  fragment MediaConnectionFragment on MediaConnection {
    edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } 
  }
\`;
export const MediaEdgeFragment = sgtsQL\` 
  fragment MediaEdgeFragment on MediaEdge {
    node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {pageInfo {total perPage currentPage lastPage hasNextPage } } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder 
  }
\`;
export const MediaFragment = sgtsQL\` 
  fragment MediaFragment on Media {
    id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes 
  }
\`;
export const MediaTitleFragment = sgtsQL\` 
  fragment MediaTitleFragment on MediaTitle {
    romaji english native userPreferred 
  }
\`;
export const FuzzyDateFragment = sgtsQL\` 
  fragment FuzzyDateFragment on FuzzyDate {
    year month day 
  }
\`;
export const MediaTrailerFragment = sgtsQL\` 
  fragment MediaTrailerFragment on MediaTrailer {
    id site thumbnail 
  }
\`;
export const MediaCoverImageFragment = sgtsQL\` 
  fragment MediaCoverImageFragment on MediaCoverImage {
    extraLarge large medium color 
  }
\`;
export const MediaTagFragment = sgtsQL\` 
  fragment MediaTagFragment on MediaTag {
    id name description category rank isGeneralSpoiler isMediaSpoiler isAdult 
  }
\`;
export const CharacterConnectionFragment = sgtsQL\` 
  fragment CharacterConnectionFragment on CharacterConnection {
    edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } staff {edges {node {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } id role favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes } id role favouriteOrder } 
  }
\`;
export const CharacterEdgeFragment = sgtsQL\` 
  fragment CharacterEdgeFragment on CharacterEdge {
    node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {node {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } id role favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes } id role favouriteOrder 
  }
\`;
export const CharacterFragment = sgtsQL\` 
  fragment CharacterFragment on Character {
    id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes 
  }
\`;
export const CharacterNameFragment = sgtsQL\` 
  fragment CharacterNameFragment on CharacterName {
    first last full native alternative 
  }
\`;
export const CharacterImageFragment = sgtsQL\` 
  fragment CharacterImageFragment on CharacterImage {
    large medium 
  }
\`;
export const StaffFragment = sgtsQL\` 
  fragment StaffFragment on Staff {
    id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes 
  }
\`;
export const StaffNameFragment = sgtsQL\` 
  fragment StaffNameFragment on StaffName {
    first last full native alternative 
  }
\`;
export const StaffImageFragment = sgtsQL\` 
  fragment StaffImageFragment on StaffImage {
    large medium 
  }
\`;
export const StaffConnectionFragment = sgtsQL\` 
  fragment StaffConnectionFragment on StaffConnection {
    edges {node {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } id role favouriteOrder } 
  }
\`;
export const StaffEdgeFragment = sgtsQL\` 
  fragment StaffEdgeFragment on StaffEdge {
    node {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {} studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } id role favouriteOrder 
  }
\`;
export const StudioConnectionFragment = sgtsQL\` 
  fragment StudioConnectionFragment on StudioConnection {
    edges {node {id name isAnimationStudio media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } siteUrl isFavourite favourites } id isMain favouriteOrder } 
  }
\`;
export const StudioEdgeFragment = sgtsQL\` 
  fragment StudioEdgeFragment on StudioEdge {
    node {id name isAnimationStudio media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {} } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } siteUrl isFavourite favourites } id isMain favouriteOrder 
  }
\`;
export const StudioFragment = sgtsQL\` 
  fragment StudioFragment on Studio {
    id name isAnimationStudio media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } siteUrl isFavourite favourites 
  }
\`;
export const AiringScheduleFragment = sgtsQL\` 
  fragment AiringScheduleFragment on AiringSchedule {
    id airingAt timeUntilAiring episode mediaId media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } 
  }
\`;
export const AiringScheduleConnectionFragment = sgtsQL\` 
  fragment AiringScheduleConnectionFragment on AiringScheduleConnection {
    edges {node {id airingAt timeUntilAiring episode mediaId media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } } id } 
  }
\`;
export const AiringScheduleEdgeFragment = sgtsQL\` 
  fragment AiringScheduleEdgeFragment on AiringScheduleEdge {
    node {id airingAt timeUntilAiring episode mediaId media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult airingSchedule {} trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } } id 
  }
\`;
export const MediaTrendConnectionFragment = sgtsQL\` 
  fragment MediaTrendConnectionFragment on MediaTrendConnection {
    edges {node {mediaId date trending averageScore popularity inProgress releasing episode media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } } } 
  }
\`;
export const MediaTrendEdgeFragment = sgtsQL\` 
  fragment MediaTrendEdgeFragment on MediaTrendEdge {
    node {mediaId date trending averageScore popularity inProgress releasing episode media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {} externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } } 
  }
\`;
export const MediaTrendFragment = sgtsQL\` 
  fragment MediaTrendFragment on MediaTrend {
    mediaId date trending averageScore popularity inProgress releasing episode media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {} } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } 
  }
\`;
export const MediaExternalLinkFragment = sgtsQL\` 
  fragment MediaExternalLinkFragment on MediaExternalLink {
    id url site 
  }
\`;
export const MediaStreamingEpisodeFragment = sgtsQL\` 
  fragment MediaStreamingEpisodeFragment on MediaStreamingEpisode {
    title thumbnail url site 
  }
\`;
export const MediaRankFragment = sgtsQL\` 
  fragment MediaRankFragment on MediaRank {
    id rank type format year season allTime context 
  }
\`;
export const MediaListFragment = sgtsQL\` 
  fragment MediaListFragment on MediaList {
    id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores startedAt {year month day } updatedAt createdAt media {id idMal title {romaji english native userPreferred } type format status description season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } 
  }
\`;
export const ReviewConnectionFragment = sgtsQL\` 
  fragment ReviewConnectionFragment on ReviewConnection {
    edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } } 
  }
\`;
export const ReviewEdgeFragment = sgtsQL\` 
  fragment ReviewEdgeFragment on ReviewEdge {
    node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {} recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } 
  }
\`;
export const ReviewFragment = sgtsQL\` 
  fragment ReviewFragment on Review {
    id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {} } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } 
  }
\`;
export const RecommendationConnectionFragment = sgtsQL\` 
  fragment RecommendationConnectionFragment on RecommendationConnection {
    edges {node {id rating userRating media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } } } 
  }
\`;
export const RecommendationEdgeFragment = sgtsQL\` 
  fragment RecommendationEdgeFragment on RecommendationEdge {
    node {id rating userRating media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {} stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } } 
  }
\`;
export const RecommendationFragment = sgtsQL\` 
  fragment RecommendationFragment on Recommendation {
    id rating userRating media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {} } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } 
  }
\`;
export const MediaStatsFragment = sgtsQL\` 
  fragment MediaStatsFragment on MediaStats {
    scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } 
  }
\`;
export const ScoreDistributionFragment = sgtsQL\` 
  fragment ScoreDistributionFragment on ScoreDistribution {
    score amount 
  }
\`;
export const StatusDistributionFragment = sgtsQL\` 
  fragment StatusDistributionFragment on StatusDistribution {
    status amount 
  }
\`;
export const AiringProgressionFragment = sgtsQL\` 
  fragment AiringProgressionFragment on AiringProgression {
    episode score watching 
  }
\`;
export const UserStatisticTypesFragment = sgtsQL\` 
  fragment UserStatisticTypesFragment on UserStatisticTypes {
    anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds tag {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds voiceActor {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } 
  }
\`;
export const UserStatisticsFragment = sgtsQL\` 
  fragment UserStatisticsFragment on UserStatistics {
    count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds tag {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds voiceActor {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {} unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } 
  }
\`;
export const UserFormatStatisticFragment = sgtsQL\` 
  fragment UserFormatStatisticFragment on UserFormatStatistic {
    count meanScore minutesWatched chaptersRead mediaIds format 
  }
\`;
export const UserStatusStatisticFragment = sgtsQL\` 
  fragment UserStatusStatisticFragment on UserStatusStatistic {
    count meanScore minutesWatched chaptersRead mediaIds status 
  }
\`;
export const UserScoreStatisticFragment = sgtsQL\` 
  fragment UserScoreStatisticFragment on UserScoreStatistic {
    count meanScore minutesWatched chaptersRead mediaIds score 
  }
\`;
export const UserLengthStatisticFragment = sgtsQL\` 
  fragment UserLengthStatisticFragment on UserLengthStatistic {
    count meanScore minutesWatched chaptersRead mediaIds length 
  }
\`;
export const UserReleaseYearStatisticFragment = sgtsQL\` 
  fragment UserReleaseYearStatisticFragment on UserReleaseYearStatistic {
    count meanScore minutesWatched chaptersRead mediaIds releaseYear 
  }
\`;
export const UserStartYearStatisticFragment = sgtsQL\` 
  fragment UserStartYearStatisticFragment on UserStartYearStatistic {
    count meanScore minutesWatched chaptersRead mediaIds startYear 
  }
\`;
export const UserGenreStatisticFragment = sgtsQL\` 
  fragment UserGenreStatisticFragment on UserGenreStatistic {
    count meanScore minutesWatched chaptersRead mediaIds genre 
  }
\`;
export const UserTagStatisticFragment = sgtsQL\` 
  fragment UserTagStatisticFragment on UserTagStatistic {
    count meanScore minutesWatched chaptersRead mediaIds tag {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } 
  }
\`;
export const UserCountryStatisticFragment = sgtsQL\` 
  fragment UserCountryStatisticFragment on UserCountryStatistic {
    count meanScore minutesWatched chaptersRead mediaIds country 
  }
\`;
export const UserVoiceActorStatisticFragment = sgtsQL\` 
  fragment UserVoiceActorStatisticFragment on UserVoiceActorStatistic {
    count meanScore minutesWatched chaptersRead mediaIds voiceActor {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } characterIds 
  }
\`;
export const UserStaffStatisticFragment = sgtsQL\` 
  fragment UserStaffStatisticFragment on UserStaffStatistic {
    count meanScore minutesWatched chaptersRead mediaIds staff {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } 
  }
\`;
export const UserStudioStatisticFragment = sgtsQL\` 
  fragment UserStudioStatisticFragment on UserStudioStatistic {
    count meanScore minutesWatched chaptersRead mediaIds studio {id name isAnimationStudio media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } siteUrl isFavourite favourites } 
  }
\`;
export const UserStatsFragment = sgtsQL\` 
  fragment UserStatsFragment on UserStats {
    watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {tag {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } amount meanScore timeWatched } favouredActors {staff {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } 
  }
\`;
export const UserActivityHistoryFragment = sgtsQL\` 
  fragment UserActivityHistoryFragment on UserActivityHistory {
    date amount level 
  }
\`;
export const ListScoreStatsFragment = sgtsQL\` 
  fragment ListScoreStatsFragment on ListScoreStats {
    meanScore standardDeviation 
  }
\`;
export const GenreStatsFragment = sgtsQL\` 
  fragment GenreStatsFragment on GenreStats {
    genre amount meanScore timeWatched 
  }
\`;
export const TagStatsFragment = sgtsQL\` 
  fragment TagStatsFragment on TagStats {
    tag {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } amount meanScore timeWatched 
  }
\`;
export const StaffStatsFragment = sgtsQL\` 
  fragment StaffStatsFragment on StaffStats {
    staff {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } amount meanScore timeWatched 
  }
\`;
export const StudioStatsFragment = sgtsQL\` 
  fragment StudioStatsFragment on StudioStats {
    studio {id name isAnimationStudio media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } siteUrl isFavourite favourites } amount meanScore timeWatched 
  }
\`;
export const YearStatsFragment = sgtsQL\` 
  fragment YearStatsFragment on YearStats {
    year amount meanScore 
  }
\`;
export const FormatStatsFragment = sgtsQL\` 
  fragment FormatStatsFragment on FormatStats {
    format amount 
  }
\`;
export const AiringNotificationFragment = sgtsQL\` 
  fragment AiringNotificationFragment on AiringNotification {
    id type animeId episode contexts createdAt media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } 
  }
\`;
export const FollowingNotificationFragment = sgtsQL\` 
  fragment FollowingNotificationFragment on FollowingNotification {
    id userId type context createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } 
  }
\`;
export const ActivityMessageNotificationFragment = sgtsQL\` 
  fragment ActivityMessageNotificationFragment on ActivityMessageNotification {
    id userId type activityId context createdAt message {id recipientId messengerId type replyCount message isLocked isSubscribed likeCount isLiked isPrivate siteUrl createdAt recipient {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } replies {id userId activityId text likeCount isLiked createdAt } } 
  }
\`;
export const MessageActivityFragment = sgtsQL\` 
  fragment MessageActivityFragment on MessageActivity {
    id recipientId messengerId type replyCount message isLocked isSubscribed likeCount isLiked isPrivate siteUrl createdAt recipient {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } replies {id userId activityId text likeCount isLiked createdAt } 
  }
\`;
export const ActivityReplyFragment = sgtsQL\` 
  fragment ActivityReplyFragment on ActivityReply {
    id userId activityId text likeCount isLiked createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } 
  }
\`;
export const ActivityMentionNotificationFragment = sgtsQL\` 
  fragment ActivityMentionNotificationFragment on ActivityMentionNotification {
    id userId type activityId context createdAt activity {} user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } 
  }
\`;
export const TextActivityFragment = sgtsQL\` 
  fragment TextActivityFragment on TextActivity {
    id userId type replyCount text siteUrl isLocked isSubscribed likeCount isLiked createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } replies {id userId activityId text likeCount isLiked createdAt } 
  }
\`;
export const ListActivityFragment = sgtsQL\` 
  fragment ListActivityFragment on ListActivity {
    id userId type replyCount status progress isLocked isSubscribed likeCount isLiked siteUrl createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } replies {id userId activityId text likeCount isLiked createdAt } 
  }
\`;
export const ActivityReplyNotificationFragment = sgtsQL\` 
  fragment ActivityReplyNotificationFragment on ActivityReplyNotification {
    id userId type activityId context createdAt activity {} user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } 
  }
\`;
export const ActivityReplySubscribedNotificationFragment = sgtsQL\` 
  fragment ActivityReplySubscribedNotificationFragment on ActivityReplySubscribedNotification {
    id userId type activityId context createdAt activity {} user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } 
  }
\`;
export const ActivityLikeNotificationFragment = sgtsQL\` 
  fragment ActivityLikeNotificationFragment on ActivityLikeNotification {
    id userId type activityId context createdAt activity {} user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } 
  }
\`;
export const ActivityReplyLikeNotificationFragment = sgtsQL\` 
  fragment ActivityReplyLikeNotificationFragment on ActivityReplyLikeNotification {
    id userId type activityId context createdAt activity {} user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } 
  }
\`;
export const ThreadCommentMentionNotificationFragment = sgtsQL\` 
  fragment ThreadCommentMentionNotificationFragment on ThreadCommentMentionNotification {
    id userId type commentId context createdAt thread {id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } siteUrl categories {id name } } comment {id userId threadId comment likeCount isLiked siteUrl createdAt updatedAt childComments } 
  }
\`;
export const ThreadFragment = sgtsQL\` 
  fragment ThreadFragment on Thread {
    id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } siteUrl categories {id name } 
  }
\`;
export const ThreadCategoryFragment = sgtsQL\` 
  fragment ThreadCategoryFragment on ThreadCategory {
    id name 
  }
\`;
export const ThreadCommentFragment = sgtsQL\` 
  fragment ThreadCommentFragment on ThreadComment {
    id userId threadId comment likeCount isLiked siteUrl createdAt updatedAt thread {id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } siteUrl categories {id name } } childComments 
  }
\`;
export const ThreadCommentReplyNotificationFragment = sgtsQL\` 
  fragment ThreadCommentReplyNotificationFragment on ThreadCommentReplyNotification {
    id userId type commentId context createdAt thread {id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } siteUrl categories {id name } } comment {id userId threadId comment likeCount isLiked siteUrl createdAt updatedAt childComments } 
  }
\`;
export const ThreadCommentSubscribedNotificationFragment = sgtsQL\` 
  fragment ThreadCommentSubscribedNotificationFragment on ThreadCommentSubscribedNotification {
    id userId type commentId context createdAt thread {id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } siteUrl categories {id name } } comment {id userId threadId comment likeCount isLiked siteUrl createdAt updatedAt childComments } 
  }
\`;
export const ThreadCommentLikeNotificationFragment = sgtsQL\` 
  fragment ThreadCommentLikeNotificationFragment on ThreadCommentLikeNotification {
    id userId type commentId context createdAt thread {id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } siteUrl categories {id name } } comment {id userId threadId comment likeCount isLiked siteUrl createdAt updatedAt childComments } 
  }
\`;
export const ThreadLikeNotificationFragment = sgtsQL\` 
  fragment ThreadLikeNotificationFragment on ThreadLikeNotification {
    id userId type threadId context createdAt thread {id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } siteUrl categories {id name } } comment {id userId threadId comment likeCount isLiked siteUrl createdAt updatedAt childComments } 
  }
\`;
export const RelatedMediaAdditionNotificationFragment = sgtsQL\` 
  fragment RelatedMediaAdditionNotificationFragment on RelatedMediaAdditionNotification {
    id type mediaId context createdAt media {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } 
  }
\`;
export const MediaListCollectionFragment = sgtsQL\` 
  fragment MediaListCollectionFragment on MediaListCollection {
    lists {entries {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores startedAt {year month day } updatedAt createdAt media {id idMal title {romaji english native userPreferred } type format status description season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } } name isCustomList isSplitCompletedList status } hasNextChunk 
  }
\`;
export const MediaListGroupFragment = sgtsQL\` 
  fragment MediaListGroupFragment on MediaListGroup {
    entries {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores startedAt {year month day } updatedAt createdAt media {id idMal title {romaji english native userPreferred } type format status description season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } relations {edges {id relationType isMainStudio characters {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } characterRole staffRole voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl characters {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } } name isCustomList isSplitCompletedList status 
  }
\`;
export const ParsedMarkdownFragment = sgtsQL\` 
  fragment ParsedMarkdownFragment on ParsedMarkdown {
    html 
  }
\`;
export const AniChartUserFragment = sgtsQL\` 
  fragment AniChartUserFragment on AniChartUser {
    user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } settings highlights 
  }
\`;
export const SiteStatisticsFragment = sgtsQL\` 
  fragment SiteStatisticsFragment on SiteStatistics {
    users {edges {node {date count change } } pageInfo {total perPage currentPage lastPage hasNextPage } } 
  }
\`;
export const SiteTrendConnectionFragment = sgtsQL\` 
  fragment SiteTrendConnectionFragment on SiteTrendConnection {
    edges {node {date count change } } pageInfo {total perPage currentPage lastPage hasNextPage } 
  }
\`;
export const SiteTrendEdgeFragment = sgtsQL\` 
  fragment SiteTrendEdgeFragment on SiteTrendEdge {
    node {date count change } 
  }
\`;
export const SiteTrendFragment = sgtsQL\` 
  fragment SiteTrendFragment on SiteTrend {
    date count change 
  }
\`;
export const DeletedFragment = sgtsQL\` 
  fragment DeletedFragment on Deleted {
    deleted 
  }
\`;
export const InternalPageFragment = sgtsQL\` 
  fragment InternalPageFragment on InternalPage {
    mediaSubmissions {id submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } status submitterStats notes source changes characters {submission {id characterRole staffRole isMain } character {id role } } createdAt } characterSubmissions {id status notes source createdAt } staffSubmissions {id status notes source createdAt } revisionHistory {id action changes createdAt } reports {id reason createdAt } modActions {id type objectId objectType data createdAt } notifications {} activities {} activityReplies {id userId activityId text likeCount isLiked createdAt } threads {id title body userId replyUserId replyCommentId replyCount viewCount isLocked isSticky isSubscribed likeCount isLiked repliedAt createdAt updatedAt siteUrl categories {id name } } threadComments {id userId threadId comment likeCount isLiked siteUrl createdAt updatedAt childComments } 
  }
\`;
export const MediaSubmissionFragment = sgtsQL\` 
  fragment MediaSubmissionFragment on MediaSubmission {
    id submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } status submitterStats notes source changes characters {submission {id characterRole staffRole isMain } character {id role } } createdAt 
  }
\`;
export const MediaSubmissionComparisonFragment = sgtsQL\` 
  fragment MediaSubmissionComparisonFragment on MediaSubmissionComparison {
    submission {id characterRole staffRole isMain character {id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes } } character {id role } 
  }
\`;
export const MediaSubmissionEdgeFragment = sgtsQL\` 
  fragment MediaSubmissionEdgeFragment on MediaSubmissionEdge {
    id characterRole staffRole isMain character {id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes } 
  }
\`;
export const MediaCharacterFragment = sgtsQL\` 
  fragment MediaCharacterFragment on MediaCharacter {
    id role character {id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes } 
  }
\`;
export const CharacterSubmissionFragment = sgtsQL\` 
  fragment CharacterSubmissionFragment on CharacterSubmission {
    id character {id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes } status notes source createdAt 
  }
\`;
export const StaffSubmissionFragment = sgtsQL\` 
  fragment StaffSubmissionFragment on StaffSubmission {
    id staff {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl staffMedia {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {} statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt submissionStatus submissionNotes favourites modNotes } status notes source createdAt 
  }
\`;
export const RevisionHistoryFragment = sgtsQL\` 
  fragment RevisionHistoryFragment on RevisionHistory {
    id action changes user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } createdAt 
  }
\`;
export const ReportFragment = sgtsQL\` 
  fragment ReportFragment on Report {
    id reporter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } reason createdAt 
  }
\`;
export const ModActionFragment = sgtsQL\` 
  fragment ModActionFragment on ModAction {
    id user {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } type objectId objectType data createdAt 
  }
\`;
export const CharacterSubmissionConnectionFragment = sgtsQL\` 
  fragment CharacterSubmissionConnectionFragment on CharacterSubmissionConnection {
    edges {node {id character {id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes } status notes source createdAt } role submittedVoiceActors {id status notes source createdAt } } 
  }
\`;
export const CharacterSubmissionEdgeFragment = sgtsQL\` 
  fragment CharacterSubmissionEdgeFragment on CharacterSubmissionEdge {
    node {id character {id name {first last full native alternative } image {large medium } description isFavourite siteUrl media {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submitter {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {staff {edges {id role favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeStatusDistribution {status amount } animeScoreDistribution {score amount } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } submissionStatus submissionNotes favourites modNotes } favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } updatedAt favourites modNotes } status notes source createdAt } role submittedVoiceActors {id status notes source createdAt } 
  }
\`;
export const UserModDataFragment = sgtsQL\` 
  fragment UserModDataFragment on UserModData {
    alts {id name about avatar {large medium } bannerImage isFollowing isFollower isBlocked bans options {titleLanguage displayAdultContent airingNotifications profileColor notificationOptions {type enabled } } mediaListOptions {scoreFormat rowOrder useLegacyLists animeList {sectionOrder splitCompletedSectionByFormat theme customLists advancedScoring advancedScoringEnabled } sharedTheme sharedThemeEnabled } favourites {anime {edges {node {id idMal title {romaji english native userPreferred } type format status description startDate {year month day } season seasonYear seasonInt episodes duration chapters volumes countryOfOrigin isLicensed source hashtag trailer {id site thumbnail } updatedAt coverImage {extraLarge large medium color } bannerImage genres synonyms averageScore meanScore popularity isLocked trending favourites tags {id name description category rank isGeneralSpoiler isMediaSpoiler isAdult } characters {edges {node {id name {first last full native alternative } image {large medium } description isFavourite siteUrl updatedAt favourites modNotes } id role voiceActors {id name {first last full native alternative } language image {large medium } description isFavourite siteUrl updatedAt submissionStatus submissionNotes favourites modNotes } favouriteOrder } pageInfo {total perPage currentPage lastPage hasNextPage } } staff {edges {id role favouriteOrder } } studios {edges {node {id name isAnimationStudio siteUrl isFavourite favourites } id isMain favouriteOrder } } isFavourite isAdult nextAiringEpisode {id airingAt timeUntilAiring episode mediaId } airingSchedule {edges {id } } trends {edges {node {mediaId date trending averageScore popularity inProgress releasing episode } } } externalLinks {id url site } streamingEpisodes {title thumbnail url site } rankings {id rank type format year season allTime context } mediaListEntry {id userId mediaId status score progress progressVolumes repeat priority private notes hiddenFromStatusLists customLists advancedScores updatedAt createdAt } reviews {edges {node {id userId mediaId mediaType summary body rating ratingAmount userRating score private siteUrl createdAt updatedAt } } } recommendations {edges {node {id rating userRating } } } stats {scoreDistribution {score amount } statusDistribution {status amount } airingProgression {episode score watching } } siteUrl autoCreateForumThread isRecommendationBlocked modNotes } id relationType isMainStudio characterRole staffRole favouriteOrder } } } statistics {anime {count meanScore standardDeviation minutesWatched episodesWatched chaptersRead volumesRead formats {count meanScore minutesWatched chaptersRead mediaIds format } statuses {count meanScore minutesWatched chaptersRead mediaIds status } scores {count meanScore minutesWatched chaptersRead mediaIds score } lengths {count meanScore minutesWatched chaptersRead mediaIds length } releaseYears {count meanScore minutesWatched chaptersRead mediaIds releaseYear } startYears {count meanScore minutesWatched chaptersRead mediaIds startYear } genres {count meanScore minutesWatched chaptersRead mediaIds genre } tags {count meanScore minutesWatched chaptersRead mediaIds } countries {count meanScore minutesWatched chaptersRead mediaIds country } voiceActors {count meanScore minutesWatched chaptersRead mediaIds characterIds } staff {count meanScore minutesWatched chaptersRead mediaIds } studios {count meanScore minutesWatched chaptersRead mediaIds } } } unreadNotificationCount siteUrl donatorTier donatorBadge moderatorStatus updatedAt stats {watchedTime chaptersRead activityHistory {date amount level } animeListScores {meanScore standardDeviation } favouredGenresOverview {genre amount meanScore timeWatched } favouredTags {amount meanScore timeWatched } favouredActors {amount meanScore timeWatched } favouredStudios {amount meanScore timeWatched } favouredYears {year amount meanScore } favouredFormats {format amount } } } bans ip counts 
  }
\`;

export const usePage = (
  fragment: string | DocumentNode,
  variables?: IPageModelArgs | Ref<IPageModelArgs> | ReactiveFunction<IPageModelArgs>,
  options?:
    | UseQueryOptions<{ Page: IPageModel; IPageModelArgs }>
    | Ref<UseQueryOptions<{ Page: IPageModel; IPageModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Page: IPageModel; IPageModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Page ($page: Int,$perPage: Int) {
        Page(page: $page,perPage: $perPage) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Page: IPageModel; IPageModelArgs }>(query, variables, options);
};

/** Media query */
export const useMedia = (
  fragment: string | DocumentNode,
  variables?: IMediaModelArgs | Ref<IMediaModelArgs> | ReactiveFunction<IMediaModelArgs>,
  options?:
    | UseQueryOptions<{ Media: IMediaModel; IMediaModelArgs }>
    | Ref<UseQueryOptions<{ Media: IMediaModel; IMediaModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Media: IMediaModel; IMediaModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Media ($id: Int,$idMal: Int,$startDate: FuzzyDateInt,$endDate: FuzzyDateInt,$season: MediaSeason,$seasonYear: Int,$type: MediaType,$format: MediaFormat,$status: MediaStatus,$episodes: Int,$duration: Int,$chapters: Int,$volumes: Int,$isAdult: Boolean,$genre: String,$tag: String,$minimumTagRank: Int,$tagCategory: String,$onList: Boolean,$licensedBy: String,$averageScore: Int,$popularity: Int,$source: MediaSource,$countryOfOrigin: CountryCode,$search: String,$id_not: Int,$id_in: [Int],$id_not_in: [Int],$idMal_not: Int,$idMal_in: [Int],$idMal_not_in: [Int],$startDate_greater: FuzzyDateInt,$startDate_lesser: FuzzyDateInt,$startDate_like: String,$endDate_greater: FuzzyDateInt,$endDate_lesser: FuzzyDateInt,$endDate_like: String,$format_in: [MediaFormat],$format_not: MediaFormat,$format_not_in: [MediaFormat],$status_in: [MediaStatus],$status_not: MediaStatus,$status_not_in: [MediaStatus],$episodes_greater: Int,$episodes_lesser: Int,$duration_greater: Int,$duration_lesser: Int,$chapters_greater: Int,$chapters_lesser: Int,$volumes_greater: Int,$volumes_lesser: Int,$genre_in: [String],$genre_not_in: [String],$tag_in: [String],$tag_not_in: [String],$tagCategory_in: [String],$tagCategory_not_in: [String],$licensedBy_in: [String],$averageScore_not: Int,$averageScore_greater: Int,$averageScore_lesser: Int,$popularity_not: Int,$popularity_greater: Int,$popularity_lesser: Int,$source_in: [MediaSource],$sort: [MediaSort]) {
        Media(id: $id,idMal: $idMal,startDate: $startDate,endDate: $endDate,season: $season,seasonYear: $seasonYear,type: $type,format: $format,status: $status,episodes: $episodes,duration: $duration,chapters: $chapters,volumes: $volumes,isAdult: $isAdult,genre: $genre,tag: $tag,minimumTagRank: $minimumTagRank,tagCategory: $tagCategory,onList: $onList,licensedBy: $licensedBy,averageScore: $averageScore,popularity: $popularity,source: $source,countryOfOrigin: $countryOfOrigin,search: $search,id_not: $id_not,id_in: $id_in,id_not_in: $id_not_in,idMal_not: $idMal_not,idMal_in: $idMal_in,idMal_not_in: $idMal_not_in,startDate_greater: $startDate_greater,startDate_lesser: $startDate_lesser,startDate_like: $startDate_like,endDate_greater: $endDate_greater,endDate_lesser: $endDate_lesser,endDate_like: $endDate_like,format_in: $format_in,format_not: $format_not,format_not_in: $format_not_in,status_in: $status_in,status_not: $status_not,status_not_in: $status_not_in,episodes_greater: $episodes_greater,episodes_lesser: $episodes_lesser,duration_greater: $duration_greater,duration_lesser: $duration_lesser,chapters_greater: $chapters_greater,chapters_lesser: $chapters_lesser,volumes_greater: $volumes_greater,volumes_lesser: $volumes_lesser,genre_in: $genre_in,genre_not_in: $genre_not_in,tag_in: $tag_in,tag_not_in: $tag_not_in,tagCategory_in: $tagCategory_in,tagCategory_not_in: $tagCategory_not_in,licensedBy_in: $licensedBy_in,averageScore_not: $averageScore_not,averageScore_greater: $averageScore_greater,averageScore_lesser: $averageScore_lesser,popularity_not: $popularity_not,popularity_greater: $popularity_greater,popularity_lesser: $popularity_lesser,source_in: $source_in,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Media: IMediaModel; IMediaModelArgs }>(query, variables, options);
};

/** Media Trend query */
export const useMediaTrend = (
  fragment: string | DocumentNode,
  variables?:
    | IMediaTrendModelArgs
    | Ref<IMediaTrendModelArgs>
    | ReactiveFunction<IMediaTrendModelArgs>,
  options?:
    | UseQueryOptions<{ MediaTrend: IMediaTrendModel; IMediaTrendModelArgs }>
    | Ref<UseQueryOptions<{ MediaTrend: IMediaTrendModel; IMediaTrendModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ MediaTrend: IMediaTrendModel; IMediaTrendModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query MediaTrend ($mediaId: Int,$date: Int,$trending: Int,$averageScore: Int,$popularity: Int,$episode: Int,$releasing: Boolean,$mediaId_not: Int,$mediaId_in: [Int],$mediaId_not_in: [Int],$date_greater: Int,$date_lesser: Int,$trending_greater: Int,$trending_lesser: Int,$trending_not: Int,$averageScore_greater: Int,$averageScore_lesser: Int,$averageScore_not: Int,$popularity_greater: Int,$popularity_lesser: Int,$popularity_not: Int,$episode_greater: Int,$episode_lesser: Int,$episode_not: Int,$sort: [MediaTrendSort]) {
        MediaTrend(mediaId: $mediaId,date: $date,trending: $trending,averageScore: $averageScore,popularity: $popularity,episode: $episode,releasing: $releasing,mediaId_not: $mediaId_not,mediaId_in: $mediaId_in,mediaId_not_in: $mediaId_not_in,date_greater: $date_greater,date_lesser: $date_lesser,trending_greater: $trending_greater,trending_lesser: $trending_lesser,trending_not: $trending_not,averageScore_greater: $averageScore_greater,averageScore_lesser: $averageScore_lesser,averageScore_not: $averageScore_not,popularity_greater: $popularity_greater,popularity_lesser: $popularity_lesser,popularity_not: $popularity_not,episode_greater: $episode_greater,episode_lesser: $episode_lesser,episode_not: $episode_not,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ MediaTrend: IMediaTrendModel; IMediaTrendModelArgs }>(
    query,
    variables,
    options
  );
};

/** Airing schedule query */
export const useAiringSchedule = (
  fragment: string | DocumentNode,
  variables?:
    | IAiringScheduleModelArgs
    | Ref<IAiringScheduleModelArgs>
    | ReactiveFunction<IAiringScheduleModelArgs>,
  options?:
    | UseQueryOptions<{ AiringSchedule: IAiringScheduleModel; IAiringScheduleModelArgs }>
    | Ref<UseQueryOptions<{ AiringSchedule: IAiringScheduleModel; IAiringScheduleModelArgs }>>
    | ReactiveFunction<
        UseQueryOptions<{ AiringSchedule: IAiringScheduleModel; IAiringScheduleModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query AiringSchedule ($id: Int,$mediaId: Int,$episode: Int,$airingAt: Int,$notYetAired: Boolean,$id_not: Int,$id_in: [Int],$id_not_in: [Int],$mediaId_not: Int,$mediaId_in: [Int],$mediaId_not_in: [Int],$episode_not: Int,$episode_in: [Int],$episode_not_in: [Int],$episode_greater: Int,$episode_lesser: Int,$airingAt_greater: Int,$airingAt_lesser: Int,$sort: [AiringSort]) {
        AiringSchedule(id: $id,mediaId: $mediaId,episode: $episode,airingAt: $airingAt,notYetAired: $notYetAired,id_not: $id_not,id_in: $id_in,id_not_in: $id_not_in,mediaId_not: $mediaId_not,mediaId_in: $mediaId_in,mediaId_not_in: $mediaId_not_in,episode_not: $episode_not,episode_in: $episode_in,episode_not_in: $episode_not_in,episode_greater: $episode_greater,episode_lesser: $episode_lesser,airingAt_greater: $airingAt_greater,airingAt_lesser: $airingAt_lesser,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ AiringSchedule: IAiringScheduleModel; IAiringScheduleModelArgs }>(
    query,
    variables,
    options
  );
};

/** Character query */
export const useCharacter = (
  fragment: string | DocumentNode,
  variables?:
    | ICharacterModelArgs
    | Ref<ICharacterModelArgs>
    | ReactiveFunction<ICharacterModelArgs>,
  options?:
    | UseQueryOptions<{ Character: ICharacterModel; ICharacterModelArgs }>
    | Ref<UseQueryOptions<{ Character: ICharacterModel; ICharacterModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Character: ICharacterModel; ICharacterModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Character ($id: Int,$search: String,$id_not: Int,$id_in: [Int],$id_not_in: [Int],$sort: [CharacterSort]) {
        Character(id: $id,search: $search,id_not: $id_not,id_in: $id_in,id_not_in: $id_not_in,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Character: ICharacterModel; ICharacterModelArgs }>(query, variables, options);
};

/** Staff query */
export const useStaff = (
  fragment: string | DocumentNode,
  variables?: IStaffModelArgs | Ref<IStaffModelArgs> | ReactiveFunction<IStaffModelArgs>,
  options?:
    | UseQueryOptions<{ Staff: IStaffModel; IStaffModelArgs }>
    | Ref<UseQueryOptions<{ Staff: IStaffModel; IStaffModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Staff: IStaffModel; IStaffModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Staff ($id: Int,$search: String,$id_not: Int,$id_in: [Int],$id_not_in: [Int],$sort: [StaffSort]) {
        Staff(id: $id,search: $search,id_not: $id_not,id_in: $id_in,id_not_in: $id_not_in,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Staff: IStaffModel; IStaffModelArgs }>(query, variables, options);
};

/** Media list query */
export const useMediaList = (
  fragment: string | DocumentNode,
  variables?:
    | IMediaListModelArgs
    | Ref<IMediaListModelArgs>
    | ReactiveFunction<IMediaListModelArgs>,
  options?:
    | UseQueryOptions<{ MediaList: IMediaListModel; IMediaListModelArgs }>
    | Ref<UseQueryOptions<{ MediaList: IMediaListModel; IMediaListModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ MediaList: IMediaListModel; IMediaListModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query MediaList ($id: Int,$userId: Int,$userName: String,$type: MediaType,$status: MediaListStatus,$mediaId: Int,$isFollowing: Boolean,$notes: String,$startedAt: FuzzyDateInt,$completedAt: FuzzyDateInt,$compareWithAuthList: Boolean,$userId_in: [Int],$status_in: [MediaListStatus],$status_not_in: [MediaListStatus],$status_not: MediaListStatus,$mediaId_in: [Int],$mediaId_not_in: [Int],$notes_like: String,$startedAt_greater: FuzzyDateInt,$startedAt_lesser: FuzzyDateInt,$startedAt_like: String,$completedAt_greater: FuzzyDateInt,$completedAt_lesser: FuzzyDateInt,$completedAt_like: String,$sort: [MediaListSort]) {
        MediaList(id: $id,userId: $userId,userName: $userName,type: $type,status: $status,mediaId: $mediaId,isFollowing: $isFollowing,notes: $notes,startedAt: $startedAt,completedAt: $completedAt,compareWithAuthList: $compareWithAuthList,userId_in: $userId_in,status_in: $status_in,status_not_in: $status_not_in,status_not: $status_not,mediaId_in: $mediaId_in,mediaId_not_in: $mediaId_not_in,notes_like: $notes_like,startedAt_greater: $startedAt_greater,startedAt_lesser: $startedAt_lesser,startedAt_like: $startedAt_like,completedAt_greater: $completedAt_greater,completedAt_lesser: $completedAt_lesser,completedAt_like: $completedAt_like,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ MediaList: IMediaListModel; IMediaListModelArgs }>(query, variables, options);
};

/** Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required. */
export const useMediaListCollection = (
  fragment: string | DocumentNode,
  variables?:
    | IMediaListCollectionModelArgs
    | Ref<IMediaListCollectionModelArgs>
    | ReactiveFunction<IMediaListCollectionModelArgs>,
  options?:
    | UseQueryOptions<{
        MediaListCollection: IMediaListCollectionModel;
        IMediaListCollectionModelArgs;
      }>
    | Ref<
        UseQueryOptions<{
          MediaListCollection: IMediaListCollectionModel;
          IMediaListCollectionModelArgs;
        }>
      >
    | ReactiveFunction<
        UseQueryOptions<{
          MediaListCollection: IMediaListCollectionModel;
          IMediaListCollectionModelArgs;
        }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query MediaListCollection ($userId: Int,$userName: String,$type: MediaType,$status: MediaListStatus,$notes: String,$startedAt: FuzzyDateInt,$completedAt: FuzzyDateInt,$forceSingleCompletedList: Boolean,$chunk: Int,$perChunk: Int,$status_in: [MediaListStatus],$status_not_in: [MediaListStatus],$status_not: MediaListStatus,$notes_like: String,$startedAt_greater: FuzzyDateInt,$startedAt_lesser: FuzzyDateInt,$startedAt_like: String,$completedAt_greater: FuzzyDateInt,$completedAt_lesser: FuzzyDateInt,$completedAt_like: String,$sort: [MediaListSort]) {
        MediaListCollection(userId: $userId,userName: $userName,type: $type,status: $status,notes: $notes,startedAt: $startedAt,completedAt: $completedAt,forceSingleCompletedList: $forceSingleCompletedList,chunk: $chunk,perChunk: $perChunk,status_in: $status_in,status_not_in: $status_not_in,status_not: $status_not,notes_like: $notes_like,startedAt_greater: $startedAt_greater,startedAt_lesser: $startedAt_lesser,startedAt_like: $startedAt_like,completedAt_greater: $completedAt_greater,completedAt_lesser: $completedAt_lesser,completedAt_like: $completedAt_like,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{
    MediaListCollection: IMediaListCollectionModel;
    IMediaListCollectionModelArgs;
  }>(query, variables, options);
};

/** Collection of all the possible media genres */
export const useGenreCollection = (
  options?:
    | UseQueryOptions<{ GenreCollection: string[] }>
    | Ref<UseQueryOptions<{ GenreCollection: string[] }>>
    | ReactiveFunction<UseQueryOptions<{ GenreCollection: string[] }>>
) => {
  const query = sgtsQL\`
      query GenreCollection  {
        GenreCollection
      }\`;
  return useQuery<{ GenreCollection: string[] }>(query, null, options);
};

/** Collection of all the possible media tags */
export const useMediaTagCollection = (
  fragment: string | DocumentNode,
  variables?:
    | IMediaTagCollectionModelArgs
    | Ref<IMediaTagCollectionModelArgs>
    | ReactiveFunction<IMediaTagCollectionModelArgs>,
  options?:
    | UseQueryOptions<{ MediaTagCollection: IMediaTagModel[]; IMediaTagCollectionModelArgs }>
    | Ref<UseQueryOptions<{ MediaTagCollection: IMediaTagModel[]; IMediaTagCollectionModelArgs }>>
    | ReactiveFunction<
        UseQueryOptions<{ MediaTagCollection: IMediaTagModel[]; IMediaTagCollectionModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query MediaTagCollection ($status: Int) {
        MediaTagCollection(status: $status) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ MediaTagCollection: IMediaTagModel[]; IMediaTagCollectionModelArgs }>(
    query,
    variables,
    options
  );
};

/** User query */
export const useUser = (
  fragment: string | DocumentNode,
  variables?: IUserModelArgs | Ref<IUserModelArgs> | ReactiveFunction<IUserModelArgs>,
  options?:
    | UseQueryOptions<{ User: IUserModel; IUserModelArgs }>
    | Ref<UseQueryOptions<{ User: IUserModel; IUserModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ User: IUserModel; IUserModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query User ($id: Int,$name: String,$search: String,$sort: [UserSort]) {
        User(id: $id,name: $name,search: $search,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ User: IUserModel; IUserModelArgs }>(query, variables, options);
};

/** Get the currently authenticated user */
export const useViewer = (
  fragment: string | DocumentNode,
  options?:
    | UseQueryOptions<{ Viewer: IUserModel }>
    | Ref<UseQueryOptions<{ Viewer: IUserModel }>>
    | ReactiveFunction<UseQueryOptions<{ Viewer: IUserModel }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Viewer  {
        Viewer {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Viewer: IUserModel }>(query, null, options);
};

/** Notification query */
export const useNotification = (
  fragment: string | DocumentNode,
  variables?:
    | INotificationModelArgs
    | Ref<INotificationModelArgs>
    | ReactiveFunction<INotificationModelArgs>,
  options?:
    | UseQueryOptions<{ Notification: INotificationUnionModel; INotificationModelArgs }>
    | Ref<UseQueryOptions<{ Notification: INotificationUnionModel; INotificationModelArgs }>>
    | ReactiveFunction<
        UseQueryOptions<{ Notification: INotificationUnionModel; INotificationModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Notification ($type: NotificationType,$resetNotificationCount: Boolean,$type_in: [NotificationType]) {
        Notification(type: $type,resetNotificationCount: $resetNotificationCount,type_in: $type_in) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Notification: INotificationUnionModel; INotificationModelArgs }>(
    query,
    variables,
    options
  );
};

/** Studio query */
export const useStudio = (
  fragment: string | DocumentNode,
  variables?: IStudioModelArgs | Ref<IStudioModelArgs> | ReactiveFunction<IStudioModelArgs>,
  options?:
    | UseQueryOptions<{ Studio: IStudioModel; IStudioModelArgs }>
    | Ref<UseQueryOptions<{ Studio: IStudioModel; IStudioModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Studio: IStudioModel; IStudioModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Studio ($id: Int,$search: String,$id_not: Int,$id_in: [Int],$id_not_in: [Int],$sort: [StudioSort]) {
        Studio(id: $id,search: $search,id_not: $id_not,id_in: $id_in,id_not_in: $id_not_in,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Studio: IStudioModel; IStudioModelArgs }>(query, variables, options);
};

/** Review query */
export const useReview = (
  fragment: string | DocumentNode,
  variables?: IReviewModelArgs | Ref<IReviewModelArgs> | ReactiveFunction<IReviewModelArgs>,
  options?:
    | UseQueryOptions<{ Review: IReviewModel; IReviewModelArgs }>
    | Ref<UseQueryOptions<{ Review: IReviewModel; IReviewModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Review: IReviewModel; IReviewModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Review ($id: Int,$mediaId: Int,$userId: Int,$mediaType: MediaType,$sort: [ReviewSort]) {
        Review(id: $id,mediaId: $mediaId,userId: $userId,mediaType: $mediaType,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Review: IReviewModel; IReviewModelArgs }>(query, variables, options);
};

/** Activity query */
export const useActivity = (
  fragment: string | DocumentNode,
  variables?: IActivityModelArgs | Ref<IActivityModelArgs> | ReactiveFunction<IActivityModelArgs>,
  options?:
    | UseQueryOptions<{ Activity: IActivityUnionModel; IActivityModelArgs }>
    | Ref<UseQueryOptions<{ Activity: IActivityUnionModel; IActivityModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Activity: IActivityUnionModel; IActivityModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Activity ($id: Int,$userId: Int,$messengerId: Int,$mediaId: Int,$type: ActivityType,$isFollowing: Boolean,$hasReplies: Boolean,$hasRepliesOrTypeText: Boolean,$createdAt: Int,$id_not: Int,$id_in: [Int],$id_not_in: [Int],$userId_not: Int,$userId_in: [Int],$userId_not_in: [Int],$messengerId_not: Int,$messengerId_in: [Int],$messengerId_not_in: [Int],$mediaId_not: Int,$mediaId_in: [Int],$mediaId_not_in: [Int],$type_not: ActivityType,$type_in: [ActivityType],$type_not_in: [ActivityType],$createdAt_greater: Int,$createdAt_lesser: Int,$sort: [ActivitySort]) {
        Activity(id: $id,userId: $userId,messengerId: $messengerId,mediaId: $mediaId,type: $type,isFollowing: $isFollowing,hasReplies: $hasReplies,hasRepliesOrTypeText: $hasRepliesOrTypeText,createdAt: $createdAt,id_not: $id_not,id_in: $id_in,id_not_in: $id_not_in,userId_not: $userId_not,userId_in: $userId_in,userId_not_in: $userId_not_in,messengerId_not: $messengerId_not,messengerId_in: $messengerId_in,messengerId_not_in: $messengerId_not_in,mediaId_not: $mediaId_not,mediaId_in: $mediaId_in,mediaId_not_in: $mediaId_not_in,type_not: $type_not,type_in: $type_in,type_not_in: $type_not_in,createdAt_greater: $createdAt_greater,createdAt_lesser: $createdAt_lesser,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Activity: IActivityUnionModel; IActivityModelArgs }>(query, variables, options);
};

/** Activity reply query */
export const useActivityReply = (
  fragment: string | DocumentNode,
  variables?:
    | IActivityReplyModelArgs
    | Ref<IActivityReplyModelArgs>
    | ReactiveFunction<IActivityReplyModelArgs>,
  options?:
    | UseQueryOptions<{ ActivityReply: IActivityReplyModel; IActivityReplyModelArgs }>
    | Ref<UseQueryOptions<{ ActivityReply: IActivityReplyModel; IActivityReplyModelArgs }>>
    | ReactiveFunction<
        UseQueryOptions<{ ActivityReply: IActivityReplyModel; IActivityReplyModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query ActivityReply ($id: Int,$activityId: Int) {
        ActivityReply(id: $id,activityId: $activityId) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ ActivityReply: IActivityReplyModel; IActivityReplyModelArgs }>(
    query,
    variables,
    options
  );
};

/** Follow query */
export const useFollowing = (
  fragment: string | DocumentNode,
  variables?:
    | IFollowingModelArgs
    | Ref<IFollowingModelArgs>
    | ReactiveFunction<IFollowingModelArgs>,
  options?:
    | UseQueryOptions<{ Following: IUserModel; IFollowingModelArgs }>
    | Ref<UseQueryOptions<{ Following: IUserModel; IFollowingModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Following: IUserModel; IFollowingModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Following ($userId: Int!,$sort: [UserSort]) {
        Following(userId: $userId,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Following: IUserModel; IFollowingModelArgs }>(query, variables, options);
};

/** Follow query */
export const useFollower = (
  fragment: string | DocumentNode,
  variables?: IFollowerModelArgs | Ref<IFollowerModelArgs> | ReactiveFunction<IFollowerModelArgs>,
  options?:
    | UseQueryOptions<{ Follower: IUserModel; IFollowerModelArgs }>
    | Ref<UseQueryOptions<{ Follower: IUserModel; IFollowerModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Follower: IUserModel; IFollowerModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Follower ($userId: Int!,$sort: [UserSort]) {
        Follower(userId: $userId,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Follower: IUserModel; IFollowerModelArgs }>(query, variables, options);
};

/** Thread query */
export const useThread = (
  fragment: string | DocumentNode,
  variables?: IThreadModelArgs | Ref<IThreadModelArgs> | ReactiveFunction<IThreadModelArgs>,
  options?:
    | UseQueryOptions<{ Thread: IThreadModel; IThreadModelArgs }>
    | Ref<UseQueryOptions<{ Thread: IThreadModel; IThreadModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Thread: IThreadModel; IThreadModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Thread ($id: Int,$userId: Int,$replyUserId: Int,$subscribed: Boolean,$categoryId: Int,$mediaCategoryId: Int,$search: String,$id_in: [Int],$sort: [ThreadSort]) {
        Thread(id: $id,userId: $userId,replyUserId: $replyUserId,subscribed: $subscribed,categoryId: $categoryId,mediaCategoryId: $mediaCategoryId,search: $search,id_in: $id_in,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Thread: IThreadModel; IThreadModelArgs }>(query, variables, options);
};

/** Comment query */
export const useThreadComment = (
  fragment: string | DocumentNode,
  variables?:
    | IThreadCommentModelArgs
    | Ref<IThreadCommentModelArgs>
    | ReactiveFunction<IThreadCommentModelArgs>,
  options?:
    | UseQueryOptions<{ ThreadComment: IThreadCommentModel[]; IThreadCommentModelArgs }>
    | Ref<UseQueryOptions<{ ThreadComment: IThreadCommentModel[]; IThreadCommentModelArgs }>>
    | ReactiveFunction<
        UseQueryOptions<{ ThreadComment: IThreadCommentModel[]; IThreadCommentModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query ThreadComment ($id: Int,$threadId: Int,$userId: Int,$sort: [ThreadCommentSort]) {
        ThreadComment(id: $id,threadId: $threadId,userId: $userId,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ ThreadComment: IThreadCommentModel[]; IThreadCommentModelArgs }>(
    query,
    variables,
    options
  );
};

/** Recommendation query */
export const useRecommendation = (
  fragment: string | DocumentNode,
  variables?:
    | IRecommendationModelArgs
    | Ref<IRecommendationModelArgs>
    | ReactiveFunction<IRecommendationModelArgs>,
  options?:
    | UseQueryOptions<{ Recommendation: IRecommendationModel; IRecommendationModelArgs }>
    | Ref<UseQueryOptions<{ Recommendation: IRecommendationModel; IRecommendationModelArgs }>>
    | ReactiveFunction<
        UseQueryOptions<{ Recommendation: IRecommendationModel; IRecommendationModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Recommendation ($id: Int,$mediaId: Int,$mediaRecommendationId: Int,$userId: Int,$rating: Int,$onList: Boolean,$rating_greater: Int,$rating_lesser: Int,$sort: [RecommendationSort]) {
        Recommendation(id: $id,mediaId: $mediaId,mediaRecommendationId: $mediaRecommendationId,userId: $userId,rating: $rating,onList: $onList,rating_greater: $rating_greater,rating_lesser: $rating_lesser,sort: $sort) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Recommendation: IRecommendationModel; IRecommendationModelArgs }>(
    query,
    variables,
    options
  );
};

/** Like query */
export const useLike = (
  fragment: string | DocumentNode,
  variables?: ILikeModelArgs | Ref<ILikeModelArgs> | ReactiveFunction<ILikeModelArgs>,
  options?:
    | UseQueryOptions<{ Like: IUserModel; ILikeModelArgs }>
    | Ref<UseQueryOptions<{ Like: IUserModel; ILikeModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Like: IUserModel; ILikeModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Like ($likeableId: Int,$type: LikeableType) {
        Like(likeableId: $likeableId,type: $type) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Like: IUserModel; ILikeModelArgs }>(query, variables, options);
};

/** Provide AniList markdown to be converted to html (Requires auth) */
export const useMarkdown = (
  fragment: string | DocumentNode,
  variables?: IMarkdownModelArgs | Ref<IMarkdownModelArgs> | ReactiveFunction<IMarkdownModelArgs>,
  options?:
    | UseQueryOptions<{ Markdown: IParsedMarkdownModel; IMarkdownModelArgs }>
    | Ref<UseQueryOptions<{ Markdown: IParsedMarkdownModel; IMarkdownModelArgs }>>
    | ReactiveFunction<UseQueryOptions<{ Markdown: IParsedMarkdownModel; IMarkdownModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query Markdown ($markdown: String!) {
        Markdown(markdown: $markdown) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ Markdown: IParsedMarkdownModel; IMarkdownModelArgs }>(
    query,
    variables,
    options
  );
};

export const useAniChartUser = (
  fragment: string | DocumentNode,
  options?:
    | UseQueryOptions<{ AniChartUser: IAniChartUserModel }>
    | Ref<UseQueryOptions<{ AniChartUser: IAniChartUserModel }>>
    | ReactiveFunction<UseQueryOptions<{ AniChartUser: IAniChartUserModel }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query AniChartUser  {
        AniChartUser {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ AniChartUser: IAniChartUserModel }>(query, null, options);
};

/** Site statistics query */
export const useSiteStatistics = (
  fragment: string | DocumentNode,
  options?:
    | UseQueryOptions<{ SiteStatistics: ISiteStatisticsModel }>
    | Ref<UseQueryOptions<{ SiteStatistics: ISiteStatisticsModel }>>
    | ReactiveFunction<UseQueryOptions<{ SiteStatistics: ISiteStatisticsModel }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const query = sgtsQL\`
      query SiteStatistics  {
        SiteStatistics {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useQuery<{ SiteStatistics: ISiteStatisticsModel }>(query, null, options);
};

export const useUpdateUser = (
  fragment: string | DocumentNode,
  variables?:
    | IUpdateUserModelArgs
    | Ref<IUpdateUserModelArgs>
    | ReactiveFunction<IUpdateUserModelArgs>,
  options?:
    | UseMutationOptions<{ UpdateUser: IUserModel; IUpdateUserModelArgs }>
    | Ref<UseMutationOptions<{ UpdateUser: IUserModel; IUpdateUserModelArgs }>>
    | ReactiveFunction<UseMutationOptions<{ UpdateUser: IUserModel; IUpdateUserModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation UpdateUser ($about: String,$titleLanguage: UserTitleLanguage,$displayAdultContent: Boolean,$airingNotifications: Boolean,$scoreFormat: ScoreFormat,$rowOrder: String,$profileColor: String,$donatorBadge: String,$notificationOptions: [NotificationOptionInput],$animeListOptions: MediaListOptionsInput,$mangaListOptions: MediaListOptionsInput) {
        UpdateUser(about: $about,titleLanguage: $titleLanguage,displayAdultContent: $displayAdultContent,airingNotifications: $airingNotifications,scoreFormat: $scoreFormat,rowOrder: $rowOrder,profileColor: $profileColor,donatorBadge: $donatorBadge,notificationOptions: $notificationOptions,animeListOptions: $animeListOptions,mangaListOptions: $mangaListOptions) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ UpdateUser: IUserModel; IUpdateUserModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Create or update a media list entry */
export const useSaveMediaListEntry = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveMediaListEntryModelArgs
    | Ref<ISaveMediaListEntryModelArgs>
    | ReactiveFunction<ISaveMediaListEntryModelArgs>,
  options?:
    | UseMutationOptions<{ SaveMediaListEntry: IMediaListModel; ISaveMediaListEntryModelArgs }>
    | Ref<UseMutationOptions<{ SaveMediaListEntry: IMediaListModel; ISaveMediaListEntryModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ SaveMediaListEntry: IMediaListModel; ISaveMediaListEntryModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveMediaListEntry ($id: Int,$mediaId: Int,$status: MediaListStatus,$score: Float,$scoreRaw: Int,$progress: Int,$progressVolumes: Int,$repeat: Int,$priority: Int,$private: Boolean,$notes: String,$hiddenFromStatusLists: Boolean,$customLists: [String],$advancedScores: [Float],$startedAt: FuzzyDateInput,$completedAt: FuzzyDateInput) {
        SaveMediaListEntry(id: $id,mediaId: $mediaId,status: $status,score: $score,scoreRaw: $scoreRaw,progress: $progress,progressVolumes: $progressVolumes,repeat: $repeat,priority: $priority,private: $private,notes: $notes,hiddenFromStatusLists: $hiddenFromStatusLists,customLists: $customLists,advancedScores: $advancedScores,startedAt: $startedAt,completedAt: $completedAt) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveMediaListEntry: IMediaListModel; ISaveMediaListEntryModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Update multiple media list entries to the same values */
export const useUpdateMediaListEntries = (
  fragment: string | DocumentNode,
  variables?:
    | IUpdateMediaListEntriesModelArgs
    | Ref<IUpdateMediaListEntriesModelArgs>
    | ReactiveFunction<IUpdateMediaListEntriesModelArgs>,
  options?:
    | UseMutationOptions<{
        UpdateMediaListEntries: IMediaListModel[];
        IUpdateMediaListEntriesModelArgs;
      }>
    | Ref<
        UseMutationOptions<{
          UpdateMediaListEntries: IMediaListModel[];
          IUpdateMediaListEntriesModelArgs;
        }>
      >
    | ReactiveFunction<
        UseMutationOptions<{
          UpdateMediaListEntries: IMediaListModel[];
          IUpdateMediaListEntriesModelArgs;
        }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation UpdateMediaListEntries ($status: MediaListStatus,$score: Float,$scoreRaw: Int,$progress: Int,$progressVolumes: Int,$repeat: Int,$priority: Int,$private: Boolean,$notes: String,$hiddenFromStatusLists: Boolean,$advancedScores: [Float],$startedAt: FuzzyDateInput,$completedAt: FuzzyDateInput,$ids: [Int]) {
        UpdateMediaListEntries(status: $status,score: $score,scoreRaw: $scoreRaw,progress: $progress,progressVolumes: $progressVolumes,repeat: $repeat,priority: $priority,private: $private,notes: $notes,hiddenFromStatusLists: $hiddenFromStatusLists,advancedScores: $advancedScores,startedAt: $startedAt,completedAt: $completedAt,ids: $ids) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{
    UpdateMediaListEntries: IMediaListModel[];
    IUpdateMediaListEntriesModelArgs;
  }>(mutation, variables, options);
};

/** Delete a media list entry */
export const useDeleteMediaListEntry = (
  fragment: string | DocumentNode,
  variables?:
    | IDeleteMediaListEntryModelArgs
    | Ref<IDeleteMediaListEntryModelArgs>
    | ReactiveFunction<IDeleteMediaListEntryModelArgs>,
  options?:
    | UseMutationOptions<{ DeleteMediaListEntry: IDeletedModel; IDeleteMediaListEntryModelArgs }>
    | Ref<
        UseMutationOptions<{ DeleteMediaListEntry: IDeletedModel; IDeleteMediaListEntryModelArgs }>
      >
    | ReactiveFunction<
        UseMutationOptions<{ DeleteMediaListEntry: IDeletedModel; IDeleteMediaListEntryModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation DeleteMediaListEntry ($id: Int) {
        DeleteMediaListEntry(id: $id) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ DeleteMediaListEntry: IDeletedModel; IDeleteMediaListEntryModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Delete a custom list and remove the list entries from it */
export const useDeleteCustomList = (
  fragment: string | DocumentNode,
  variables?:
    | IDeleteCustomListModelArgs
    | Ref<IDeleteCustomListModelArgs>
    | ReactiveFunction<IDeleteCustomListModelArgs>,
  options?:
    | UseMutationOptions<{ DeleteCustomList: IDeletedModel; IDeleteCustomListModelArgs }>
    | Ref<UseMutationOptions<{ DeleteCustomList: IDeletedModel; IDeleteCustomListModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ DeleteCustomList: IDeletedModel; IDeleteCustomListModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation DeleteCustomList ($customList: String,$type: MediaType) {
        DeleteCustomList(customList: $customList,type: $type) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ DeleteCustomList: IDeletedModel; IDeleteCustomListModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Create or update text activity for the currently authenticated user */
export const useSaveTextActivity = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveTextActivityModelArgs
    | Ref<ISaveTextActivityModelArgs>
    | ReactiveFunction<ISaveTextActivityModelArgs>,
  options?:
    | UseMutationOptions<{ SaveTextActivity: ITextActivityModel; ISaveTextActivityModelArgs }>
    | Ref<UseMutationOptions<{ SaveTextActivity: ITextActivityModel; ISaveTextActivityModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ SaveTextActivity: ITextActivityModel; ISaveTextActivityModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveTextActivity ($id: Int,$text: String,$locked: Boolean) {
        SaveTextActivity(id: $id,text: $text,locked: $locked) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveTextActivity: ITextActivityModel; ISaveTextActivityModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Create or update message activity for the currently authenticated user */
export const useSaveMessageActivity = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveMessageActivityModelArgs
    | Ref<ISaveMessageActivityModelArgs>
    | ReactiveFunction<ISaveMessageActivityModelArgs>,
  options?:
    | UseMutationOptions<{
        SaveMessageActivity: IMessageActivityModel;
        ISaveMessageActivityModelArgs;
      }>
    | Ref<
        UseMutationOptions<{
          SaveMessageActivity: IMessageActivityModel;
          ISaveMessageActivityModelArgs;
        }>
      >
    | ReactiveFunction<
        UseMutationOptions<{
          SaveMessageActivity: IMessageActivityModel;
          ISaveMessageActivityModelArgs;
        }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveMessageActivity ($id: Int,$message: String,$recipientId: Int,$private: Boolean,$locked: Boolean,$asMod: Boolean) {
        SaveMessageActivity(id: $id,message: $message,recipientId: $recipientId,private: $private,locked: $locked,asMod: $asMod) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveMessageActivity: IMessageActivityModel; ISaveMessageActivityModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Update list activity (Mod Only) */
export const useSaveListActivity = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveListActivityModelArgs
    | Ref<ISaveListActivityModelArgs>
    | ReactiveFunction<ISaveListActivityModelArgs>,
  options?:
    | UseMutationOptions<{ SaveListActivity: IListActivityModel; ISaveListActivityModelArgs }>
    | Ref<UseMutationOptions<{ SaveListActivity: IListActivityModel; ISaveListActivityModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ SaveListActivity: IListActivityModel; ISaveListActivityModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveListActivity ($id: Int,$locked: Boolean) {
        SaveListActivity(id: $id,locked: $locked) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveListActivity: IListActivityModel; ISaveListActivityModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Delete an activity item of the authenticated users */
export const useDeleteActivity = (
  fragment: string | DocumentNode,
  variables?:
    | IDeleteActivityModelArgs
    | Ref<IDeleteActivityModelArgs>
    | ReactiveFunction<IDeleteActivityModelArgs>,
  options?:
    | UseMutationOptions<{ DeleteActivity: IDeletedModel; IDeleteActivityModelArgs }>
    | Ref<UseMutationOptions<{ DeleteActivity: IDeletedModel; IDeleteActivityModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ DeleteActivity: IDeletedModel; IDeleteActivityModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation DeleteActivity ($id: Int) {
        DeleteActivity(id: $id) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ DeleteActivity: IDeletedModel; IDeleteActivityModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Toggle the subscription of an activity item */
export const useToggleActivitySubscription = (
  fragment: string | DocumentNode,
  variables?:
    | IToggleActivitySubscriptionModelArgs
    | Ref<IToggleActivitySubscriptionModelArgs>
    | ReactiveFunction<IToggleActivitySubscriptionModelArgs>,
  options?:
    | UseMutationOptions<{
        ToggleActivitySubscription: IActivityUnionModel;
        IToggleActivitySubscriptionModelArgs;
      }>
    | Ref<
        UseMutationOptions<{
          ToggleActivitySubscription: IActivityUnionModel;
          IToggleActivitySubscriptionModelArgs;
        }>
      >
    | ReactiveFunction<
        UseMutationOptions<{
          ToggleActivitySubscription: IActivityUnionModel;
          IToggleActivitySubscriptionModelArgs;
        }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation ToggleActivitySubscription ($activityId: Int,$subscribe: Boolean) {
        ToggleActivitySubscription(activityId: $activityId,subscribe: $subscribe) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{
    ToggleActivitySubscription: IActivityUnionModel;
    IToggleActivitySubscriptionModelArgs;
  }>(mutation, variables, options);
};

/** Create or update an activity reply */
export const useSaveActivityReply = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveActivityReplyModelArgs
    | Ref<ISaveActivityReplyModelArgs>
    | ReactiveFunction<ISaveActivityReplyModelArgs>,
  options?:
    | UseMutationOptions<{ SaveActivityReply: IActivityReplyModel; ISaveActivityReplyModelArgs }>
    | Ref<
        UseMutationOptions<{ SaveActivityReply: IActivityReplyModel; ISaveActivityReplyModelArgs }>
      >
    | ReactiveFunction<
        UseMutationOptions<{ SaveActivityReply: IActivityReplyModel; ISaveActivityReplyModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveActivityReply ($id: Int,$activityId: Int,$text: String,$asMod: Boolean) {
        SaveActivityReply(id: $id,activityId: $activityId,text: $text,asMod: $asMod) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveActivityReply: IActivityReplyModel; ISaveActivityReplyModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Delete an activity reply of the authenticated users */
export const useDeleteActivityReply = (
  fragment: string | DocumentNode,
  variables?:
    | IDeleteActivityReplyModelArgs
    | Ref<IDeleteActivityReplyModelArgs>
    | ReactiveFunction<IDeleteActivityReplyModelArgs>,
  options?:
    | UseMutationOptions<{ DeleteActivityReply: IDeletedModel; IDeleteActivityReplyModelArgs }>
    | Ref<UseMutationOptions<{ DeleteActivityReply: IDeletedModel; IDeleteActivityReplyModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ DeleteActivityReply: IDeletedModel; IDeleteActivityReplyModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation DeleteActivityReply ($id: Int) {
        DeleteActivityReply(id: $id) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ DeleteActivityReply: IDeletedModel; IDeleteActivityReplyModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Add or remove a like from a likeable type.
                          Returns all the users who liked the same model */
export const useToggleLike = (
  fragment: string | DocumentNode,
  variables?:
    | IToggleLikeModelArgs
    | Ref<IToggleLikeModelArgs>
    | ReactiveFunction<IToggleLikeModelArgs>,
  options?:
    | UseMutationOptions<{ ToggleLike: IUserModel[]; IToggleLikeModelArgs }>
    | Ref<UseMutationOptions<{ ToggleLike: IUserModel[]; IToggleLikeModelArgs }>>
    | ReactiveFunction<UseMutationOptions<{ ToggleLike: IUserModel[]; IToggleLikeModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation ToggleLike ($id: Int,$type: LikeableType) {
        ToggleLike(id: $id,type: $type) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ ToggleLike: IUserModel[]; IToggleLikeModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Add or remove a like from a likeable type. */
export const useToggleLikeV2 = (
  fragment: string | DocumentNode,
  variables?:
    | IToggleLikeV2ModelArgs
    | Ref<IToggleLikeV2ModelArgs>
    | ReactiveFunction<IToggleLikeV2ModelArgs>,
  options?:
    | UseMutationOptions<{ ToggleLikeV2: ILikeableUnionModel; IToggleLikeV2ModelArgs }>
    | Ref<UseMutationOptions<{ ToggleLikeV2: ILikeableUnionModel; IToggleLikeV2ModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ ToggleLikeV2: ILikeableUnionModel; IToggleLikeV2ModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation ToggleLikeV2 ($id: Int,$type: LikeableType) {
        ToggleLikeV2(id: $id,type: $type) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ ToggleLikeV2: ILikeableUnionModel; IToggleLikeV2ModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Toggle the un/following of a user */
export const useToggleFollow = (
  fragment: string | DocumentNode,
  variables?:
    | IToggleFollowModelArgs
    | Ref<IToggleFollowModelArgs>
    | ReactiveFunction<IToggleFollowModelArgs>,
  options?:
    | UseMutationOptions<{ ToggleFollow: IUserModel; IToggleFollowModelArgs }>
    | Ref<UseMutationOptions<{ ToggleFollow: IUserModel; IToggleFollowModelArgs }>>
    | ReactiveFunction<UseMutationOptions<{ ToggleFollow: IUserModel; IToggleFollowModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation ToggleFollow ($userId: Int) {
        ToggleFollow(userId: $userId) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ ToggleFollow: IUserModel; IToggleFollowModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Favourite or unfavourite an anime, manga, character, staff member, or studio */
export const useToggleFavourite = (
  fragment: string | DocumentNode,
  variables?:
    | IToggleFavouriteModelArgs
    | Ref<IToggleFavouriteModelArgs>
    | ReactiveFunction<IToggleFavouriteModelArgs>,
  options?:
    | UseMutationOptions<{ ToggleFavourite: IFavouritesModel; IToggleFavouriteModelArgs }>
    | Ref<UseMutationOptions<{ ToggleFavourite: IFavouritesModel; IToggleFavouriteModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ ToggleFavourite: IFavouritesModel; IToggleFavouriteModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation ToggleFavourite ($animeId: Int,$mangaId: Int,$characterId: Int,$staffId: Int,$studioId: Int) {
        ToggleFavourite(animeId: $animeId,mangaId: $mangaId,characterId: $characterId,staffId: $staffId,studioId: $studioId) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ ToggleFavourite: IFavouritesModel; IToggleFavouriteModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Update the order favourites are displayed in */
export const useUpdateFavouriteOrder = (
  fragment: string | DocumentNode,
  variables?:
    | IUpdateFavouriteOrderModelArgs
    | Ref<IUpdateFavouriteOrderModelArgs>
    | ReactiveFunction<IUpdateFavouriteOrderModelArgs>,
  options?:
    | UseMutationOptions<{ UpdateFavouriteOrder: IFavouritesModel; IUpdateFavouriteOrderModelArgs }>
    | Ref<
        UseMutationOptions<{
          UpdateFavouriteOrder: IFavouritesModel;
          IUpdateFavouriteOrderModelArgs;
        }>
      >
    | ReactiveFunction<
        UseMutationOptions<{
          UpdateFavouriteOrder: IFavouritesModel;
          IUpdateFavouriteOrderModelArgs;
        }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation UpdateFavouriteOrder ($animeIds: [Int],$mangaIds: [Int],$characterIds: [Int],$staffIds: [Int],$studioIds: [Int],$animeOrder: [Int],$mangaOrder: [Int],$characterOrder: [Int],$staffOrder: [Int],$studioOrder: [Int]) {
        UpdateFavouriteOrder(animeIds: $animeIds,mangaIds: $mangaIds,characterIds: $characterIds,staffIds: $staffIds,studioIds: $studioIds,animeOrder: $animeOrder,mangaOrder: $mangaOrder,characterOrder: $characterOrder,staffOrder: $staffOrder,studioOrder: $studioOrder) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ UpdateFavouriteOrder: IFavouritesModel; IUpdateFavouriteOrderModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Create or update a review */
export const useSaveReview = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveReviewModelArgs
    | Ref<ISaveReviewModelArgs>
    | ReactiveFunction<ISaveReviewModelArgs>,
  options?:
    | UseMutationOptions<{ SaveReview: IReviewModel; ISaveReviewModelArgs }>
    | Ref<UseMutationOptions<{ SaveReview: IReviewModel; ISaveReviewModelArgs }>>
    | ReactiveFunction<UseMutationOptions<{ SaveReview: IReviewModel; ISaveReviewModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveReview ($id: Int,$mediaId: Int,$body: String,$summary: String,$score: Int,$private: Boolean) {
        SaveReview(id: $id,mediaId: $mediaId,body: $body,summary: $summary,score: $score,private: $private) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveReview: IReviewModel; ISaveReviewModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Delete a review */
export const useDeleteReview = (
  fragment: string | DocumentNode,
  variables?:
    | IDeleteReviewModelArgs
    | Ref<IDeleteReviewModelArgs>
    | ReactiveFunction<IDeleteReviewModelArgs>,
  options?:
    | UseMutationOptions<{ DeleteReview: IDeletedModel; IDeleteReviewModelArgs }>
    | Ref<UseMutationOptions<{ DeleteReview: IDeletedModel; IDeleteReviewModelArgs }>>
    | ReactiveFunction<UseMutationOptions<{ DeleteReview: IDeletedModel; IDeleteReviewModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation DeleteReview ($id: Int) {
        DeleteReview(id: $id) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ DeleteReview: IDeletedModel; IDeleteReviewModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Rate a review */
export const useRateReview = (
  fragment: string | DocumentNode,
  variables?:
    | IRateReviewModelArgs
    | Ref<IRateReviewModelArgs>
    | ReactiveFunction<IRateReviewModelArgs>,
  options?:
    | UseMutationOptions<{ RateReview: IReviewModel; IRateReviewModelArgs }>
    | Ref<UseMutationOptions<{ RateReview: IReviewModel; IRateReviewModelArgs }>>
    | ReactiveFunction<UseMutationOptions<{ RateReview: IReviewModel; IRateReviewModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation RateReview ($reviewId: Int,$rating: ReviewRating) {
        RateReview(reviewId: $reviewId,rating: $rating) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ RateReview: IReviewModel; IRateReviewModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Recommendation a media */
export const useSaveRecommendation = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveRecommendationModelArgs
    | Ref<ISaveRecommendationModelArgs>
    | ReactiveFunction<ISaveRecommendationModelArgs>,
  options?:
    | UseMutationOptions<{ SaveRecommendation: IRecommendationModel; ISaveRecommendationModelArgs }>
    | Ref<
        UseMutationOptions<{
          SaveRecommendation: IRecommendationModel;
          ISaveRecommendationModelArgs;
        }>
      >
    | ReactiveFunction<
        UseMutationOptions<{
          SaveRecommendation: IRecommendationModel;
          ISaveRecommendationModelArgs;
        }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveRecommendation ($mediaId: Int,$mediaRecommendationId: Int,$rating: RecommendationRating) {
        SaveRecommendation(mediaId: $mediaId,mediaRecommendationId: $mediaRecommendationId,rating: $rating) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveRecommendation: IRecommendationModel; ISaveRecommendationModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Create or update a forum thread */
export const useSaveThread = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveThreadModelArgs
    | Ref<ISaveThreadModelArgs>
    | ReactiveFunction<ISaveThreadModelArgs>,
  options?:
    | UseMutationOptions<{ SaveThread: IThreadModel; ISaveThreadModelArgs }>
    | Ref<UseMutationOptions<{ SaveThread: IThreadModel; ISaveThreadModelArgs }>>
    | ReactiveFunction<UseMutationOptions<{ SaveThread: IThreadModel; ISaveThreadModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveThread ($id: Int,$title: String,$body: String,$categories: [Int],$mediaCategories: [Int],$sticky: Boolean,$locked: Boolean) {
        SaveThread(id: $id,title: $title,body: $body,categories: $categories,mediaCategories: $mediaCategories,sticky: $sticky,locked: $locked) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveThread: IThreadModel; ISaveThreadModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Delete a thread */
export const useDeleteThread = (
  fragment: string | DocumentNode,
  variables?:
    | IDeleteThreadModelArgs
    | Ref<IDeleteThreadModelArgs>
    | ReactiveFunction<IDeleteThreadModelArgs>,
  options?:
    | UseMutationOptions<{ DeleteThread: IDeletedModel; IDeleteThreadModelArgs }>
    | Ref<UseMutationOptions<{ DeleteThread: IDeletedModel; IDeleteThreadModelArgs }>>
    | ReactiveFunction<UseMutationOptions<{ DeleteThread: IDeletedModel; IDeleteThreadModelArgs }>>
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation DeleteThread ($id: Int) {
        DeleteThread(id: $id) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ DeleteThread: IDeletedModel; IDeleteThreadModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Toggle the subscription of a forum thread */
export const useToggleThreadSubscription = (
  fragment: string | DocumentNode,
  variables?:
    | IToggleThreadSubscriptionModelArgs
    | Ref<IToggleThreadSubscriptionModelArgs>
    | ReactiveFunction<IToggleThreadSubscriptionModelArgs>,
  options?:
    | UseMutationOptions<{
        ToggleThreadSubscription: IThreadModel;
        IToggleThreadSubscriptionModelArgs;
      }>
    | Ref<
        UseMutationOptions<{
          ToggleThreadSubscription: IThreadModel;
          IToggleThreadSubscriptionModelArgs;
        }>
      >
    | ReactiveFunction<
        UseMutationOptions<{
          ToggleThreadSubscription: IThreadModel;
          IToggleThreadSubscriptionModelArgs;
        }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation ToggleThreadSubscription ($threadId: Int,$subscribe: Boolean) {
        ToggleThreadSubscription(threadId: $threadId,subscribe: $subscribe) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{
    ToggleThreadSubscription: IThreadModel;
    IToggleThreadSubscriptionModelArgs;
  }>(mutation, variables, options);
};

/** Create or update a thread comment */
export const useSaveThreadComment = (
  fragment: string | DocumentNode,
  variables?:
    | ISaveThreadCommentModelArgs
    | Ref<ISaveThreadCommentModelArgs>
    | ReactiveFunction<ISaveThreadCommentModelArgs>,
  options?:
    | UseMutationOptions<{ SaveThreadComment: IThreadCommentModel; ISaveThreadCommentModelArgs }>
    | Ref<
        UseMutationOptions<{ SaveThreadComment: IThreadCommentModel; ISaveThreadCommentModelArgs }>
      >
    | ReactiveFunction<
        UseMutationOptions<{ SaveThreadComment: IThreadCommentModel; ISaveThreadCommentModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation SaveThreadComment ($id: Int,$threadId: Int,$parentCommentId: Int,$comment: String) {
        SaveThreadComment(id: $id,threadId: $threadId,parentCommentId: $parentCommentId,comment: $comment) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ SaveThreadComment: IThreadCommentModel; ISaveThreadCommentModelArgs }>(
    mutation,
    variables,
    options
  );
};

/** Delete a thread comment */
export const useDeleteThreadComment = (
  fragment: string | DocumentNode,
  variables?:
    | IDeleteThreadCommentModelArgs
    | Ref<IDeleteThreadCommentModelArgs>
    | ReactiveFunction<IDeleteThreadCommentModelArgs>,
  options?:
    | UseMutationOptions<{ DeleteThreadComment: IDeletedModel; IDeleteThreadCommentModelArgs }>
    | Ref<UseMutationOptions<{ DeleteThreadComment: IDeletedModel; IDeleteThreadCommentModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ DeleteThreadComment: IDeletedModel; IDeleteThreadCommentModelArgs }>
      >
) => {
  const { isString, isFragment, fragmentName } = guessFragmentType(fragment);
  const mutation = sgtsQL\`
      mutation DeleteThreadComment ($id: Int) {
        DeleteThreadComment(id: $id) {
          \${isString ? fragment : '...' + fragmentName}
        }
      } \${isFragment ? fragment : ''}
      \`;

  return useMutation<{ DeleteThreadComment: IDeletedModel; IDeleteThreadCommentModelArgs }>(
    mutation,
    variables,
    options
  );
};

export const useUpdateAniChartSettings = (
  variables?:
    | IUpdateAniChartSettingsModelArgs
    | Ref<IUpdateAniChartSettingsModelArgs>
    | ReactiveFunction<IUpdateAniChartSettingsModelArgs>,
  options?:
    | UseMutationOptions<{ UpdateAniChartSettings: string; IUpdateAniChartSettingsModelArgs }>
    | Ref<UseMutationOptions<{ UpdateAniChartSettings: string; IUpdateAniChartSettingsModelArgs }>>
    | ReactiveFunction<
        UseMutationOptions<{ UpdateAniChartSettings: string; IUpdateAniChartSettingsModelArgs }>
      >
) => {
  const mutation = sgtsQL\`
      mutation UpdateAniChartSettings ($titleLanguage: String,$outgoingLinkProvider: String,$theme: String,$sort: String) {
        UpdateAniChartSettings(titleLanguage: $titleLanguage,outgoingLinkProvider: $outgoingLinkProvider,theme: $theme,sort: $sort)
      }\`;
  return useMutation<{ UpdateAniChartSettings: string; IUpdateAniChartSettingsModelArgs }>(
    mutation,
    variables,
    options
  );
};

export const useUpdateAniChartHighlights = (
  variables?:
    | IUpdateAniChartHighlightsModelArgs
    | Ref<IUpdateAniChartHighlightsModelArgs>
    | ReactiveFunction<IUpdateAniChartHighlightsModelArgs>,
  options?:
    | UseMutationOptions<{ UpdateAniChartHighlights: string; IUpdateAniChartHighlightsModelArgs }>
    | Ref<
        UseMutationOptions<{ UpdateAniChartHighlights: string; IUpdateAniChartHighlightsModelArgs }>
      >
    | ReactiveFunction<
        UseMutationOptions<{ UpdateAniChartHighlights: string; IUpdateAniChartHighlightsModelArgs }>
      >
) => {
  const mutation = sgtsQL\`
      mutation UpdateAniChartHighlights ($highlights: [AniChartHighlightInput]) {
        UpdateAniChartHighlights(highlights: $highlights)
      }\`;
  return useMutation<{ UpdateAniChartHighlights: string; IUpdateAniChartHighlightsModelArgs }>(
    mutation,
    variables,
    options
  );
};
"
`;
