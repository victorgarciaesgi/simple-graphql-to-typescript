// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generates types correctly from graphqlZero 1`] = `
"/* eslint-disable */
/* tslint-disable */
// @ts-nocheck
// *******************************************************
// *******************************************************
//
// GENERATED FILE, DO NOT MODIFY
//
// Made by Victor Garcia Â®
//
// https://github.com/victorgarciaesgi
// *******************************************************
// *******************************************************
// ðŸ’™

export type Maybe<T> = T | null;

export interface Query {
  _?: Maybe<number>;

  albums?: Maybe<AlbumsPage>;

  album?: Maybe<Album>;

  comments?: Maybe<CommentsPage>;

  comment?: Maybe<Comment>;

  photos?: Maybe<PhotosPage>;

  photo?: Maybe<Photo>;

  posts?: Maybe<PostsPage>;

  post?: Maybe<Post>;

  todos?: Maybe<TodosPage>;

  todo?: Maybe<Todo>;

  users?: Maybe<UsersPage>;

  user?: Maybe<User>;
}

export interface PageQueryOptions {
  paginate?: Maybe<PaginateOptions>;

  slice?: Maybe<SliceOptions>;

  sort?: Maybe<SortOptions[]>;

  operators?: Maybe<OperatorOptions[]>;

  search?: Maybe<SearchOptions>;
}

export interface PaginateOptions {
  page?: Maybe<number>;

  limit?: Maybe<number>;
}

export interface SliceOptions {
  start?: Maybe<number>;

  end?: Maybe<number>;

  limit?: Maybe<number>;
}

export interface SortOptions {
  field?: Maybe<string>;

  order?: Maybe<SortOrderEnum>;
}

export interface OperatorOptions {
  kind?: Maybe<OperatorKindEnum>;

  field?: Maybe<string>;

  value?: Maybe<string>;
}

export interface SearchOptions {
  q?: Maybe<string>;
}

export interface AlbumsPage {
  data?: Maybe<Album[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Album {
  id?: Maybe<string>;

  title?: Maybe<string>;

  user?: Maybe<User>;

  photos?: Maybe<PhotosPage>;
}

export interface User {
  id?: Maybe<string>;

  name?: Maybe<string>;

  username?: Maybe<string>;

  email?: Maybe<string>;

  address?: Maybe<Address>;

  phone?: Maybe<string>;

  website?: Maybe<string>;

  company?: Maybe<Company>;

  posts?: Maybe<PostsPage>;

  albums?: Maybe<AlbumsPage>;

  todos?: Maybe<TodosPage>;
}

export interface Address {
  street?: Maybe<string>;

  suite?: Maybe<string>;

  city?: Maybe<string>;

  zipcode?: Maybe<string>;

  geo?: Maybe<Geo>;
}

export interface Geo {
  lat?: Maybe<number>;

  lng?: Maybe<number>;
}

export interface Company {
  name?: Maybe<string>;

  catchPhrase?: Maybe<string>;

  bs?: Maybe<string>;
}

export interface PostsPage {
  data?: Maybe<Post[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Post {
  id?: Maybe<string>;

  title?: Maybe<string>;

  body?: Maybe<string>;

  user?: Maybe<User>;

  comments?: Maybe<CommentsPage>;
}

export interface CommentsPage {
  data?: Maybe<Comment[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Comment {
  id?: Maybe<string>;

  name?: Maybe<string>;

  email?: Maybe<string>;

  body?: Maybe<string>;

  post?: Maybe<Post>;
}

export interface PaginationLinks {
  first?: Maybe<PageLimitPair>;

  prev?: Maybe<PageLimitPair>;

  next?: Maybe<PageLimitPair>;

  last?: Maybe<PageLimitPair>;
}

export interface PageLimitPair {
  page?: Maybe<number>;

  limit?: Maybe<number>;
}

export interface PageMetadata {
  totalCount?: Maybe<number>;
}

export interface TodosPage {
  data?: Maybe<Todo[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Todo {
  id?: Maybe<string>;

  title?: Maybe<string>;

  completed?: Maybe<boolean>;

  user?: Maybe<User>;
}

export interface PhotosPage {
  data?: Maybe<Photo[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Photo {
  id?: Maybe<string>;

  title?: Maybe<string>;

  url?: Maybe<string>;

  thumbnailUrl?: Maybe<string>;

  album?: Maybe<Album>;
}

export interface UsersPage {
  data?: Maybe<User[]>;

  links?: Maybe<PaginationLinks>;

  meta?: Maybe<PageMetadata>;
}

export interface Mutation {
  _?: Maybe<number>;

  createAlbum?: Maybe<Album>;

  updateAlbum?: Maybe<Album>;

  deleteAlbum?: Maybe<boolean>;

  createComment?: Maybe<Comment>;

  updateComment?: Maybe<Comment>;

  deleteComment?: Maybe<boolean>;

  createPhoto?: Maybe<Photo>;

  updatePhoto?: Maybe<Photo>;

  deletePhoto?: Maybe<boolean>;

  createPost?: Maybe<Post>;

  updatePost?: Maybe<Post>;

  deletePost?: Maybe<boolean>;

  createTodo?: Maybe<Todo>;

  updateTodo?: Maybe<Todo>;

  deleteTodo?: Maybe<boolean>;

  createUser?: Maybe<User>;

  updateUser?: Maybe<User>;

  deleteUser?: Maybe<boolean>;
}

export interface CreateAlbumInput {
  title: string;

  userId: string;
}

export interface UpdateAlbumInput {
  title?: Maybe<string>;

  userId?: Maybe<string>;
}

export interface CreateCommentInput {
  name: string;

  email: string;

  body: string;
}

export interface UpdateCommentInput {
  name?: Maybe<string>;

  email?: Maybe<string>;

  body?: Maybe<string>;
}

export interface CreatePhotoInput {
  title: string;

  url: string;

  thumbnailUrl: string;
}

export interface UpdatePhotoInput {
  title?: Maybe<string>;

  url?: Maybe<string>;

  thumbnailUrl?: Maybe<string>;
}

export interface CreatePostInput {
  title: string;

  body: string;
}

export interface UpdatePostInput {
  title?: Maybe<string>;

  body?: Maybe<string>;
}

export interface CreateTodoInput {
  title: string;

  completed: boolean;
}

export interface UpdateTodoInput {
  title?: Maybe<string>;

  completed?: Maybe<boolean>;
}

export interface CreateUserInput {
  name: string;

  username: string;

  email: string;

  address?: Maybe<AddressInput>;

  phone?: Maybe<string>;

  website?: Maybe<string>;

  company?: Maybe<CompanyInput>;
}

export interface AddressInput {
  street?: Maybe<string>;

  suite?: Maybe<string>;

  city?: Maybe<string>;

  zipcode?: Maybe<string>;

  geo?: Maybe<GeoInput>;
}

export interface GeoInput {
  lat?: Maybe<number>;

  lng?: Maybe<number>;
}

export interface CompanyInput {
  name?: Maybe<string>;

  catchPhrase?: Maybe<string>;

  bs?: Maybe<string>;
}

export interface UpdateUserInput {
  name?: Maybe<string>;

  username?: Maybe<string>;

  email?: Maybe<string>;

  address?: Maybe<AddressInput>;

  phone?: Maybe<string>;

  website?: Maybe<string>;

  company?: Maybe<CompanyInput>;
}

export enum SortOrderEnum {
  Asc = 'ASC',
  Desc = 'DESC'
}

export enum OperatorKindEnum {
  Gte = 'GTE',
  Lte = 'LTE',
  Ne = 'NE',
  Like = 'LIKE'
}

export enum CacheControlScope {
  Public = 'PUBLIC',
  Private = 'PRIVATE'
}

export interface albumsArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface albumArgs {
  id: string;
}

export interface commentsArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface commentArgs {
  id: string;
}

export interface photosArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface photoArgs {
  id: string;
}

export interface postsArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface postArgs {
  id: string;
}

export interface todosArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface todoArgs {
  id: string;
}

export interface usersArgs {
  options?: Maybe<PageQueryOptions>;
}

export interface userArgs {
  id: string;
}

export interface createAlbumArgs {
  input: CreateAlbumInput;
}

export interface updateAlbumArgs {
  id: string;

  input: UpdateAlbumInput;
}

export interface deleteAlbumArgs {
  id: string;
}

export interface createCommentArgs {
  input: CreateCommentInput;
}

export interface updateCommentArgs {
  id: string;

  input: UpdateCommentInput;
}

export interface deleteCommentArgs {
  id: string;
}

export interface createPhotoArgs {
  input: CreatePhotoInput;
}

export interface updatePhotoArgs {
  id: string;

  input: UpdatePhotoInput;
}

export interface deletePhotoArgs {
  id: string;
}

export interface createPostArgs {
  input: CreatePostInput;
}

export interface updatePostArgs {
  id: string;

  input: UpdatePostInput;
}

export interface deletePostArgs {
  id: string;
}

export interface createTodoArgs {
  input: CreateTodoInput;
}

export interface updateTodoArgs {
  id: string;

  input: UpdateTodoInput;
}

export interface deleteTodoArgs {
  id: string;
}

export interface createUserArgs {
  input: CreateUserInput;
}

export interface updateUserArgs {
  id: string;

  input: UpdateUserInput;
}

export interface deleteUserArgs {
  id: string;
}
"
`;

exports[`Generates types correctly from graphqlZero 2`] = `
"/* eslint-disable */
/* tslint-disable */
// @ts-nocheck
// *******************************************************
// *******************************************************
//
// GENERATED FILE, DO NOT MODIFY
//
// Made by Victor Garcia Â®
//
// https://github.com/victorgarciaesgi
// *******************************************************
// *******************************************************
// ðŸ’™

export type Maybe<T> = T | null;

export interface RootQueryType {
  post?: Maybe<Post>;

  posts?: Maybe<Post[]>;

  comment?: Maybe<Comment>;

  comments?: Maybe<Comment[]>;

  album?: Maybe<Album>;

  albums?: Maybe<Album[]>;

  photo?: Maybe<Photo>;

  photos?: Maybe<Photo[]>;

  todo?: Maybe<Todo>;

  todos?: Maybe<Todo[]>;

  user?: Maybe<User>;

  users?: Maybe<User[]>;
}

export interface Post {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  body?: Maybe<string>;
}

export interface User {
  id?: Maybe<number>;

  name?: Maybe<string>;

  username?: Maybe<string>;

  email?: Maybe<string>;

  phone?: Maybe<string>;

  website?: Maybe<string>;
}

export interface Comment {
  post?: Maybe<Post>;

  postId?: Maybe<number>;

  id?: Maybe<number>;

  name?: Maybe<string>;

  email?: Maybe<string>;

  body?: Maybe<string>;
}

export interface Album {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;
}

export interface Photo {
  album?: Maybe<Album>;

  albumId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  url?: Maybe<string>;

  thumbnailUrl?: Maybe<string>;
}

export interface Todo {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  completed?: Maybe<boolean>;
}

export interface postArgs {
  id?: Maybe<number>;
}

export interface postsArgs {
  userId?: Maybe<number>;
}

export interface commentArgs {
  id?: Maybe<number>;
}

export interface commentsArgs {
  postId?: Maybe<number>;
}

export interface albumArgs {
  id?: Maybe<number>;
}

export interface albumsArgs {
  userId?: Maybe<number>;
}

export interface photoArgs {
  id?: Maybe<number>;
}

export interface photosArgs {
  albumId?: Maybe<number>;
}

export interface todoArgs {
  id?: Maybe<number>;
}

export interface todosArgs {
  userId?: Maybe<number>;

  completed?: Maybe<boolean>;
}

export interface userArgs {
  id?: Maybe<number>;
}

export interface usersArgs {}
"
`;

exports[`Generates types correctly from jsonplaceholder 1`] = `
"/* eslint-disable */
/* tslint-disable */
// @ts-nocheck
// *******************************************************
// *******************************************************
//
// GENERATED FILE, DO NOT MODIFY
//
// Made by Victor Garcia Â®
//
// https://github.com/victorgarciaesgi
// *******************************************************
// *******************************************************
// ðŸ’™

export type Maybe<T> = T | null;

export interface RootQueryType {
  post?: Maybe<Post>;

  posts?: Maybe<Post[]>;

  comment?: Maybe<Comment>;

  comments?: Maybe<Comment[]>;

  album?: Maybe<Album>;

  albums?: Maybe<Album[]>;

  photo?: Maybe<Photo>;

  photos?: Maybe<Photo[]>;

  todo?: Maybe<Todo>;

  todos?: Maybe<Todo[]>;

  user?: Maybe<User>;

  users?: Maybe<User[]>;
}

export interface Post {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  body?: Maybe<string>;
}

export interface User {
  id?: Maybe<number>;

  name?: Maybe<string>;

  username?: Maybe<string>;

  email?: Maybe<string>;

  phone?: Maybe<string>;

  website?: Maybe<string>;
}

export interface Comment {
  post?: Maybe<Post>;

  postId?: Maybe<number>;

  id?: Maybe<number>;

  name?: Maybe<string>;

  email?: Maybe<string>;

  body?: Maybe<string>;
}

export interface Album {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;
}

export interface Photo {
  album?: Maybe<Album>;

  albumId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  url?: Maybe<string>;

  thumbnailUrl?: Maybe<string>;
}

export interface Todo {
  user?: Maybe<User>;

  userId?: Maybe<number>;

  id?: Maybe<number>;

  title?: Maybe<string>;

  completed?: Maybe<boolean>;
}

export interface postArgs {
  id?: Maybe<number>;
}

export interface postsArgs {
  userId?: Maybe<number>;
}

export interface commentArgs {
  id?: Maybe<number>;
}

export interface commentsArgs {
  postId?: Maybe<number>;
}

export interface albumArgs {
  id?: Maybe<number>;
}

export interface albumsArgs {
  userId?: Maybe<number>;
}

export interface photoArgs {
  id?: Maybe<number>;
}

export interface photosArgs {
  albumId?: Maybe<number>;
}

export interface todoArgs {
  id?: Maybe<number>;
}

export interface todosArgs {
  userId?: Maybe<number>;

  completed?: Maybe<boolean>;
}

export interface userArgs {
  id?: Maybe<number>;
}

export interface usersArgs {}
"
`;
